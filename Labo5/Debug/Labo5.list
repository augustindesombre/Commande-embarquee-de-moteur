
Labo5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006748  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080068e0  080068e0  000168e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad8  08006ad8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae0  08006ae0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000002c  08006b14  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08006b14  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e048  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eeb  00000000  00000000  0002e0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0002ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a80  00000000  00000000  00030d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017619  00000000  00000000  000317b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe49  00000000  00000000  00048dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098e14  00000000  00000000  00058c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c88  00000000  00000000  000f1a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f56b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080068c8 	.word	0x080068c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	080068c8 	.word	0x080068c8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b970 	b.w	8000e6c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	460f      	mov	r7, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0xe2>
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	b143      	cbz	r3, 8000bd2 <__udivmoddi4+0x2e>
 8000bc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc4:	f1c3 0220 	rsb	r2, r3, #32
 8000bc8:	409f      	lsls	r7, r3
 8000bca:	fa20 f202 	lsr.w	r2, r0, r2
 8000bce:	4317      	orrs	r7, r2
 8000bd0:	409c      	lsls	r4, r3
 8000bd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bd6:	fa1f f58c 	uxth.w	r5, ip
 8000bda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be8:	fb01 f005 	mul.w	r0, r1, r5
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x62>
 8000bf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf8:	f080 811c 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	f240 8119 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c02:	3902      	subs	r1, #2
 8000c04:	4462      	add	r2, ip
 8000c06:	1a12      	subs	r2, r2, r0
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c16:	fb00 f505 	mul.w	r5, r0, r5
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x90>
 8000c1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x294>
 8000c2a:	42a5      	cmp	r5, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x294>
 8000c30:	4464      	add	r4, ip
 8000c32:	3802      	subs	r0, #2
 8000c34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11e      	cbz	r6, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40dc      	lsrs	r4, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9c6 4300 	strd	r4, r3, [r6]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0xbc>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80ed 	beq.w	8000e2e <__udivmoddi4+0x28a>
 8000c54:	2100      	movs	r1, #0
 8000c56:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c60:	fab3 f183 	clz	r1, r3
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d149      	bne.n	8000cfc <__udivmoddi4+0x158>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	d302      	bcc.n	8000c72 <__udivmoddi4+0xce>
 8000c6c:	4282      	cmp	r2, r0
 8000c6e:	f200 80f8 	bhi.w	8000e62 <__udivmoddi4+0x2be>
 8000c72:	1a84      	subs	r4, r0, r2
 8000c74:	eb65 0203 	sbc.w	r2, r5, r3
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d0e2      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c80:	e9c6 4700 	strd	r4, r7, [r6]
 8000c84:	e7df      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c86:	b902      	cbnz	r2, 8000c8a <__udivmoddi4+0xe6>
 8000c88:	deff      	udf	#255	; 0xff
 8000c8a:	fab2 f382 	clz	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c94:	1a8a      	subs	r2, r1, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca8:	0c22      	lsrs	r2, r4, #16
 8000caa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cae:	fb0e f005 	mul.w	r0, lr, r5
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2b8>
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	1a12      	subs	r2, r2, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x14e>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x14c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2c2>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfa:	e79f      	b.n	8000c3c <__udivmoddi4+0x98>
 8000cfc:	f1c1 0720 	rsb	r7, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d12:	40fd      	lsrs	r5, r7
 8000d14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d18:	4323      	orrs	r3, r4
 8000d1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	fb09 5518 	mls	r5, r9, r8, r5
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2b4>
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2b4>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4464      	add	r4, ip
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	b29d      	uxth	r5, r3
 8000d58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2ac>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2ac>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	4464      	add	r4, ip
 8000d7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d82:	fba3 9502 	umull	r9, r5, r3, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46ae      	mov	lr, r5
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x29c>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x298>
 8000d94:	b156      	cbz	r6, 8000dac <__udivmoddi4+0x208>
 8000d96:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000da2:	40ca      	lsrs	r2, r1
 8000da4:	40cc      	lsrs	r4, r1
 8000da6:	4317      	orrs	r7, r2
 8000da8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dac:	4618      	mov	r0, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	f1c3 0120 	rsb	r1, r3, #32
 8000db8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dbc:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc0:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc4:	409d      	lsls	r5, r3
 8000dc6:	432a      	orrs	r2, r5
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd8:	0c11      	lsrs	r1, r2, #16
 8000dda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dde:	fb00 f50e 	mul.w	r5, r0, lr
 8000de2:	428d      	cmp	r5, r1
 8000de4:	fa04 f403 	lsl.w	r4, r4, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x258>
 8000dea:	eb1c 0101 	adds.w	r1, ip, r1
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000df4:	428d      	cmp	r5, r1
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	1b49      	subs	r1, r1, r5
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e04:	fb07 1115 	mls	r1, r7, r5, r1
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e10:	4291      	cmp	r1, r2
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x282>
 8000e14:	eb1c 0202 	adds.w	r2, ip, r2
 8000e18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2a8>
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2a8>
 8000e22:	3d02      	subs	r5, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a52      	subs	r2, r2, r1
 8000e28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0xfc>
 8000e2e:	4631      	mov	r1, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000e34:	4639      	mov	r1, r7
 8000e36:	e6e6      	b.n	8000c06 <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x90>
 8000e3c:	4548      	cmp	r0, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4c:	4645      	mov	r5, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x282>
 8000e50:	462b      	mov	r3, r5
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x258>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5c:	3d02      	subs	r5, #2
 8000e5e:	4462      	add	r2, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e62:	4608      	mov	r0, r1
 8000e64:	e70a      	b.n	8000c7c <__udivmoddi4+0xd8>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x14e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <hall_scale>:
float offset2=2240.0;

//mise à l'échelle des sondes de hall de 0 à 4095 -> -1 à 1
//cette fonction est à appeler dans l'interruption
void hall_scale(uint16_t* measured_halls, float* scaled_halls )
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
/*gestion des min max des sondes de hall*/
	if (measured_halls[0]<minhall0)minhall0=measured_halls[0];
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <hall_scale+0x11c>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d203      	bcs.n	8000e90 <hall_scale+0x20>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	881a      	ldrh	r2, [r3, #0]
 8000e8c:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <hall_scale+0x11c>)
 8000e8e:	801a      	strh	r2, [r3, #0]
	if (measured_halls[0]>maxhall0)maxhall0=measured_halls[0];
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	881a      	ldrh	r2, [r3, #0]
 8000e94:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <hall_scale+0x120>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d903      	bls.n	8000ea6 <hall_scale+0x36>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	881a      	ldrh	r2, [r3, #0]
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <hall_scale+0x120>)
 8000ea4:	801a      	strh	r2, [r3, #0]
	if (measured_halls[1]<minhall1)minhall1=measured_halls[1];
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	881a      	ldrh	r2, [r3, #0]
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <hall_scale+0x124>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d203      	bcs.n	8000ebe <hall_scale+0x4e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	885a      	ldrh	r2, [r3, #2]
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <hall_scale+0x124>)
 8000ebc:	801a      	strh	r2, [r3, #0]
	if (measured_halls[1]>maxhall1)maxhall1=measured_halls[1];
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	881a      	ldrh	r2, [r3, #0]
 8000ec4:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <hall_scale+0x128>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d903      	bls.n	8000ed6 <hall_scale+0x66>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	885a      	ldrh	r2, [r3, #2]
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <hall_scale+0x128>)
 8000ed4:	801a      	strh	r2, [r3, #0]
	if (measured_halls[2]<minhall2)minhall2=measured_halls[2];
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	881a      	ldrh	r2, [r3, #0]
 8000edc:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <hall_scale+0x12c>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d203      	bcs.n	8000eee <hall_scale+0x7e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	889a      	ldrh	r2, [r3, #4]
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <hall_scale+0x12c>)
 8000eec:	801a      	strh	r2, [r3, #0]
	if (measured_halls[2]>maxhall2)maxhall2=measured_halls[2];
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <hall_scale+0x130>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d903      	bls.n	8000f06 <hall_scale+0x96>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	889a      	ldrh	r2, [r3, #4]
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <hall_scale+0x130>)
 8000f04:	801a      	strh	r2, [r3, #0]
	/*fin de la gestion des min max des sondes de hall*/
	scaled_halls[0] = (measured_halls[0]-offset0)*fact0;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <hall_scale+0x134>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <hall_scale+0x138>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	edc3 7a00 	vstr	s15, [r3]
	scaled_halls[1] = (measured_halls[1]-offset1)*fact1;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <hall_scale+0x13c>)
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <hall_scale+0x140>)
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f52:	edc3 7a00 	vstr	s15, [r3]
	scaled_halls[2] = (measured_halls[2]-offset2)*fact2;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <hall_scale+0x144>)
 8000f66:	edd3 7a00 	vldr	s15, [r3]
 8000f6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <hall_scale+0x148>)
 8000f70:	edd3 7a00 	vldr	s15, [r3]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	3308      	adds	r3, #8
 8000f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7c:	edc3 7a00 	vstr	s15, [r3]
	return;
 8000f80:	bf00      	nop
}
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000060 	.word	0x20000060
 8000f94:	20000002 	.word	0x20000002
 8000f98:	20000062 	.word	0x20000062
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	20000064 	.word	0x20000064
 8000fa4:	2000000c 	.word	0x2000000c
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000014 	.word	0x20000014
 8000fb0:	20000010 	.word	0x20000010
 8000fb4:	2000001c 	.word	0x2000001c
 8000fb8:	20000018 	.word	0x20000018

08000fbc <calc_hallminmax>:

//recalcul des min-max et des offsets
//comme il y a une division => à appeler dans la boucle infinie de la fonction main
void calc_hallminmax(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint16_t offsettmp;
	/*gestion des min max des sondes de hall*/
	offsettmp=(maxhall0+minhall0)>>1;
 8000fc2:	4b7a      	ldr	r3, [pc, #488]	; (80011ac <calc_hallminmax+0x1f0>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b79      	ldr	r3, [pc, #484]	; (80011b0 <calc_hallminmax+0x1f4>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	105b      	asrs	r3, r3, #1
 8000fd4:	80fb      	strh	r3, [r7, #6]
	if((offsettmp>1500)&&(offsettmp<2500))offset0=(float)offsettmp;
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d90c      	bls.n	8000ffa <calc_hallminmax+0x3e>
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d807      	bhi.n	8000ffa <calc_hallminmax+0x3e>
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff4:	4b6f      	ldr	r3, [pc, #444]	; (80011b4 <calc_hallminmax+0x1f8>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
	if (((maxhall0-minhall0)<2300)&&((maxhall0-minhall0)>1500))fact0=2.0/(maxhall0-minhall0);
 8000ffa:	4b6c      	ldr	r3, [pc, #432]	; (80011ac <calc_hallminmax+0x1f0>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <calc_hallminmax+0x1f4>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	f640 02fb 	movw	r2, #2299	; 0x8fb
 800100e:	4293      	cmp	r3, r2
 8001010:	dc27      	bgt.n	8001062 <calc_hallminmax+0xa6>
 8001012:	4b66      	ldr	r3, [pc, #408]	; (80011ac <calc_hallminmax+0x1f0>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	4b65      	ldr	r3, [pc, #404]	; (80011b0 <calc_hallminmax+0x1f4>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001026:	4293      	cmp	r3, r2
 8001028:	dd1b      	ble.n	8001062 <calc_hallminmax+0xa6>
 800102a:	4b60      	ldr	r3, [pc, #384]	; (80011ac <calc_hallminmax+0x1f0>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	b29b      	uxth	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	4b5f      	ldr	r3, [pc, #380]	; (80011b0 <calc_hallminmax+0x1f4>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa1e 	bl	800047c <__aeabi_i2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	f04f 0000 	mov.w	r0, #0
 8001048:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800104c:	f7ff fbaa 	bl	80007a4 <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd3c 	bl	8000ad4 <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	4a56      	ldr	r2, [pc, #344]	; (80011b8 <calc_hallminmax+0x1fc>)
 8001060:	6013      	str	r3, [r2, #0]

	offsettmp=(maxhall1+minhall1)>>1;
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <calc_hallminmax+0x200>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	4b55      	ldr	r3, [pc, #340]	; (80011c0 <calc_hallminmax+0x204>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	105b      	asrs	r3, r3, #1
 8001074:	80fb      	strh	r3, [r7, #6]
	if((offsettmp>1500)&&(offsettmp<2500))offset1=(float)offsettmp;
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800107c:	4293      	cmp	r3, r2
 800107e:	d90c      	bls.n	800109a <calc_hallminmax+0xde>
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001086:	4293      	cmp	r3, r2
 8001088:	d807      	bhi.n	800109a <calc_hallminmax+0xde>
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001094:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <calc_hallminmax+0x208>)
 8001096:	edc3 7a00 	vstr	s15, [r3]
	if (((maxhall1-minhall1)<2300)&&((maxhall1-minhall1)>1500))fact1=2.0/(maxhall1-minhall1);
 800109a:	4b48      	ldr	r3, [pc, #288]	; (80011bc <calc_hallminmax+0x200>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <calc_hallminmax+0x204>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80010ae:	4293      	cmp	r3, r2
 80010b0:	dc27      	bgt.n	8001102 <calc_hallminmax+0x146>
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <calc_hallminmax+0x200>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <calc_hallminmax+0x204>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010c6:	4293      	cmp	r3, r2
 80010c8:	dd1b      	ble.n	8001102 <calc_hallminmax+0x146>
 80010ca:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <calc_hallminmax+0x200>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <calc_hallminmax+0x204>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9ce 	bl	800047c <__aeabi_i2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	f04f 0000 	mov.w	r0, #0
 80010e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010ec:	f7ff fb5a 	bl	80007a4 <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fcec 	bl	8000ad4 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <calc_hallminmax+0x20c>)
 8001100:	6013      	str	r3, [r2, #0]

	offsettmp=(maxhall2+minhall2)>>1;
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <calc_hallminmax+0x210>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <calc_hallminmax+0x214>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	4413      	add	r3, r2
 8001112:	105b      	asrs	r3, r3, #1
 8001114:	80fb      	strh	r3, [r7, #6]
	if((offsettmp>1500)&&(offsettmp<2500))offset2=(float)offsettmp;
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800111c:	4293      	cmp	r3, r2
 800111e:	d90c      	bls.n	800113a <calc_hallminmax+0x17e>
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001126:	4293      	cmp	r3, r2
 8001128:	d807      	bhi.n	800113a <calc_hallminmax+0x17e>
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <calc_hallminmax+0x218>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
	if (((maxhall2-minhall2)<2300)&&((maxhall2-minhall2)>1500))fact2=2.0/(maxhall2-minhall2);
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <calc_hallminmax+0x210>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <calc_hallminmax+0x214>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f640 02fb 	movw	r2, #2299	; 0x8fb
 800114e:	4293      	cmp	r3, r2
 8001150:	dc27      	bgt.n	80011a2 <calc_hallminmax+0x1e6>
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <calc_hallminmax+0x210>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <calc_hallminmax+0x214>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001166:	4293      	cmp	r3, r2
 8001168:	dd1b      	ble.n	80011a2 <calc_hallminmax+0x1e6>
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <calc_hallminmax+0x210>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <calc_hallminmax+0x214>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f97e 	bl	800047c <__aeabi_i2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800118c:	f7ff fb0a 	bl	80007a4 <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fc9c 	bl	8000ad4 <__aeabi_d2f>
 800119c:	4603      	mov	r3, r0
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <calc_hallminmax+0x21c>)
 80011a0:	6013      	str	r3, [r2, #0]
	/*fin de la gestion des min max des sondes de hall*/
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000060 	.word	0x20000060
 80011b0:	20000000 	.word	0x20000000
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000062 	.word	0x20000062
 80011c0:	20000002 	.word	0x20000002
 80011c4:	20000014 	.word	0x20000014
 80011c8:	20000010 	.word	0x20000010
 80011cc:	20000064 	.word	0x20000064
 80011d0:	20000004 	.word	0x20000004
 80011d4:	2000001c 	.word	0x2000001c
 80011d8:	20000018 	.word	0x20000018

080011dc <calc_betas>:

//calcul des sinus liés au déphasage (à appeler dans le main)
void calc_betas(float beta)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
	sin_beta = sin(beta);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f95a 	bl	80004a0 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	ec43 2b10 	vmov	d0, r2, r3
 80011f4:	f004 fb28 	bl	8005848 <sin>
 80011f8:	ec53 2b10 	vmov	r2, r3, d0
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fc68 	bl	8000ad4 <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	4a3e      	ldr	r2, [pc, #248]	; (8001300 <calc_betas+0x124>)
 8001208:	6013      	str	r3, [r2, #0]
	sin_beta120 = sin(beta-DPI_S3);
 800120a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001304 <calc_betas+0x128>
 800120e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001216:	ee17 0a90 	vmov	r0, s15
 800121a:	f7ff f941 	bl	80004a0 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	ec43 2b10 	vmov	d0, r2, r3
 8001226:	f004 fb0f 	bl	8005848 <sin>
 800122a:	ec53 2b10 	vmov	r2, r3, d0
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fc4f 	bl	8000ad4 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	4a33      	ldr	r2, [pc, #204]	; (8001308 <calc_betas+0x12c>)
 800123a:	6013      	str	r3, [r2, #0]
	sin_beta240 = sin(beta-QPI_S3);
 800123c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800130c <calc_betas+0x130>
 8001240:	edd7 7a01 	vldr	s15, [r7, #4]
 8001244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001248:	ee17 0a90 	vmov	r0, s15
 800124c:	f7ff f928 	bl	80004a0 <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	ec43 2b10 	vmov	d0, r2, r3
 8001258:	f004 faf6 	bl	8005848 <sin>
 800125c:	ec53 2b10 	vmov	r2, r3, d0
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fc36 	bl	8000ad4 <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	4a29      	ldr	r2, [pc, #164]	; (8001310 <calc_betas+0x134>)
 800126c:	6013      	str	r3, [r2, #0]
	cos_beta = cos(beta);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff f916 	bl	80004a0 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	ec43 2b10 	vmov	d0, r2, r3
 800127c:	f004 fa90 	bl	80057a0 <cos>
 8001280:	ec53 2b10 	vmov	r2, r3, d0
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc24 	bl	8000ad4 <__aeabi_d2f>
 800128c:	4603      	mov	r3, r0
 800128e:	4a21      	ldr	r2, [pc, #132]	; (8001314 <calc_betas+0x138>)
 8001290:	6013      	str	r3, [r2, #0]
	cos_beta120 = cos(beta-DPI_S3);
 8001292:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001304 <calc_betas+0x128>
 8001296:	edd7 7a01 	vldr	s15, [r7, #4]
 800129a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800129e:	ee17 0a90 	vmov	r0, s15
 80012a2:	f7ff f8fd 	bl	80004a0 <__aeabi_f2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	ec43 2b10 	vmov	d0, r2, r3
 80012ae:	f004 fa77 	bl	80057a0 <cos>
 80012b2:	ec53 2b10 	vmov	r2, r3, d0
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff fc0b 	bl	8000ad4 <__aeabi_d2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a15      	ldr	r2, [pc, #84]	; (8001318 <calc_betas+0x13c>)
 80012c2:	6013      	str	r3, [r2, #0]
	cos_beta240 = cos(beta-QPI_S3);
 80012c4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800130c <calc_betas+0x130>
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d0:	ee17 0a90 	vmov	r0, s15
 80012d4:	f7ff f8e4 	bl	80004a0 <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ec43 2b10 	vmov	d0, r2, r3
 80012e0:	f004 fa5e 	bl	80057a0 <cos>
 80012e4:	ec53 2b10 	vmov	r2, r3, d0
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fbf2 	bl	8000ad4 <__aeabi_d2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <calc_betas+0x140>)
 80012f4:	6013      	str	r3, [r2, #0]
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000048 	.word	0x20000048
 8001304:	40060a92 	.word	0x40060a92
 8001308:	20000050 	.word	0x20000050
 800130c:	40860a92 	.word	0x40860a92
 8001310:	20000058 	.word	0x20000058
 8001314:	2000004c 	.word	0x2000004c
 8001318:	20000054 	.word	0x20000054
 800131c:	2000005c 	.word	0x2000005c

08001320 <calc_sinusM>:

//fonction qui traduit les sondes de hall (entre -1 et 1) en des signaux sinus M (entre 0 et 2)
void calc_sinusM(float* halls, float* sinusM)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	//on traduit les signaux entre 0 et 1 en des signaux entre -1 et 1 pour faire les calculs trigo
	float cos_alpha = halls[0];
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	61bb      	str	r3, [r7, #24]
	float sin_alpha = (halls[1]-halls[2])*0.577350269f;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3304      	adds	r3, #4
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3308      	adds	r3, #8
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001344:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001434 <calc_sinusM+0x114>
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	edc7 7a05 	vstr	s15, [r7, #20]
	float s0 = sin_alpha*cos_beta+cos_alpha*sin_beta;
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <calc_sinusM+0x118>)
 8001352:	ed93 7a00 	vldr	s14, [r3]
 8001356:	edd7 7a05 	vldr	s15, [r7, #20]
 800135a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <calc_sinusM+0x11c>)
 8001360:	edd3 6a00 	vldr	s13, [r3]
 8001364:	edd7 7a06 	vldr	s15, [r7, #24]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a04 	vstr	s15, [r7, #16]
	float s1 = sin_alpha*cos_beta120+cos_alpha*sin_beta120;
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <calc_sinusM+0x120>)
 8001376:	ed93 7a00 	vldr	s14, [r3]
 800137a:	edd7 7a05 	vldr	s15, [r7, #20]
 800137e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <calc_sinusM+0x124>)
 8001384:	edd3 6a00 	vldr	s13, [r3]
 8001388:	edd7 7a06 	vldr	s15, [r7, #24]
 800138c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	edc7 7a03 	vstr	s15, [r7, #12]
	float s2 = sin_alpha*cos_beta240+cos_alpha*sin_beta240;
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <calc_sinusM+0x128>)
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	edd7 7a05 	vldr	s15, [r7, #20]
 80013a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <calc_sinusM+0x12c>)
 80013a8:	edd3 6a00 	vldr	s13, [r3]
 80013ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a02 	vstr	s15, [r7, #8]
	float smallest = s0;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	61fb      	str	r3, [r7, #28]
	if (s1<smallest ) smallest = s1;
 80013c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	d501      	bpl.n	80013d6 <calc_sinusM+0xb6>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	61fb      	str	r3, [r7, #28]
	if (s2<smallest ) smallest = s2;
 80013d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80013da:	edd7 7a07 	vldr	s15, [r7, #28]
 80013de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	d501      	bpl.n	80013ec <calc_sinusM+0xcc>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	61fb      	str	r3, [r7, #28]
	sinusM[0] = s0-smallest;
 80013ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80013f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	edc3 7a00 	vstr	s15, [r3]
	sinusM[1] = s1-smallest;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3304      	adds	r3, #4
 8001402:	ed97 7a03 	vldr	s14, [r7, #12]
 8001406:	edd7 7a07 	vldr	s15, [r7, #28]
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	edc3 7a00 	vstr	s15, [r3]
	sinusM[2] = s2-smallest;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	3308      	adds	r3, #8
 8001416:	ed97 7a02 	vldr	s14, [r7, #8]
 800141a:	edd7 7a07 	vldr	s15, [r7, #28]
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	edc3 7a00 	vstr	s15, [r3]
}
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	3f13cd3a 	.word	0x3f13cd3a
 8001438:	2000004c 	.word	0x2000004c
 800143c:	20000048 	.word	0x20000048
 8001440:	20000054 	.word	0x20000054
 8001444:	20000050 	.word	0x20000050
 8001448:	2000005c 	.word	0x2000005c
 800144c:	20000058 	.word	0x20000058

08001450 <calc_params_sinusM>:

//regroupe les deux fonction à appeler dans le main
//le paramètre decalage est l'angle de déphasage entre sondes de hall et signal sinus en radian
void calc_params_sinusM(float decalage)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	ed87 0a01 	vstr	s0, [r7, #4]
calc_betas(decalage);
 800145a:	ed97 0a01 	vldr	s0, [r7, #4]
 800145e:	f7ff febd 	bl	80011dc <calc_betas>
calc_hallminmax();
 8001462:	f7ff fdab 	bl	8000fbc <calc_hallminmax>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001474:	f000 fed4 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 f858 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147c:	f000 fb42 	bl	8001b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001480:	f000 fb20 	bl	8001ac4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001484:	f000 faf4 	bl	8001a70 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001488:	f000 f8bc 	bl	8001604 <MX_ADC1_Init>
  MX_TIM1_Init();
 800148c:	f000 f938 	bl	8001700 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001490:	f000 f9ee 	bl	8001870 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001494:	f000 fa62 	bl	800195c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Set timers
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001498:	2100      	movs	r1, #0
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <main+0x9c>)
 800149c:	f002 ff9e 	bl	80043dc <HAL_TIM_PWM_Start>

  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 80014a0:	210c      	movs	r1, #12
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <main+0xa0>)
 80014a4:	f002 fe90 	bl	80041c8 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014a8:	2100      	movs	r1, #0
 80014aa:	481a      	ldr	r0, [pc, #104]	; (8001514 <main+0xa4>)
 80014ac:	f002 ff96 	bl	80043dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014b0:	2104      	movs	r1, #4
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <main+0xa4>)
 80014b4:	f002 ff92 	bl	80043dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014b8:	2108      	movs	r1, #8
 80014ba:	4816      	ldr	r0, [pc, #88]	; (8001514 <main+0xa4>)
 80014bc:	f002 ff8e 	bl	80043dc <HAL_TIM_PWM_Start>

  // start ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) resultats, 4);
 80014c0:	2204      	movs	r2, #4
 80014c2:	4915      	ldr	r1, [pc, #84]	; (8001518 <main+0xa8>)
 80014c4:	4815      	ldr	r0, [pc, #84]	; (800151c <main+0xac>)
 80014c6:	f000 ff61 	bl	800238c <HAL_ADC_Start_DMA>

  // Set Enables at level high
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <main+0xb0>)
 80014d2:	f002 f905 	bl	80036e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <main+0xb0>)
 80014de:	f002 f8ff 	bl	80036e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <main+0xb0>)
 80014ea:	f002 f8f9 	bl	80036e0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, 1);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <main+0xb4>)
 80014f6:	f002 f8f3 	bl	80036e0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// this is the infinite loop
	  calc_params_sinusM(dephasage);
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <main+0xb8>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	f7ff ffa4 	bl	8001450 <calc_params_sinusM>
 8001508:	e7f7      	b.n	80014fa <main+0x8a>
 800150a:	bf00      	nop
 800150c:	20000158 	.word	0x20000158
 8001510:	200001a0 	.word	0x200001a0
 8001514:	20000110 	.word	0x20000110
 8001518:	2000022c 	.word	0x2000022c
 800151c:	20000068 	.word	0x20000068
 8001520:	40020800 	.word	0x40020800
 8001524:	40020000 	.word	0x40020000
 8001528:	2000023c 	.word	0x2000023c

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	; 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f004 f904 	bl	8005748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <SystemClock_Config+0xd0>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a28      	ldr	r2, [pc, #160]	; (80015fc <SystemClock_Config+0xd0>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <SystemClock_Config+0xd0>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <SystemClock_Config+0xd4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <SystemClock_Config+0xd4>)
 800157a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <SystemClock_Config+0xd4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001594:	2310      	movs	r3, #16
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	2302      	movs	r3, #2
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015a0:	2310      	movs	r3, #16
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015aa:	2304      	movs	r3, #4
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ae:	2307      	movs	r3, #7
 80015b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 f8c6 	bl	8003748 <HAL_RCC_OscConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015c2:	f000 fbc1 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c6:	230f      	movs	r3, #15
 80015c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ca:	2302      	movs	r3, #2
 80015cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2102      	movs	r1, #2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fb28 	bl	8003c38 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015ee:	f000 fbab 	bl	8001d48 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3750      	adds	r7, #80	; 0x50
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001616:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001618:	4a38      	ldr	r2, [pc, #224]	; (80016fc <MX_ADC1_Init+0xf8>)
 800161a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800161c:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <MX_ADC1_Init+0xf4>)
 800161e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001622:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <MX_ADC1_Init+0xf4>)
 800162c:	2201      	movs	r2, #1
 800162e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001630:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001632:	2200      	movs	r2, #0
 8001634:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001640:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001648:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001656:	2204      	movs	r2, #4
 8001658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_ADC1_Init+0xf4>)
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_ADC1_Init+0xf4>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001668:	4823      	ldr	r0, [pc, #140]	; (80016f8 <MX_ADC1_Init+0xf4>)
 800166a:	f000 fe4b 	bl	8002304 <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001674:	f000 fb68 	bl	8001d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001678:	2309      	movs	r3, #9
 800167a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800167c:	2301      	movs	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001680:	2301      	movs	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	481b      	ldr	r0, [pc, #108]	; (80016f8 <MX_ADC1_Init+0xf4>)
 800168a:	f000 ff83 	bl	8002594 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001694:	f000 fb58 	bl	8001d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001698:	2304      	movs	r3, #4
 800169a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800169c:	2302      	movs	r3, #2
 800169e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80016a0:	2304      	movs	r3, #4
 80016a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MX_ADC1_Init+0xf4>)
 80016aa:	f000 ff73 	bl	8002594 <HAL_ADC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80016b4:	f000 fb48 	bl	8001d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016b8:	230e      	movs	r3, #14
 80016ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016bc:	2303      	movs	r3, #3
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_ADC1_Init+0xf4>)
 80016c6:	f000 ff65 	bl	8002594 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80016d0:	f000 fb3a 	bl	8001d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016d4:	230f      	movs	r3, #15
 80016d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_ADC1_Init+0xf4>)
 80016e2:	f000 ff57 	bl	8002594 <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80016ec:	f000 fb2c 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000068 	.word	0x20000068
 80016fc:	40012000 	.word	0x40012000

08001700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b096      	sub	sp, #88	; 0x58
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f004 f805 	bl	8005748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <MX_TIM1_Init+0x168>)
 8001740:	4a4a      	ldr	r2, [pc, #296]	; (800186c <MX_TIM1_Init+0x16c>)
 8001742:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <MX_TIM1_Init+0x168>)
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <MX_TIM1_Init+0x168>)
 800174c:	2220      	movs	r2, #32
 800174e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PERIPWM;
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <MX_TIM1_Init+0x168>)
 8001752:	f240 421a 	movw	r2, #1050	; 0x41a
 8001756:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <MX_TIM1_Init+0x168>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800175e:	4b42      	ldr	r3, [pc, #264]	; (8001868 <MX_TIM1_Init+0x168>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <MX_TIM1_Init+0x168>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800176a:	483f      	ldr	r0, [pc, #252]	; (8001868 <MX_TIM1_Init+0x168>)
 800176c:	f002 fc84 	bl	8004078 <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001776:	f000 fae7 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001780:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001784:	4619      	mov	r1, r3
 8001786:	4838      	ldr	r0, [pc, #224]	; (8001868 <MX_TIM1_Init+0x168>)
 8001788:	f002 fff6 	bl	8004778 <HAL_TIM_ConfigClockSource>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001792:	f000 fad9 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001796:	4834      	ldr	r0, [pc, #208]	; (8001868 <MX_TIM1_Init+0x168>)
 8001798:	f002 fdc6 	bl	8004328 <HAL_TIM_PWM_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017a2:	f000 fad1 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80017a6:	2310      	movs	r3, #16
 80017a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b2:	4619      	mov	r1, r3
 80017b4:	482c      	ldr	r0, [pc, #176]	; (8001868 <MX_TIM1_Init+0x168>)
 80017b6:	f003 fc45 	bl	8005044 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017c0:	f000 fac2 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c4:	2360      	movs	r3, #96	; 0x60
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	2200      	movs	r2, #0
 80017e6:	4619      	mov	r1, r3
 80017e8:	481f      	ldr	r0, [pc, #124]	; (8001868 <MX_TIM1_Init+0x168>)
 80017ea:	f002 ff03 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017f4:	f000 faa8 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	2204      	movs	r2, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4819      	ldr	r0, [pc, #100]	; (8001868 <MX_TIM1_Init+0x168>)
 8001802:	f002 fef7 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800180c:	f000 fa9c 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	2208      	movs	r2, #8
 8001816:	4619      	mov	r1, r3
 8001818:	4813      	ldr	r0, [pc, #76]	; (8001868 <MX_TIM1_Init+0x168>)
 800181a:	f002 feeb 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001824:	f000 fa90 	bl	8001d48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800183c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001840:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_TIM1_Init+0x168>)
 800184c:	f003 fc68 	bl	8005120 <HAL_TIMEx_ConfigBreakDeadTime>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001856:	f000 fa77 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800185a:	4803      	ldr	r0, [pc, #12]	; (8001868 <MX_TIM1_Init+0x168>)
 800185c:	f000 fbc6 	bl	8001fec <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3758      	adds	r7, #88	; 0x58
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000110 	.word	0x20000110
 800186c:	40010000 	.word	0x40010000

08001870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	f107 0320 	add.w	r3, r7, #32
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018a2:	4a2d      	ldr	r2, [pc, #180]	; (8001958 <MX_TIM3_Init+0xe8>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018ae:	2220      	movs	r2, #32
 80018b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PERIPWM;
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018b4:	f240 421a 	movw	r2, #1050	; 0x41a
 80018b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018c6:	4823      	ldr	r0, [pc, #140]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018c8:	f002 fbd6 	bl	8004078 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018d2:	f000 fa39 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e0:	4619      	mov	r1, r3
 80018e2:	481c      	ldr	r0, [pc, #112]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018e4:	f002 ff48 	bl	8004778 <HAL_TIM_ConfigClockSource>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018ee:	f000 fa2b 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018f2:	4818      	ldr	r0, [pc, #96]	; (8001954 <MX_TIM3_Init+0xe4>)
 80018f4:	f002 fd18 	bl	8004328 <HAL_TIM_PWM_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018fe:	f000 fa23 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001902:	2320      	movs	r3, #32
 8001904:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	4619      	mov	r1, r3
 8001910:	4810      	ldr	r0, [pc, #64]	; (8001954 <MX_TIM3_Init+0xe4>)
 8001912:	f003 fb97 	bl	8005044 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800191c:	f000 fa14 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001920:	2360      	movs	r3, #96	; 0x60
 8001922:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <MX_TIM3_Init+0xe4>)
 8001938:	f002 fe5c 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001942:	f000 fa01 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <MX_TIM3_Init+0xe4>)
 8001948:	f000 fb50 	bl	8001fec <HAL_TIM_MspPostInit>

}
 800194c:	bf00      	nop
 800194e:	3738      	adds	r7, #56	; 0x38
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000158 	.word	0x20000158
 8001958:	40000400 	.word	0x40000400

0800195c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b092      	sub	sp, #72	; 0x48
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	615a      	str	r2, [r3, #20]
 800199a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800199c:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <MX_TIM4_Init+0x10c>)
 800199e:	4a33      	ldr	r2, [pc, #204]	; (8001a6c <MX_TIM4_Init+0x110>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <MX_TIM4_Init+0x10c>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <MX_TIM4_Init+0x10c>)
 80019aa:	2220      	movs	r2, #32
 80019ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PERIPWM;
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <MX_TIM4_Init+0x10c>)
 80019b0:	f240 421a 	movw	r2, #1050	; 0x41a
 80019b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <MX_TIM4_Init+0x10c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <MX_TIM4_Init+0x10c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019c2:	4829      	ldr	r0, [pc, #164]	; (8001a68 <MX_TIM4_Init+0x10c>)
 80019c4:	f002 fb58 	bl	8004078 <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80019ce:	f000 f9bb 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019dc:	4619      	mov	r1, r3
 80019de:	4822      	ldr	r0, [pc, #136]	; (8001a68 <MX_TIM4_Init+0x10c>)
 80019e0:	f002 feca 	bl	8004778 <HAL_TIM_ConfigClockSource>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80019ea:	f000 f9ad 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80019ee:	481e      	ldr	r0, [pc, #120]	; (8001a68 <MX_TIM4_Init+0x10c>)
 80019f0:	f002 fb91 	bl	8004116 <HAL_TIM_OC_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80019fa:	f000 f9a5 	bl	8001d48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80019fe:	2305      	movs	r3, #5
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4816      	ldr	r0, [pc, #88]	; (8001a68 <MX_TIM4_Init+0x10c>)
 8001a0e:	f002 ff7a 	bl	8004906 <HAL_TIM_SlaveConfigSynchro>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001a18:	f000 f996 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <MX_TIM4_Init+0x10c>)
 8001a2c:	f003 fb0a 	bl	8005044 <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001a36:	f000 f987 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001a3a:	2330      	movs	r3, #48	; 0x30
 8001a3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	220c      	movs	r2, #12
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_TIM4_Init+0x10c>)
 8001a52:	f002 fd73 	bl	800453c <HAL_TIM_OC_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001a5c:	f000 f974 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	3748      	adds	r7, #72	; 0x48
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200001a0 	.word	0x200001a0
 8001a6c:	40000800 	.word	0x40000800

08001a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <MX_USART2_UART_Init+0x50>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001aa8:	f003 fb8c 	bl	80051c4 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ab2:	f000 f949 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200001e8 	.word	0x200001e8
 8001ac0:	40004400 	.word	0x40004400

08001ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_DMA_Init+0x3c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <MX_DMA_Init+0x3c>)
 8001ad4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_DMA_Init+0x3c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2038      	movs	r0, #56	; 0x38
 8001aec:	f001 f8cd 	bl	8002c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001af0:	2038      	movs	r0, #56	; 0x38
 8001af2:	f001 f8e6 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a45      	ldr	r2, [pc, #276]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a3e      	ldr	r2, [pc, #248]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a37      	ldr	r2, [pc, #220]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Enable_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001b90:	482a      	ldr	r0, [pc, #168]	; (8001c3c <MX_GPIO_Init+0x138>)
 8001b92:	f001 fda5 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001b9c:	4828      	ldr	r0, [pc, #160]	; (8001c40 <MX_GPIO_Init+0x13c>)
 8001b9e:	f001 fd9f 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ba8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4821      	ldr	r0, [pc, #132]	; (8001c40 <MX_GPIO_Init+0x13c>)
 8001bba:	f001 fc0d 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Enable_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Enable_Pin;
 8001bbe:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4819      	ldr	r0, [pc, #100]	; (8001c3c <MX_GPIO_Init+0x138>)
 8001bd8:	f001 fbfe 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8001bdc:	f248 0340 	movw	r3, #32832	; 0x8040
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4812      	ldr	r0, [pc, #72]	; (8001c3c <MX_GPIO_Init+0x138>)
 8001bf2:	f001 fbf1 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001bf6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001c0c:	f001 fbe4 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8001c10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_GPIO_Init+0x13c>)
 8001c2a:	f001 fbd5 	bl	80033d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020800 	.word	0x40020800
 8001c44:	40020400 	.word	0x40020400

08001c48 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	static uint16_t counter = 0;
	counter++;
 8001c50:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c5a:	801a      	strh	r2, [r3, #0]
	if (counter == 20000){
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d106      	bne.n	8001c76 <HAL_ADC_ConvCpltCallback+0x2e>
		counter = 0;
 8001c68:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c6e:	2120      	movs	r1, #32
 8001c70:	482b      	ldr	r0, [pc, #172]	; (8001d20 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001c72:	f001 fd4e 	bl	8003712 <HAL_GPIO_TogglePin>
	}

	halls[0] = resultats[1];
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001c78:	885a      	ldrh	r2, [r3, #2]
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001c7c:	801a      	strh	r2, [r3, #0]
	halls[1] = resultats[2];
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001c80:	889a      	ldrh	r2, [r3, #4]
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001c84:	805a      	strh	r2, [r3, #2]
	halls[2] = resultats[3];
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001c88:	88da      	ldrh	r2, [r3, #6]
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001c8c:	809a      	strh	r2, [r3, #4]

	// Run with dephasage control.

	dephasage = (float) resultats[0] * 0.0015339f; // 2.0 * pi / 4096
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001d2c <HAL_ADC_ConvCpltCallback+0xe4>
 8001c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca2:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001ca4:	edc3 7a00 	vstr	s15, [r3]

	hall_scale(halls,  scale_halls);
 8001ca8:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_ADC_ConvCpltCallback+0xec>)
 8001caa:	481f      	ldr	r0, [pc, #124]	; (8001d28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001cac:	f7ff f8e0 	bl	8000e70 <hall_scale>
	calc_sinusM(scale_halls, sinusM);
 8001cb0:	4921      	ldr	r1, [pc, #132]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001cb2:	4820      	ldr	r0, [pc, #128]	; (8001d34 <HAL_ADC_ConvCpltCallback+0xec>)
 8001cb4:	f7ff fb34 	bl	8001320 <calc_sinusM>

	TIM1->CCR1 = (uint16_t)(sinusM[0]*(float)(PERIPWM >> 1));
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001d3c <HAL_ADC_ConvCpltCallback+0xf4>
 8001cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cca:	ee17 3a90 	vmov	r3, s15
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint16_t)(sinusM[1]*(float)(PERIPWM >> 1));
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001cd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cda:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001d3c <HAL_ADC_ConvCpltCallback+0xf4>
 8001cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce6:	ee17 3a90 	vmov	r3, s15
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint16_t)(sinusM[2]*(float)(PERIPWM >> 1));
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001cf2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cf6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001d3c <HAL_ADC_ConvCpltCallback+0xf4>
 8001cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d02:	ee17 3a90 	vmov	r3, s15
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001d0a:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM3->CCR1 = PERIPWM;
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001d0e:	f240 421a 	movw	r2, #1050	; 0x41a
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR3 = (uint16_t)(sinusM[2]*(float)(resultats[0])) * PERIPWM >> 14;

	TIM3->CCR1 = PERIPWM;
*/

}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000258 	.word	0x20000258
 8001d20:	40020000 	.word	0x40020000
 8001d24:	2000022c 	.word	0x2000022c
 8001d28:	20000234 	.word	0x20000234
 8001d2c:	3ac90d25 	.word	0x3ac90d25
 8001d30:	2000023c 	.word	0x2000023c
 8001d34:	20000240 	.word	0x20000240
 8001d38:	2000024c 	.word	0x2000024c
 8001d3c:	44034000 	.word	0x44034000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40000400 	.word	0x40000400

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <Error_Handler+0x8>
	...

08001d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_MspInit+0x4c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <HAL_MspInit+0x4c>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_MspInit+0x4c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_MspInit+0x4c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_MspInit+0x4c>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_MspInit+0x4c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d92:	2007      	movs	r0, #7
 8001d94:	f000 ff6e 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800

08001da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a49      	ldr	r2, [pc, #292]	; (8001ee8 <HAL_ADC_MspInit+0x144>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	f040 808c 	bne.w	8001ee0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd8:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	4b40      	ldr	r3, [pc, #256]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	4a3f      	ldr	r2, [pc, #252]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6313      	str	r3, [r2, #48]	; 0x30
 8001df4:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	4b39      	ldr	r3, [pc, #228]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a38      	ldr	r2, [pc, #224]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e10:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a31      	ldr	r2, [pc, #196]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_ADC_MspInit+0x148>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e38:	233f      	movs	r3, #63	; 0x3f
 8001e3a:	61fb      	str	r3, [r7, #28]
                          |Hall2A_Pin|Hall3A_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4829      	ldr	r0, [pc, #164]	; (8001ef0 <HAL_ADC_MspInit+0x14c>)
 8001e4c:	f001 fac4 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|Hall1A_Pin|GPIO_PIN_7;
 8001e50:	2393      	movs	r3, #147	; 0x93
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e54:	2303      	movs	r3, #3
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4824      	ldr	r0, [pc, #144]	; (8001ef4 <HAL_ADC_MspInit+0x150>)
 8001e64:	f001 fab8 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481f      	ldr	r0, [pc, #124]	; (8001ef8 <HAL_ADC_MspInit+0x154>)
 8001e7c:	f001 faac 	bl	80033d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_ADC_MspInit+0x15c>)
 8001e84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001ec6:	f000 ff17 	bl	8002cf8 <HAL_DMA_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001ed0:	f7ff ff3a 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8001eda:	4a08      	ldr	r2, [pc, #32]	; (8001efc <HAL_ADC_MspInit+0x158>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40012000 	.word	0x40012000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	200000b0 	.word	0x200000b0
 8001f00:	40026410 	.word	0x40026410

08001f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d12d      	bne.n	8001f82 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4819      	ldr	r0, [pc, #100]	; (8001fe0 <HAL_TIM_Base_MspInit+0xdc>)
 8001f7c:	f001 fa2c 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f80:	e026      	b.n	8001fd0 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d10e      	bne.n	8001faa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f96:	f043 0302 	orr.w	r3, r3, #2
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
}
 8001fa8:	e012      	b.n	8001fd0 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM4)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_TIM_Base_MspInit+0xe4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_TIM_Base_MspInit+0xd8>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3730      	adds	r7, #48	; 0x30
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800

08001fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a24      	ldr	r2, [pc, #144]	; (800209c <HAL_TIM_MspPostInit+0xb0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d11f      	bne.n	800204e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800202a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800203c:	2301      	movs	r3, #1
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4817      	ldr	r0, [pc, #92]	; (80020a4 <HAL_TIM_MspPostInit+0xb8>)
 8002048:	f001 f9c6 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800204c:	e022      	b.n	8002094 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_TIM_MspPostInit+0xbc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d11d      	bne.n	8002094 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	6313      	str	r3, [r2, #48]	; 0x30
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002074:	2310      	movs	r3, #16
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002084:	2302      	movs	r3, #2
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <HAL_TIM_MspPostInit+0xc0>)
 8002090:	f001 f9a2 	bl	80033d8 <HAL_GPIO_Init>
}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	; 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40010000 	.word	0x40010000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40020400 	.word	0x40020400

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_UART_MspInit+0x84>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d12b      	bne.n	800212a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_UART_MspInit+0x88>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_UART_MspInit+0x88>)
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_UART_MspInit+0x88>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_UART_MspInit+0x88>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_UART_MspInit+0x88>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_UART_MspInit+0x88>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800210a:	230c      	movs	r3, #12
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800211a:	2307      	movs	r3, #7
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <HAL_UART_MspInit+0x8c>)
 8002126:	f001 f957 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40004400 	.word	0x40004400
 8002138:	40023800 	.word	0x40023800
 800213c:	40020000 	.word	0x40020000

08002140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <NMI_Handler+0x4>

08002146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <HardFault_Handler+0x4>

0800214c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <MemManage_Handler+0x4>

08002152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <BusFault_Handler+0x4>

08002158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <UsageFault_Handler+0x4>

0800215e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218c:	f000 f89a 	bl	80022c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}

08002194 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <DMA2_Stream0_IRQHandler+0x10>)
 800219a:	f000 feb3 	bl	8002f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200000b0 	.word	0x200000b0

080021a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <SystemInit+0x20>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <SystemInit+0x20>)
 80021b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021d2:	490e      	ldr	r1, [pc, #56]	; (800220c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e8:	4c0b      	ldr	r4, [pc, #44]	; (8002218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021f6:	f7ff ffd7 	bl	80021a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f003 faad 	bl	8005758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fe:	f7ff f937 	bl	8001470 <main>
  bx  lr    
 8002202:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002204:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800220c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002210:	08006ae8 	.word	0x08006ae8
  ldr r2, =_sbss
 8002214:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002218:	20000260 	.word	0x20000260

0800221c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC_IRQHandler>
	...

08002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <HAL_Init+0x40>)
 800222a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_Init+0x40>)
 8002236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_Init+0x40>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 fd13 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	2000      	movs	r0, #0
 8002250:	f000 f808 	bl	8002264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff fd7e 	bl	8001d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023c00 	.word	0x40023c00

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x54>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fd2b 	bl	8002cde <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00e      	b.n	80022b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d80a      	bhi.n	80022ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002298:	2200      	movs	r2, #0
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f000 fcf3 	bl	8002c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <HAL_InitTick+0x5c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000020 	.word	0x20000020
 80022bc:	20000028 	.word	0x20000028
 80022c0:	20000024 	.word	0x20000024

080022c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x24>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_IncTick+0x24>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000028 	.word	0x20000028
 80022e8:	2000025c 	.word	0x2000025c

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2000025c 	.word	0x2000025c

08002304 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e033      	b.n	8002382 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fd3e 	bl	8001da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	d118      	bne.n	8002374 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800234a:	f023 0302 	bic.w	r3, r3, #2
 800234e:	f043 0202 	orr.w	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa3e 	bl	80027d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
 8002372:	e001      	b.n	8002378 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_Start_DMA+0x1e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e0ce      	b.n	8002548 <HAL_ADC_Start_DMA+0x1bc>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d018      	beq.n	80023f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023d0:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_ADC_Start_DMA+0x1c4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5f      	ldr	r2, [pc, #380]	; (8002554 <HAL_ADC_Start_DMA+0x1c8>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0c9a      	lsrs	r2, r3, #18
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002400:	d107      	bne.n	8002412 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002410:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	f040 8086 	bne.w	800252e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002460:	d106      	bne.n	8002470 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f023 0206 	bic.w	r2, r3, #6
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
 800246e:	e002      	b.n	8002476 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800247e:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_ADC_Start_DMA+0x1cc>)
 8002480:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	4a35      	ldr	r2, [pc, #212]	; (800255c <HAL_ADC_Start_DMA+0x1d0>)
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	4a34      	ldr	r2, [pc, #208]	; (8002560 <HAL_ADC_Start_DMA+0x1d4>)
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_ADC_Start_DMA+0x1d8>)
 8002498:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	334c      	adds	r3, #76	; 0x4c
 80024ce:	4619      	mov	r1, r3
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f000 fcbe 	bl	8002e54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10f      	bne.n	8002504 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d129      	bne.n	8002546 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	e020      	b.n	8002546 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <HAL_ADC_Start_DMA+0x1dc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d11b      	bne.n	8002546 <HAL_ADC_Start_DMA+0x1ba>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d114      	bne.n	8002546 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	e00b      	b.n	8002546 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000020 	.word	0x20000020
 8002554:	431bde83 	.word	0x431bde83
 8002558:	40012300 	.word	0x40012300
 800255c:	080029d1 	.word	0x080029d1
 8002560:	08002a8b 	.word	0x08002a8b
 8002564:	08002aa7 	.word	0x08002aa7
 8002568:	40012000 	.word	0x40012000

0800256c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e105      	b.n	80027bc <HAL_ADC_ConfigChannel+0x228>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d925      	bls.n	800260c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43da      	mvns	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	400a      	ands	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68d9      	ldr	r1, [r3, #12]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4403      	add	r3, r0
 80025fe:	3b1e      	subs	r3, #30
 8002600:	409a      	lsls	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	e022      	b.n	8002652 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6919      	ldr	r1, [r3, #16]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	2207      	movs	r2, #7
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	400a      	ands	r2, r1
 800262e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	4603      	mov	r3, r0
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4403      	add	r3, r0
 8002648:	409a      	lsls	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b06      	cmp	r3, #6
 8002658:	d824      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b05      	subs	r3, #5
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b05      	subs	r3, #5
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
 80026a2:	e04c      	b.n	800273e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d824      	bhi.n	80026f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3b23      	subs	r3, #35	; 0x23
 80026be:	221f      	movs	r2, #31
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b23      	subs	r3, #35	; 0x23
 80026e8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
 80026f4:	e023      	b.n	800273e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b41      	subs	r3, #65	; 0x41
 8002708:	221f      	movs	r2, #31
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b41      	subs	r3, #65	; 0x41
 8002732:	fa00 f203 	lsl.w	r2, r0, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_ADC_ConfigChannel+0x234>)
 8002740:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <HAL_ADC_ConfigChannel+0x238>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d109      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1cc>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b12      	cmp	r3, #18
 8002752:	d105      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_ADC_ConfigChannel+0x238>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d123      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x21e>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b10      	cmp	r3, #16
 8002770:	d003      	beq.n	800277a <HAL_ADC_ConfigChannel+0x1e6>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b11      	cmp	r3, #17
 8002778:	d11b      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b10      	cmp	r3, #16
 800278c:	d111      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_ADC_ConfigChannel+0x240>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	0c9a      	lsrs	r2, r3, #18
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a4:	e002      	b.n	80027ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f9      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40012300 	.word	0x40012300
 80027cc:	40012000 	.word	0x40012000
 80027d0:	20000020 	.word	0x20000020
 80027d4:	431bde83 	.word	0x431bde83

080027d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027e0:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <ADC_Init+0x1f0>)
 80027e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	021a      	lsls	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6899      	ldr	r1, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	4a58      	ldr	r2, [pc, #352]	; (80029cc <ADC_Init+0x1f4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d022      	beq.n	80028b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800287e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6899      	ldr	r1, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e00f      	b.n	80028d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0202 	bic.w	r2, r2, #2
 80028e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7e1b      	ldrb	r3, [r3, #24]
 80028f0:	005a      	lsls	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01b      	beq.n	800293c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002912:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	3b01      	subs	r3, #1
 8002930:	035a      	lsls	r2, r3, #13
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	e007      	b.n	800294c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	3b01      	subs	r3, #1
 8002968:	051a      	lsls	r2, r3, #20
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298e:	025a      	lsls	r2, r3, #9
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	029a      	lsls	r2, r3, #10
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40012300 	.word	0x40012300
 80029cc:	0f000001 	.word	0x0f000001

080029d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d13c      	bne.n	8002a64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12b      	bne.n	8002a5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d127      	bne.n	8002a5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d119      	bne.n	8002a5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0220 	bic.w	r2, r2, #32
 8002a36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff f8f3 	bl	8001c48 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a62:	e00e      	b.n	8002a82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff fd85 	bl	8002580 <HAL_ADC_ErrorCallback>
}
 8002a76:	e004      	b.n	8002a82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fd67 	bl	800256c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2240      	movs	r2, #64	; 0x40
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff fd5a 	bl	8002580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <__NVIC_GetPriorityGrouping+0x18>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0307 	and.w	r3, r3, #7
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db0b      	blt.n	8002b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4907      	ldr	r1, [pc, #28]	; (8002b70 <__NVIC_EnableIRQ+0x38>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2001      	movs	r0, #1
 8002b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c40:	d301      	bcc.n	8002c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00f      	b.n	8002c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <SysTick_Config+0x40>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4e:	210f      	movs	r1, #15
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	f7ff ff8e 	bl	8002b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <SysTick_Config+0x40>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5e:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <SysTick_Config+0x40>)
 8002c60:	2207      	movs	r2, #7
 8002c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000e010 	.word	0xe000e010

08002c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff29 	bl	8002ad4 <__NVIC_SetPriorityGrouping>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff ff3e 	bl	8002b1c <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff8e 	bl	8002bc8 <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5d 	bl	8002b74 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff31 	bl	8002b38 <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffa2 	bl	8002c30 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff faf2 	bl	80022ec <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e099      	b.n	8002e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d34:	e00f      	b.n	8002d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d36:	f7ff fad9 	bl	80022ec <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d908      	bls.n	8002d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e078      	b.n	8002e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e8      	bne.n	8002d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_DMA_Init+0x158>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4313      	orrs	r3, r2
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 0307 	bic.w	r3, r3, #7
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d117      	bne.n	8002e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fa6f 	bl	80032e0 <DMA_CheckFifoParam>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e16:	2301      	movs	r3, #1
 8002e18:	e016      	b.n	8002e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa26 	bl	8003274 <DMA_CalcBaseAndBitshift>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	f010803f 	.word	0xf010803f

08002e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_DMA_Start_IT+0x26>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e040      	b.n	8002efc <HAL_DMA_Start_IT+0xa8>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d12f      	bne.n	8002eee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f9b8 	bl	8003218 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	223f      	movs	r2, #63	; 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0216 	orr.w	r2, r2, #22
 8002ec2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e005      	b.n	8002efa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f10:	4b8e      	ldr	r3, [pc, #568]	; (800314c <HAL_DMA_IRQHandler+0x248>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a8e      	ldr	r2, [pc, #568]	; (8003150 <HAL_DMA_IRQHandler+0x24c>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0a9b      	lsrs	r3, r3, #10
 8002f1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	2208      	movs	r2, #8
 8002f30:	409a      	lsls	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01a      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2201      	movs	r2, #1
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d012      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	2201      	movs	r2, #1
 8002f94:	409a      	lsls	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f043 0202 	orr.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2204      	movs	r2, #4
 8002fac:	409a      	lsls	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d012      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2204      	movs	r2, #4
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	f043 0204 	orr.w	r2, r3, #4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d043      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03c      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	2210      	movs	r2, #16
 8003000:	409a      	lsls	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d018      	beq.n	8003046 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d024      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
 8003032:	e01f      	b.n	8003074 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01b      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
 8003044:	e016      	b.n	8003074 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0208 	bic.w	r2, r2, #8
 8003062:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	2220      	movs	r2, #32
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 808f 	beq.w	80031a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8087 	beq.w	80031a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	2220      	movs	r2, #32
 800309c:	409a      	lsls	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d136      	bne.n	800311c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0216 	bic.w	r2, r2, #22
 80030bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_DMA_IRQHandler+0x1da>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0208 	bic.w	r2, r2, #8
 80030ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	223f      	movs	r2, #63	; 0x3f
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310e:	2b00      	cmp	r3, #0
 8003110:	d07e      	beq.n	8003210 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
        }
        return;
 800311a:	e079      	b.n	8003210 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01d      	beq.n	8003166 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	2b00      	cmp	r3, #0
 800313e:	d031      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
 8003148:	e02c      	b.n	80031a4 <HAL_DMA_IRQHandler+0x2a0>
 800314a:	bf00      	nop
 800314c:	20000020 	.word	0x20000020
 8003150:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d023      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
 8003164:	e01e      	b.n	80031a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10f      	bne.n	8003194 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0210 	bic.w	r2, r2, #16
 8003182:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d032      	beq.n	8003212 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d022      	beq.n	80031fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2205      	movs	r2, #5
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d307      	bcc.n	80031ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f2      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x2cc>
 80031ea:	e000      	b.n	80031ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
 800320e:	e000      	b.n	8003212 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003210:	bf00      	nop
    }
  }
}
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003234:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d108      	bne.n	8003258 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003256:	e007      	b.n	8003268 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3b10      	subs	r3, #16
 8003284:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <DMA_CalcBaseAndBitshift+0x68>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d909      	bls.n	80032b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	1d1a      	adds	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	659a      	str	r2, [r3, #88]	; 0x58
 80032b4:	e007      	b.n	80032c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	aaaaaaab 	.word	0xaaaaaaab
 80032dc:	080068f8 	.word	0x080068f8

080032e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11f      	bne.n	800333a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d856      	bhi.n	80033ae <DMA_CheckFifoParam+0xce>
 8003300:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <DMA_CheckFifoParam+0x28>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	08003319 	.word	0x08003319
 800330c:	0800332b 	.word	0x0800332b
 8003310:	08003319 	.word	0x08003319
 8003314:	080033af 	.word	0x080033af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d046      	beq.n	80033b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003328:	e043      	b.n	80033b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003332:	d140      	bne.n	80033b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003338:	e03d      	b.n	80033b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003342:	d121      	bne.n	8003388 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d837      	bhi.n	80033ba <DMA_CheckFifoParam+0xda>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <DMA_CheckFifoParam+0x70>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003361 	.word	0x08003361
 8003354:	08003367 	.word	0x08003367
 8003358:	08003361 	.word	0x08003361
 800335c:	08003379 	.word	0x08003379
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e030      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d025      	beq.n	80033be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003376:	e022      	b.n	80033be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003380:	d11f      	bne.n	80033c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003386:	e01c      	b.n	80033c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d903      	bls.n	8003396 <DMA_CheckFifoParam+0xb6>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d003      	beq.n	800339c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003394:	e018      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
      break;
 800339a:	e015      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e00b      	b.n	80033c6 <DMA_CheckFifoParam+0xe6>
      break;
 80033ae:	bf00      	nop
 80033b0:	e00a      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033b2:	bf00      	nop
 80033b4:	e008      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033b6:	bf00      	nop
 80033b8:	e006      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
    }
  } 
  
  return status; 
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e159      	b.n	80036a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	429a      	cmp	r2, r3
 800340e:	f040 8148 	bne.w	80036a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d005      	beq.n	800342a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003426:	2b02      	cmp	r3, #2
 8003428:	d130      	bne.n	800348c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003460:	2201      	movs	r2, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 0201 	and.w	r2, r3, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b03      	cmp	r3, #3
 8003496:	d017      	beq.n	80034c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d123      	bne.n	800351c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3208      	adds	r2, #8
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	08da      	lsrs	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3208      	adds	r2, #8
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a2 	beq.w	80036a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_GPIO_Init+0x2e8>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a56      	ldr	r2, [pc, #344]	; (80036c0 <HAL_GPIO_Init+0x2e8>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <HAL_GPIO_Init+0x2e8>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800357a:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_GPIO_Init+0x2ec>)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	3302      	adds	r3, #2
 8003582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a49      	ldr	r2, [pc, #292]	; (80036c8 <HAL_GPIO_Init+0x2f0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x202>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a48      	ldr	r2, [pc, #288]	; (80036cc <HAL_GPIO_Init+0x2f4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x1fe>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a47      	ldr	r2, [pc, #284]	; (80036d0 <HAL_GPIO_Init+0x2f8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x1fa>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a46      	ldr	r2, [pc, #280]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x1f6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a45      	ldr	r2, [pc, #276]	; (80036d8 <HAL_GPIO_Init+0x300>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x1f2>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e008      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035ca:	2307      	movs	r3, #7
 80035cc:	e006      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e004      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035da:	2300      	movs	r3, #0
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	f002 0203 	and.w	r2, r2, #3
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4093      	lsls	r3, r2
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ec:	4935      	ldr	r1, [pc, #212]	; (80036c4 <HAL_GPIO_Init+0x2ec>)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_GPIO_Init+0x304>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361e:	4a2f      	ldr	r2, [pc, #188]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003648:	4a24      	ldr	r2, [pc, #144]	; (80036dc <HAL_GPIO_Init+0x304>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003672:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003678:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_GPIO_Init+0x304>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800369c:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <HAL_GPIO_Init+0x304>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	f67f aea2 	bls.w	80033f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40020000 	.word	0x40020000
 80036cc:	40020400 	.word	0x40020400
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40020c00 	.word	0x40020c00
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f0:	787b      	ldrb	r3, [r7, #1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036fc:	e003      	b.n	8003706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	041a      	lsls	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	619a      	str	r2, [r3, #24]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003712:	b480      	push	{r7}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003724:	887a      	ldrh	r2, [r7, #2]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4013      	ands	r3, r2
 800372a:	041a      	lsls	r2, r3, #16
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43d9      	mvns	r1, r3
 8003730:	887b      	ldrh	r3, [r7, #2]
 8003732:	400b      	ands	r3, r1
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	619a      	str	r2, [r3, #24]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e267      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d075      	beq.n	8003852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003766:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b04      	cmp	r3, #4
 8003770:	d00c      	beq.n	800378c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b85      	ldr	r3, [pc, #532]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377a:	2b08      	cmp	r3, #8
 800377c:	d112      	bne.n	80037a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800377e:	4b82      	ldr	r3, [pc, #520]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378a:	d10b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	4b7e      	ldr	r3, [pc, #504]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d05b      	beq.n	8003850 <HAL_RCC_OscConfig+0x108>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d157      	bne.n	8003850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e242      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d106      	bne.n	80037bc <HAL_RCC_OscConfig+0x74>
 80037ae:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a75      	ldr	r2, [pc, #468]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xb0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x98>
 80037c6:	4b70      	ldr	r3, [pc, #448]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6f      	ldr	r2, [pc, #444]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b6d      	ldr	r3, [pc, #436]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6c      	ldr	r2, [pc, #432]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xb0>
 80037e0:	4b69      	ldr	r3, [pc, #420]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a68      	ldr	r2, [pc, #416]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b66      	ldr	r3, [pc, #408]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a65      	ldr	r2, [pc, #404]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe fd74 	bl	80022ec <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fd70 	bl	80022ec <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e207      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xc0>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe fd60 	bl	80022ec <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe fd5c 	bl	80022ec <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e1f3      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b51      	ldr	r3, [pc, #324]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0xe8>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d063      	beq.n	8003926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800385e:	4b4a      	ldr	r3, [pc, #296]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003872:	2b08      	cmp	r3, #8
 8003874:	d11c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003876:	4b44      	ldr	r3, [pc, #272]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d116      	bne.n	80038b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_RCC_OscConfig+0x152>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e1c7      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4937      	ldr	r1, [pc, #220]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	e03a      	b.n	8003926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b8:	4b34      	ldr	r3, [pc, #208]	; (800398c <HAL_RCC_OscConfig+0x244>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fe fd15 	bl	80022ec <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c6:	f7fe fd11 	bl	80022ec <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1a8      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e4:	4b28      	ldr	r3, [pc, #160]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4925      	ldr	r1, [pc, #148]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
 80038f8:	e015      	b.n	8003926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_OscConfig+0x244>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fe fcf4 	bl	80022ec <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003908:	f7fe fcf0 	bl	80022ec <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e187      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d036      	beq.n	80039a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_RCC_OscConfig+0x248>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fe fcd4 	bl	80022ec <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003948:	f7fe fcd0 	bl	80022ec <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e167      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800395c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x200>
 8003966:	e01b      	b.n	80039a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_OscConfig+0x248>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396e:	f7fe fcbd 	bl	80022ec <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003974:	e00e      	b.n	8003994 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003976:	f7fe fcb9 	bl	80022ec <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d907      	bls.n	8003994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e150      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
 8003988:	40023800 	.word	0x40023800
 800398c:	42470000 	.word	0x42470000
 8003990:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ea      	bne.n	8003976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8097 	beq.w	8003adc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b2:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10f      	bne.n	80039de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	4b7d      	ldr	r3, [pc, #500]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a7c      	ldr	r2, [pc, #496]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
 80039ce:	4b7a      	ldr	r3, [pc, #488]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039de:	4b77      	ldr	r3, [pc, #476]	; (8003bbc <HAL_RCC_OscConfig+0x474>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d118      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ea:	4b74      	ldr	r3, [pc, #464]	; (8003bbc <HAL_RCC_OscConfig+0x474>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a73      	ldr	r2, [pc, #460]	; (8003bbc <HAL_RCC_OscConfig+0x474>)
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f6:	f7fe fc79 	bl	80022ec <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fe:	f7fe fc75 	bl	80022ec <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e10c      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	4b6a      	ldr	r3, [pc, #424]	; (8003bbc <HAL_RCC_OscConfig+0x474>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x2ea>
 8003a24:	4b64      	ldr	r3, [pc, #400]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a63      	ldr	r2, [pc, #396]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	e01c      	b.n	8003a6c <HAL_RCC_OscConfig+0x324>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x30c>
 8003a3a:	4b5f      	ldr	r3, [pc, #380]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a5e      	ldr	r2, [pc, #376]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	4b5c      	ldr	r3, [pc, #368]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a5b      	ldr	r2, [pc, #364]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0x324>
 8003a54:	4b58      	ldr	r3, [pc, #352]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a57      	ldr	r2, [pc, #348]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a60:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	4a54      	ldr	r2, [pc, #336]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a66:	f023 0304 	bic.w	r3, r3, #4
 8003a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fe fc3a 	bl	80022ec <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7c:	f7fe fc36 	bl	80022ec <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e0cb      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ee      	beq.n	8003a7c <HAL_RCC_OscConfig+0x334>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa0:	f7fe fc24 	bl	80022ec <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fc20 	bl	80022ec <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e0b5      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abe:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ee      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad0:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	4a38      	ldr	r2, [pc, #224]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ada:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80a1 	beq.w	8003c28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae6:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d05c      	beq.n	8003bac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d141      	bne.n	8003b7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <HAL_RCC_OscConfig+0x478>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fe fbf4 	bl	80022ec <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fe fbf0 	bl	80022ec <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e087      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	019b      	lsls	r3, r3, #6
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	491b      	ldr	r1, [pc, #108]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_RCC_OscConfig+0x478>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe fbc9 	bl	80022ec <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5e:	f7fe fbc5 	bl	80022ec <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e05c      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x416>
 8003b7c:	e054      	b.n	8003c28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <HAL_RCC_OscConfig+0x478>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fbb2 	bl	80022ec <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fe fbae 	bl	80022ec <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e045      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x444>
 8003baa:	e03d      	b.n	8003c28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e038      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40007000 	.word	0x40007000
 8003bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x4ec>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d121      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d11a      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d111      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800

08003c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0cc      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b68      	ldr	r3, [pc, #416]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d90c      	bls.n	8003c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b65      	ldr	r3, [pc, #404]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b63      	ldr	r3, [pc, #396]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0b8      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c8c:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a58      	ldr	r2, [pc, #352]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca4:	4b53      	ldr	r3, [pc, #332]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a52      	ldr	r2, [pc, #328]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	494d      	ldr	r1, [pc, #308]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d044      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d119      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e07f      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf6:	4b3f      	ldr	r3, [pc, #252]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e06f      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e067      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 0203 	bic.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4934      	ldr	r1, [pc, #208]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d28:	f7fe fae0 	bl	80022ec <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fe fadc 	bl	80022ec <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e04f      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 020c 	and.w	r2, r3, #12
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1eb      	bne.n	8003d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d20c      	bcs.n	8003d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e032      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4916      	ldr	r1, [pc, #88]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	490e      	ldr	r1, [pc, #56]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dbe:	f000 f821 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	490a      	ldr	r1, [pc, #40]	; (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	5ccb      	ldrb	r3, [r1, r3]
 8003dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd6:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fa40 	bl	8002264 <HAL_InitTick>

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023c00 	.word	0x40023c00
 8003df4:	40023800 	.word	0x40023800
 8003df8:	080068e0 	.word	0x080068e0
 8003dfc:	20000020 	.word	0x20000020
 8003e00:	20000024 	.word	0x20000024

08003e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e08:	b094      	sub	sp, #80	; 0x50
 8003e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e10:	2300      	movs	r3, #0
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e14:	2300      	movs	r3, #0
 8003e16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e1c:	4b79      	ldr	r3, [pc, #484]	; (8004004 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d00d      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x40>
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	f200 80e1 	bhi.w	8003ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x34>
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e36:	e0db      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b73      	ldr	r3, [pc, #460]	; (8004008 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e3c:	e0db      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3e:	4b73      	ldr	r3, [pc, #460]	; (800400c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e42:	e0d8      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e44:	4b6f      	ldr	r3, [pc, #444]	; (8004004 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4e:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d063      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5a:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	2200      	movs	r2, #0
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6e:	2300      	movs	r3, #0
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
 8003e72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	f04f 0000 	mov.w	r0, #0
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	0159      	lsls	r1, r3, #5
 8003e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e88:	0150      	lsls	r0, r2, #5
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4621      	mov	r1, r4
 8003e90:	1a51      	subs	r1, r2, r1
 8003e92:	6139      	str	r1, [r7, #16]
 8003e94:	4629      	mov	r1, r5
 8003e96:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	018b      	lsls	r3, r1, #6
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	018a      	lsls	r2, r1, #6
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	ebb2 0801 	subs.w	r8, r2, r1
 8003ebc:	4659      	mov	r1, fp
 8003ebe:	eb63 0901 	sbc.w	r9, r3, r1
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed6:	4690      	mov	r8, r2
 8003ed8:	4699      	mov	r9, r3
 8003eda:	4623      	mov	r3, r4
 8003edc:	eb18 0303 	adds.w	r3, r8, r3
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	eb49 0303 	adc.w	r3, r9, r3
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	024b      	lsls	r3, r1, #9
 8003efa:	4621      	mov	r1, r4
 8003efc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f00:	4621      	mov	r1, r4
 8003f02:	024a      	lsls	r2, r1, #9
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f14:	f7fc fe2e 	bl	8000b74 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f20:	e058      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f22:	4b38      	ldr	r3, [pc, #224]	; (8004004 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	2200      	movs	r2, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
 8003f38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	f04f 0000 	mov.w	r0, #0
 8003f44:	f04f 0100 	mov.w	r1, #0
 8003f48:	0159      	lsls	r1, r3, #5
 8003f4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4e:	0150      	lsls	r0, r2, #5
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4641      	mov	r1, r8
 8003f56:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f74:	ebb2 040a 	subs.w	r4, r2, sl
 8003f78:	eb63 050b 	sbc.w	r5, r3, fp
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	00eb      	lsls	r3, r5, #3
 8003f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f8a:	00e2      	lsls	r2, r4, #3
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	461d      	mov	r5, r3
 8003f90:	4643      	mov	r3, r8
 8003f92:	18e3      	adds	r3, r4, r3
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	464b      	mov	r3, r9
 8003f98:	eb45 0303 	adc.w	r3, r5, r3
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003faa:	4629      	mov	r1, r5
 8003fac:	028b      	lsls	r3, r1, #10
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	028a      	lsls	r2, r1, #10
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	61fa      	str	r2, [r7, #28]
 8003fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc8:	f7fc fdd4 	bl	8000b74 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fee:	e002      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3750      	adds	r7, #80	; 0x50
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	00f42400 	.word	0x00f42400
 800400c:	007a1200 	.word	0x007a1200

08004010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <HAL_RCC_GetHCLKFreq+0x14>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000020 	.word	0x20000020

08004028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800402c:	f7ff fff0 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	0a9b      	lsrs	r3, r3, #10
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4903      	ldr	r1, [pc, #12]	; (800404c <HAL_RCC_GetPCLK1Freq+0x24>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	080068f0 	.word	0x080068f0

08004050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004054:	f7ff ffdc 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	0b5b      	lsrs	r3, r3, #13
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	4903      	ldr	r1, [pc, #12]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	080068f0 	.word	0x080068f0

08004078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e041      	b.n	800410e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fd ff30 	bl	8001f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f000 fc68 	bl	800498c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e041      	b.n	80041ac <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f839 	bl	80041b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 fc19 	bl	800498c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_TIM_OC_Start+0x24>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e022      	b.n	8004232 <HAL_TIM_OC_Start+0x6a>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d109      	bne.n	8004206 <HAL_TIM_OC_Start+0x3e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e015      	b.n	8004232 <HAL_TIM_OC_Start+0x6a>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d109      	bne.n	8004220 <HAL_TIM_OC_Start+0x58>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e008      	b.n	8004232 <HAL_TIM_OC_Start+0x6a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e068      	b.n	800430c <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <HAL_TIM_OC_Start+0x82>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004248:	e013      	b.n	8004272 <HAL_TIM_OC_Start+0xaa>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d104      	bne.n	800425a <HAL_TIM_OC_Start+0x92>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004258:	e00b      	b.n	8004272 <HAL_TIM_OC_Start+0xaa>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d104      	bne.n	800426a <HAL_TIM_OC_Start+0xa2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004268:	e003      	b.n	8004272 <HAL_TIM_OC_Start+0xaa>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 febd 	bl	8004ffa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <HAL_TIM_OC_Start+0x14c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d107      	bne.n	800429a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <HAL_TIM_OC_Start+0x14c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <HAL_TIM_OC_Start+0x10e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ac:	d013      	beq.n	80042d6 <HAL_TIM_OC_Start+0x10e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a19      	ldr	r2, [pc, #100]	; (8004318 <HAL_TIM_OC_Start+0x150>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_TIM_OC_Start+0x10e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_TIM_OC_Start+0x154>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_TIM_OC_Start+0x10e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <HAL_TIM_OC_Start+0x158>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_TIM_OC_Start+0x10e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <HAL_TIM_OC_Start+0x15c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d111      	bne.n	80042fa <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d010      	beq.n	800430a <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	e007      	b.n	800430a <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40014000 	.word	0x40014000

08004328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e041      	b.n	80043be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f839 	bl	80043c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f000 fb10 	bl	800498c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_TIM_PWM_Start+0x24>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e022      	b.n	8004446 <HAL_TIM_PWM_Start+0x6a>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d109      	bne.n	800441a <HAL_TIM_PWM_Start+0x3e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e015      	b.n	8004446 <HAL_TIM_PWM_Start+0x6a>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d109      	bne.n	8004434 <HAL_TIM_PWM_Start+0x58>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e008      	b.n	8004446 <HAL_TIM_PWM_Start+0x6a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e068      	b.n	8004520 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_TIM_PWM_Start+0x82>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	e013      	b.n	8004486 <HAL_TIM_PWM_Start+0xaa>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d104      	bne.n	800446e <HAL_TIM_PWM_Start+0x92>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800446c:	e00b      	b.n	8004486 <HAL_TIM_PWM_Start+0xaa>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d104      	bne.n	800447e <HAL_TIM_PWM_Start+0xa2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800447c:	e003      	b.n	8004486 <HAL_TIM_PWM_Start+0xaa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2201      	movs	r2, #1
 800448c:	6839      	ldr	r1, [r7, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fdb3 	bl	8004ffa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a23      	ldr	r2, [pc, #140]	; (8004528 <HAL_TIM_PWM_Start+0x14c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d107      	bne.n	80044ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <HAL_TIM_PWM_Start+0x14c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d018      	beq.n	80044ea <HAL_TIM_PWM_Start+0x10e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d013      	beq.n	80044ea <HAL_TIM_PWM_Start+0x10e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_TIM_PWM_Start+0x150>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_TIM_PWM_Start+0x10e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a17      	ldr	r2, [pc, #92]	; (8004530 <HAL_TIM_PWM_Start+0x154>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_TIM_PWM_Start+0x10e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_TIM_PWM_Start+0x158>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIM_PWM_Start+0x10e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a14      	ldr	r2, [pc, #80]	; (8004538 <HAL_TIM_PWM_Start+0x15c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d111      	bne.n	800450e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b06      	cmp	r3, #6
 80044fa:	d010      	beq.n	800451e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450c:	e007      	b.n	800451e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40014000 	.word	0x40014000

0800453c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004556:	2302      	movs	r3, #2
 8004558:	e048      	b.n	80045ec <HAL_TIM_OC_ConfigChannel+0xb0>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	d839      	bhi.n	80045dc <HAL_TIM_OC_ConfigChannel+0xa0>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <HAL_TIM_OC_ConfigChannel+0x34>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045dd 	.word	0x080045dd
 8004578:	080045dd 	.word	0x080045dd
 800457c:	080045dd 	.word	0x080045dd
 8004580:	080045b3 	.word	0x080045b3
 8004584:	080045dd 	.word	0x080045dd
 8004588:	080045dd 	.word	0x080045dd
 800458c:	080045dd 	.word	0x080045dd
 8004590:	080045c1 	.word	0x080045c1
 8004594:	080045dd 	.word	0x080045dd
 8004598:	080045dd 	.word	0x080045dd
 800459c:	080045dd 	.word	0x080045dd
 80045a0:	080045cf 	.word	0x080045cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fa6e 	bl	8004a8c <TIM_OC1_SetConfig>
      break;
 80045b0:	e017      	b.n	80045e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 facd 	bl	8004b58 <TIM_OC2_SetConfig>
      break;
 80045be:	e010      	b.n	80045e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fb32 	bl	8004c30 <TIM_OC3_SetConfig>
      break;
 80045cc:	e009      	b.n	80045e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fb95 	bl	8004d04 <TIM_OC4_SetConfig>
      break;
 80045da:	e002      	b.n	80045e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]
      break;
 80045e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800460e:	2302      	movs	r3, #2
 8004610:	e0ae      	b.n	8004770 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b0c      	cmp	r3, #12
 800461e:	f200 809f 	bhi.w	8004760 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004622:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	0800465d 	.word	0x0800465d
 800462c:	08004761 	.word	0x08004761
 8004630:	08004761 	.word	0x08004761
 8004634:	08004761 	.word	0x08004761
 8004638:	0800469d 	.word	0x0800469d
 800463c:	08004761 	.word	0x08004761
 8004640:	08004761 	.word	0x08004761
 8004644:	08004761 	.word	0x08004761
 8004648:	080046df 	.word	0x080046df
 800464c:	08004761 	.word	0x08004761
 8004650:	08004761 	.word	0x08004761
 8004654:	08004761 	.word	0x08004761
 8004658:	0800471f 	.word	0x0800471f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fa12 	bl	8004a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0208 	orr.w	r2, r2, #8
 8004676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0204 	bic.w	r2, r2, #4
 8004686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6999      	ldr	r1, [r3, #24]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	619a      	str	r2, [r3, #24]
      break;
 800469a:	e064      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fa58 	bl	8004b58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	619a      	str	r2, [r3, #24]
      break;
 80046dc:	e043      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 faa3 	bl	8004c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0208 	orr.w	r2, r2, #8
 80046f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0204 	bic.w	r2, r2, #4
 8004708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69d9      	ldr	r1, [r3, #28]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	61da      	str	r2, [r3, #28]
      break;
 800471c:	e023      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 faed 	bl	8004d04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69d9      	ldr	r1, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	021a      	lsls	r2, r3, #8
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	61da      	str	r2, [r3, #28]
      break;
 800475e:	e002      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
      break;
 8004764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_TIM_ConfigClockSource+0x1c>
 8004790:	2302      	movs	r3, #2
 8004792:	e0b4      	b.n	80048fe <HAL_TIM_ConfigClockSource+0x186>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047cc:	d03e      	beq.n	800484c <HAL_TIM_ConfigClockSource+0xd4>
 80047ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d2:	f200 8087 	bhi.w	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	f000 8086 	beq.w	80048ea <HAL_TIM_ConfigClockSource+0x172>
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e2:	d87f      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d01a      	beq.n	800481e <HAL_TIM_ConfigClockSource+0xa6>
 80047e8:	2b70      	cmp	r3, #112	; 0x70
 80047ea:	d87b      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b60      	cmp	r3, #96	; 0x60
 80047ee:	d050      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x11a>
 80047f0:	2b60      	cmp	r3, #96	; 0x60
 80047f2:	d877      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d03c      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0xfa>
 80047f8:	2b50      	cmp	r3, #80	; 0x50
 80047fa:	d873      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d058      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d86f      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d064      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	2b30      	cmp	r3, #48	; 0x30
 800480a:	d86b      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d060      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d867      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05c      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	2b10      	cmp	r3, #16
 800481a:	d05a      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 800481c:	e062      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6899      	ldr	r1, [r3, #8]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f000 fbc4 	bl	8004fba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	609a      	str	r2, [r3, #8]
      break;
 800484a:	e04f      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6899      	ldr	r1, [r3, #8]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f000 fbad 	bl	8004fba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486e:	609a      	str	r2, [r3, #8]
      break;
 8004870:	e03c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fb21 	bl	8004ec6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2150      	movs	r1, #80	; 0x50
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fb7a 	bl	8004f84 <TIM_ITRx_SetConfig>
      break;
 8004890:	e02c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	461a      	mov	r2, r3
 80048a0:	f000 fb40 	bl	8004f24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2160      	movs	r1, #96	; 0x60
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fb6a 	bl	8004f84 <TIM_ITRx_SetConfig>
      break;
 80048b0:	e01c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	461a      	mov	r2, r3
 80048c0:	f000 fb01 	bl	8004ec6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb5a 	bl	8004f84 <TIM_ITRx_SetConfig>
      break;
 80048d0:	e00c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f000 fb51 	bl	8004f84 <TIM_ITRx_SetConfig>
      break;
 80048e2:	e003      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      break;
 80048e8:	e000      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_TIM_SlaveConfigSynchro+0x18>
 800491a:	2302      	movs	r3, #2
 800491c:	e031      	b.n	8004982 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa37 	bl	8004da4 <TIM_SlaveTimer_SetConfig>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e018      	b.n	8004982 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800496e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a34      	ldr	r2, [pc, #208]	; (8004a70 <TIM_Base_SetConfig+0xe4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00f      	beq.n	80049c4 <TIM_Base_SetConfig+0x38>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d00b      	beq.n	80049c4 <TIM_Base_SetConfig+0x38>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a31      	ldr	r2, [pc, #196]	; (8004a74 <TIM_Base_SetConfig+0xe8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_Base_SetConfig+0x38>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <TIM_Base_SetConfig+0xec>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_Base_SetConfig+0x38>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <TIM_Base_SetConfig+0xf0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a25      	ldr	r2, [pc, #148]	; (8004a70 <TIM_Base_SetConfig+0xe4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01b      	beq.n	8004a16 <TIM_Base_SetConfig+0x8a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e4:	d017      	beq.n	8004a16 <TIM_Base_SetConfig+0x8a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <TIM_Base_SetConfig+0xe8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <TIM_Base_SetConfig+0x8a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <TIM_Base_SetConfig+0xec>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <TIM_Base_SetConfig+0x8a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <TIM_Base_SetConfig+0xf0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <TIM_Base_SetConfig+0x8a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <TIM_Base_SetConfig+0xf4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <TIM_Base_SetConfig+0x8a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1e      	ldr	r2, [pc, #120]	; (8004a84 <TIM_Base_SetConfig+0xf8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_Base_SetConfig+0x8a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <TIM_Base_SetConfig+0xfc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d108      	bne.n	8004a28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <TIM_Base_SetConfig+0xe4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800

08004a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f023 0201 	bic.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0303 	bic.w	r3, r3, #3
 8004ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f023 0302 	bic.w	r3, r3, #2
 8004ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <TIM_OC1_SetConfig+0xc8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d10c      	bne.n	8004b02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0308 	bic.w	r3, r3, #8
 8004aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f023 0304 	bic.w	r3, r3, #4
 8004b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <TIM_OC1_SetConfig+0xc8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d111      	bne.n	8004b2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	621a      	str	r2, [r3, #32]
}
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40010000 	.word	0x40010000

08004b58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f023 0210 	bic.w	r2, r3, #16
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0320 	bic.w	r3, r3, #32
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1e      	ldr	r2, [pc, #120]	; (8004c2c <TIM_OC2_SetConfig+0xd4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d10d      	bne.n	8004bd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <TIM_OC2_SetConfig+0xd4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d113      	bne.n	8004c04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40010000 	.word	0x40010000

08004c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a1d      	ldr	r2, [pc, #116]	; (8004d00 <TIM_OC3_SetConfig+0xd0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10d      	bne.n	8004caa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <TIM_OC3_SetConfig+0xd0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d113      	bne.n	8004cda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40010000 	.word	0x40010000

08004d04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	031b      	lsls	r3, r3, #12
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a10      	ldr	r2, [pc, #64]	; (8004da0 <TIM_OC4_SetConfig+0x9c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d109      	bne.n	8004d78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000

08004da4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f023 0307 	bic.w	r3, r3, #7
 8004dd2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b70      	cmp	r3, #112	; 0x70
 8004dec:	d01a      	beq.n	8004e24 <TIM_SlaveTimer_SetConfig+0x80>
 8004dee:	2b70      	cmp	r3, #112	; 0x70
 8004df0:	d860      	bhi.n	8004eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004df2:	2b60      	cmp	r3, #96	; 0x60
 8004df4:	d054      	beq.n	8004ea0 <TIM_SlaveTimer_SetConfig+0xfc>
 8004df6:	2b60      	cmp	r3, #96	; 0x60
 8004df8:	d85c      	bhi.n	8004eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004dfa:	2b50      	cmp	r3, #80	; 0x50
 8004dfc:	d046      	beq.n	8004e8c <TIM_SlaveTimer_SetConfig+0xe8>
 8004dfe:	2b50      	cmp	r3, #80	; 0x50
 8004e00:	d858      	bhi.n	8004eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d019      	beq.n	8004e3a <TIM_SlaveTimer_SetConfig+0x96>
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d854      	bhi.n	8004eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004e0a:	2b30      	cmp	r3, #48	; 0x30
 8004e0c:	d055      	beq.n	8004eba <TIM_SlaveTimer_SetConfig+0x116>
 8004e0e:	2b30      	cmp	r3, #48	; 0x30
 8004e10:	d850      	bhi.n	8004eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d051      	beq.n	8004eba <TIM_SlaveTimer_SetConfig+0x116>
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d84c      	bhi.n	8004eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d04d      	beq.n	8004eba <TIM_SlaveTimer_SetConfig+0x116>
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d04b      	beq.n	8004eba <TIM_SlaveTimer_SetConfig+0x116>
 8004e22:	e047      	b.n	8004eb4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68d9      	ldr	r1, [r3, #12]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f000 f8c1 	bl	8004fba <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004e38:	e040      	b.n	8004ebc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d101      	bne.n	8004e46 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e03b      	b.n	8004ebe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a1a      	ldr	r2, [r3, #32]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]
      break;
 8004e8a:	e017      	b.n	8004ebc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6899      	ldr	r1, [r3, #8]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f000 f814 	bl	8004ec6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004e9e:	e00d      	b.n	8004ebc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6899      	ldr	r1, [r3, #8]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	461a      	mov	r2, r3
 8004eae:	f000 f839 	bl	8004f24 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004eb2:	e003      	b.n	8004ebc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb8:	e000      	b.n	8004ebc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004eba:	bf00      	nop
  }

  return status;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 0201 	bic.w	r2, r3, #1
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 030a 	bic.w	r3, r3, #10
 8004f02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	621a      	str	r2, [r3, #32]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f023 0210 	bic.w	r2, r3, #16
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	031b      	lsls	r3, r3, #12
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	621a      	str	r2, [r3, #32]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f043 0307 	orr.w	r3, r3, #7
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	609a      	str	r2, [r3, #8]
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	609a      	str	r2, [r3, #8]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b087      	sub	sp, #28
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	2201      	movs	r2, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	43db      	mvns	r3, r3
 800501c:	401a      	ands	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	431a      	orrs	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005058:	2302      	movs	r3, #2
 800505a:	e050      	b.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1c      	ldr	r2, [pc, #112]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d018      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d013      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a18      	ldr	r2, [pc, #96]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a16      	ldr	r2, [pc, #88]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10c      	bne.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40014000 	.word	0x40014000

08005120 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005138:	2302      	movs	r3, #2
 800513a:	e03d      	b.n	80051b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e03f      	b.n	8005256 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fc ff60 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2224      	movs	r2, #36	; 0x24
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f829 	bl	8005260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800521c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800522c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800523c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005264:	b0c0      	sub	sp, #256	; 0x100
 8005266:	af00      	add	r7, sp, #0
 8005268:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	68d9      	ldr	r1, [r3, #12]
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	ea40 0301 	orr.w	r3, r0, r1
 8005288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	431a      	orrs	r2, r3
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	431a      	orrs	r2, r3
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052b8:	f021 010c 	bic.w	r1, r1, #12
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052c6:	430b      	orrs	r3, r1
 80052c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052da:	6999      	ldr	r1, [r3, #24]
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	ea40 0301 	orr.w	r3, r0, r1
 80052e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b8f      	ldr	r3, [pc, #572]	; (800552c <UART_SetConfig+0x2cc>)
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d005      	beq.n	8005300 <UART_SetConfig+0xa0>
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b8d      	ldr	r3, [pc, #564]	; (8005530 <UART_SetConfig+0x2d0>)
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d104      	bne.n	800530a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005300:	f7fe fea6 	bl	8004050 <HAL_RCC_GetPCLK2Freq>
 8005304:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005308:	e003      	b.n	8005312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800530a:	f7fe fe8d 	bl	8004028 <HAL_RCC_GetPCLK1Freq>
 800530e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531c:	f040 810c 	bne.w	8005538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800532a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800532e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	1891      	adds	r1, r2, r2
 8005338:	65b9      	str	r1, [r7, #88]	; 0x58
 800533a:	415b      	adcs	r3, r3
 800533c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800533e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005342:	4621      	mov	r1, r4
 8005344:	eb12 0801 	adds.w	r8, r2, r1
 8005348:	4629      	mov	r1, r5
 800534a:	eb43 0901 	adc.w	r9, r3, r1
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800535a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800535e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005362:	4690      	mov	r8, r2
 8005364:	4699      	mov	r9, r3
 8005366:	4623      	mov	r3, r4
 8005368:	eb18 0303 	adds.w	r3, r8, r3
 800536c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005370:	462b      	mov	r3, r5
 8005372:	eb49 0303 	adc.w	r3, r9, r3
 8005376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005386:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800538a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800538e:	460b      	mov	r3, r1
 8005390:	18db      	adds	r3, r3, r3
 8005392:	653b      	str	r3, [r7, #80]	; 0x50
 8005394:	4613      	mov	r3, r2
 8005396:	eb42 0303 	adc.w	r3, r2, r3
 800539a:	657b      	str	r3, [r7, #84]	; 0x54
 800539c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053a4:	f7fb fbe6 	bl	8000b74 <__aeabi_uldivmod>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4b61      	ldr	r3, [pc, #388]	; (8005534 <UART_SetConfig+0x2d4>)
 80053ae:	fba3 2302 	umull	r2, r3, r3, r2
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	011c      	lsls	r4, r3, #4
 80053b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053c8:	4642      	mov	r2, r8
 80053ca:	464b      	mov	r3, r9
 80053cc:	1891      	adds	r1, r2, r2
 80053ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80053d0:	415b      	adcs	r3, r3
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053d8:	4641      	mov	r1, r8
 80053da:	eb12 0a01 	adds.w	sl, r2, r1
 80053de:	4649      	mov	r1, r9
 80053e0:	eb43 0b01 	adc.w	fp, r3, r1
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053f8:	4692      	mov	sl, r2
 80053fa:	469b      	mov	fp, r3
 80053fc:	4643      	mov	r3, r8
 80053fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005406:	464b      	mov	r3, r9
 8005408:	eb4b 0303 	adc.w	r3, fp, r3
 800540c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800541c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005424:	460b      	mov	r3, r1
 8005426:	18db      	adds	r3, r3, r3
 8005428:	643b      	str	r3, [r7, #64]	; 0x40
 800542a:	4613      	mov	r3, r2
 800542c:	eb42 0303 	adc.w	r3, r2, r3
 8005430:	647b      	str	r3, [r7, #68]	; 0x44
 8005432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800543a:	f7fb fb9b 	bl	8000b74 <__aeabi_uldivmod>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4611      	mov	r1, r2
 8005444:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <UART_SetConfig+0x2d4>)
 8005446:	fba3 2301 	umull	r2, r3, r3, r1
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	2264      	movs	r2, #100	; 0x64
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	1acb      	subs	r3, r1, r3
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <UART_SetConfig+0x2d4>)
 800545c:	fba3 2302 	umull	r2, r3, r3, r2
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005468:	441c      	add	r4, r3
 800546a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005474:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	1891      	adds	r1, r2, r2
 8005482:	63b9      	str	r1, [r7, #56]	; 0x38
 8005484:	415b      	adcs	r3, r3
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800548c:	4641      	mov	r1, r8
 800548e:	1851      	adds	r1, r2, r1
 8005490:	6339      	str	r1, [r7, #48]	; 0x30
 8005492:	4649      	mov	r1, r9
 8005494:	414b      	adcs	r3, r1
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054a4:	4659      	mov	r1, fp
 80054a6:	00cb      	lsls	r3, r1, #3
 80054a8:	4651      	mov	r1, sl
 80054aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ae:	4651      	mov	r1, sl
 80054b0:	00ca      	lsls	r2, r1, #3
 80054b2:	4610      	mov	r0, r2
 80054b4:	4619      	mov	r1, r3
 80054b6:	4603      	mov	r3, r0
 80054b8:	4642      	mov	r2, r8
 80054ba:	189b      	adds	r3, r3, r2
 80054bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054c0:	464b      	mov	r3, r9
 80054c2:	460a      	mov	r2, r1
 80054c4:	eb42 0303 	adc.w	r3, r2, r3
 80054c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054e0:	460b      	mov	r3, r1
 80054e2:	18db      	adds	r3, r3, r3
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e6:	4613      	mov	r3, r2
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054f6:	f7fb fb3d 	bl	8000b74 <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <UART_SetConfig+0x2d4>)
 8005500:	fba3 1302 	umull	r1, r3, r3, r2
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	2164      	movs	r1, #100	; 0x64
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	3332      	adds	r3, #50	; 0x32
 8005512:	4a08      	ldr	r2, [pc, #32]	; (8005534 <UART_SetConfig+0x2d4>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	f003 0207 	and.w	r2, r3, #7
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4422      	add	r2, r4
 8005526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005528:	e106      	b.n	8005738 <UART_SetConfig+0x4d8>
 800552a:	bf00      	nop
 800552c:	40011000 	.word	0x40011000
 8005530:	40011400 	.word	0x40011400
 8005534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005542:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800554a:	4642      	mov	r2, r8
 800554c:	464b      	mov	r3, r9
 800554e:	1891      	adds	r1, r2, r2
 8005550:	6239      	str	r1, [r7, #32]
 8005552:	415b      	adcs	r3, r3
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800555a:	4641      	mov	r1, r8
 800555c:	1854      	adds	r4, r2, r1
 800555e:	4649      	mov	r1, r9
 8005560:	eb43 0501 	adc.w	r5, r3, r1
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	00eb      	lsls	r3, r5, #3
 800556e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005572:	00e2      	lsls	r2, r4, #3
 8005574:	4614      	mov	r4, r2
 8005576:	461d      	mov	r5, r3
 8005578:	4643      	mov	r3, r8
 800557a:	18e3      	adds	r3, r4, r3
 800557c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005580:	464b      	mov	r3, r9
 8005582:	eb45 0303 	adc.w	r3, r5, r3
 8005586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005596:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055a6:	4629      	mov	r1, r5
 80055a8:	008b      	lsls	r3, r1, #2
 80055aa:	4621      	mov	r1, r4
 80055ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b0:	4621      	mov	r1, r4
 80055b2:	008a      	lsls	r2, r1, #2
 80055b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055b8:	f7fb fadc 	bl	8000b74 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4b60      	ldr	r3, [pc, #384]	; (8005744 <UART_SetConfig+0x4e4>)
 80055c2:	fba3 2302 	umull	r2, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	011c      	lsls	r4, r3, #4
 80055ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	1891      	adds	r1, r2, r2
 80055e2:	61b9      	str	r1, [r7, #24]
 80055e4:	415b      	adcs	r3, r3
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ec:	4641      	mov	r1, r8
 80055ee:	1851      	adds	r1, r2, r1
 80055f0:	6139      	str	r1, [r7, #16]
 80055f2:	4649      	mov	r1, r9
 80055f4:	414b      	adcs	r3, r1
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005604:	4659      	mov	r1, fp
 8005606:	00cb      	lsls	r3, r1, #3
 8005608:	4651      	mov	r1, sl
 800560a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800560e:	4651      	mov	r1, sl
 8005610:	00ca      	lsls	r2, r1, #3
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	4603      	mov	r3, r0
 8005618:	4642      	mov	r2, r8
 800561a:	189b      	adds	r3, r3, r2
 800561c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005620:	464b      	mov	r3, r9
 8005622:	460a      	mov	r2, r1
 8005624:	eb42 0303 	adc.w	r3, r2, r3
 8005628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	67bb      	str	r3, [r7, #120]	; 0x78
 8005636:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005644:	4649      	mov	r1, r9
 8005646:	008b      	lsls	r3, r1, #2
 8005648:	4641      	mov	r1, r8
 800564a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800564e:	4641      	mov	r1, r8
 8005650:	008a      	lsls	r2, r1, #2
 8005652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005656:	f7fb fa8d 	bl	8000b74 <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4611      	mov	r1, r2
 8005660:	4b38      	ldr	r3, [pc, #224]	; (8005744 <UART_SetConfig+0x4e4>)
 8005662:	fba3 2301 	umull	r2, r3, r3, r1
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	2264      	movs	r2, #100	; 0x64
 800566a:	fb02 f303 	mul.w	r3, r2, r3
 800566e:	1acb      	subs	r3, r1, r3
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	3332      	adds	r3, #50	; 0x32
 8005674:	4a33      	ldr	r2, [pc, #204]	; (8005744 <UART_SetConfig+0x4e4>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005680:	441c      	add	r4, r3
 8005682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005686:	2200      	movs	r2, #0
 8005688:	673b      	str	r3, [r7, #112]	; 0x70
 800568a:	677a      	str	r2, [r7, #116]	; 0x74
 800568c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005690:	4642      	mov	r2, r8
 8005692:	464b      	mov	r3, r9
 8005694:	1891      	adds	r1, r2, r2
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	415b      	adcs	r3, r3
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a0:	4641      	mov	r1, r8
 80056a2:	1851      	adds	r1, r2, r1
 80056a4:	6039      	str	r1, [r7, #0]
 80056a6:	4649      	mov	r1, r9
 80056a8:	414b      	adcs	r3, r1
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056b8:	4659      	mov	r1, fp
 80056ba:	00cb      	lsls	r3, r1, #3
 80056bc:	4651      	mov	r1, sl
 80056be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c2:	4651      	mov	r1, sl
 80056c4:	00ca      	lsls	r2, r1, #3
 80056c6:	4610      	mov	r0, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	4642      	mov	r2, r8
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80056d2:	464b      	mov	r3, r9
 80056d4:	460a      	mov	r2, r1
 80056d6:	eb42 0303 	adc.w	r3, r2, r3
 80056da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	663b      	str	r3, [r7, #96]	; 0x60
 80056e6:	667a      	str	r2, [r7, #100]	; 0x64
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056f4:	4649      	mov	r1, r9
 80056f6:	008b      	lsls	r3, r1, #2
 80056f8:	4641      	mov	r1, r8
 80056fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fe:	4641      	mov	r1, r8
 8005700:	008a      	lsls	r2, r1, #2
 8005702:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005706:	f7fb fa35 	bl	8000b74 <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <UART_SetConfig+0x4e4>)
 8005710:	fba3 1302 	umull	r1, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2164      	movs	r1, #100	; 0x64
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	3332      	adds	r3, #50	; 0x32
 8005722:	4a08      	ldr	r2, [pc, #32]	; (8005744 <UART_SetConfig+0x4e4>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 020f 	and.w	r2, r3, #15
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4422      	add	r2, r4
 8005736:	609a      	str	r2, [r3, #8]
}
 8005738:	bf00      	nop
 800573a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800573e:	46bd      	mov	sp, r7
 8005740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005744:	51eb851f 	.word	0x51eb851f

08005748 <memset>:
 8005748:	4402      	add	r2, r0
 800574a:	4603      	mov	r3, r0
 800574c:	4293      	cmp	r3, r2
 800574e:	d100      	bne.n	8005752 <memset+0xa>
 8005750:	4770      	bx	lr
 8005752:	f803 1b01 	strb.w	r1, [r3], #1
 8005756:	e7f9      	b.n	800574c <memset+0x4>

08005758 <__libc_init_array>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	4d0d      	ldr	r5, [pc, #52]	; (8005790 <__libc_init_array+0x38>)
 800575c:	4c0d      	ldr	r4, [pc, #52]	; (8005794 <__libc_init_array+0x3c>)
 800575e:	1b64      	subs	r4, r4, r5
 8005760:	10a4      	asrs	r4, r4, #2
 8005762:	2600      	movs	r6, #0
 8005764:	42a6      	cmp	r6, r4
 8005766:	d109      	bne.n	800577c <__libc_init_array+0x24>
 8005768:	4d0b      	ldr	r5, [pc, #44]	; (8005798 <__libc_init_array+0x40>)
 800576a:	4c0c      	ldr	r4, [pc, #48]	; (800579c <__libc_init_array+0x44>)
 800576c:	f001 f8ac 	bl	80068c8 <_init>
 8005770:	1b64      	subs	r4, r4, r5
 8005772:	10a4      	asrs	r4, r4, #2
 8005774:	2600      	movs	r6, #0
 8005776:	42a6      	cmp	r6, r4
 8005778:	d105      	bne.n	8005786 <__libc_init_array+0x2e>
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005780:	4798      	blx	r3
 8005782:	3601      	adds	r6, #1
 8005784:	e7ee      	b.n	8005764 <__libc_init_array+0xc>
 8005786:	f855 3b04 	ldr.w	r3, [r5], #4
 800578a:	4798      	blx	r3
 800578c:	3601      	adds	r6, #1
 800578e:	e7f2      	b.n	8005776 <__libc_init_array+0x1e>
 8005790:	08006ae0 	.word	0x08006ae0
 8005794:	08006ae0 	.word	0x08006ae0
 8005798:	08006ae0 	.word	0x08006ae0
 800579c:	08006ae4 	.word	0x08006ae4

080057a0 <cos>:
 80057a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057a2:	ec53 2b10 	vmov	r2, r3, d0
 80057a6:	4826      	ldr	r0, [pc, #152]	; (8005840 <cos+0xa0>)
 80057a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057ac:	4281      	cmp	r1, r0
 80057ae:	dc06      	bgt.n	80057be <cos+0x1e>
 80057b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005838 <cos+0x98>
 80057b4:	b005      	add	sp, #20
 80057b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80057ba:	f000 b89d 	b.w	80058f8 <__kernel_cos>
 80057be:	4821      	ldr	r0, [pc, #132]	; (8005844 <cos+0xa4>)
 80057c0:	4281      	cmp	r1, r0
 80057c2:	dd09      	ble.n	80057d8 <cos+0x38>
 80057c4:	ee10 0a10 	vmov	r0, s0
 80057c8:	4619      	mov	r1, r3
 80057ca:	f7fa fd09 	bl	80001e0 <__aeabi_dsub>
 80057ce:	ec41 0b10 	vmov	d0, r0, r1
 80057d2:	b005      	add	sp, #20
 80057d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80057d8:	4668      	mov	r0, sp
 80057da:	f000 fa15 	bl	8005c08 <__ieee754_rem_pio2>
 80057de:	f000 0003 	and.w	r0, r0, #3
 80057e2:	2801      	cmp	r0, #1
 80057e4:	d00b      	beq.n	80057fe <cos+0x5e>
 80057e6:	2802      	cmp	r0, #2
 80057e8:	d016      	beq.n	8005818 <cos+0x78>
 80057ea:	b9e0      	cbnz	r0, 8005826 <cos+0x86>
 80057ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80057f0:	ed9d 0b00 	vldr	d0, [sp]
 80057f4:	f000 f880 	bl	80058f8 <__kernel_cos>
 80057f8:	ec51 0b10 	vmov	r0, r1, d0
 80057fc:	e7e7      	b.n	80057ce <cos+0x2e>
 80057fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005802:	ed9d 0b00 	vldr	d0, [sp]
 8005806:	f000 f93f 	bl	8005a88 <__kernel_sin>
 800580a:	ec53 2b10 	vmov	r2, r3, d0
 800580e:	ee10 0a10 	vmov	r0, s0
 8005812:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005816:	e7da      	b.n	80057ce <cos+0x2e>
 8005818:	ed9d 1b02 	vldr	d1, [sp, #8]
 800581c:	ed9d 0b00 	vldr	d0, [sp]
 8005820:	f000 f86a 	bl	80058f8 <__kernel_cos>
 8005824:	e7f1      	b.n	800580a <cos+0x6a>
 8005826:	ed9d 1b02 	vldr	d1, [sp, #8]
 800582a:	ed9d 0b00 	vldr	d0, [sp]
 800582e:	2001      	movs	r0, #1
 8005830:	f000 f92a 	bl	8005a88 <__kernel_sin>
 8005834:	e7e0      	b.n	80057f8 <cos+0x58>
 8005836:	bf00      	nop
	...
 8005840:	3fe921fb 	.word	0x3fe921fb
 8005844:	7fefffff 	.word	0x7fefffff

08005848 <sin>:
 8005848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800584a:	ec53 2b10 	vmov	r2, r3, d0
 800584e:	4828      	ldr	r0, [pc, #160]	; (80058f0 <sin+0xa8>)
 8005850:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005854:	4281      	cmp	r1, r0
 8005856:	dc07      	bgt.n	8005868 <sin+0x20>
 8005858:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80058e8 <sin+0xa0>
 800585c:	2000      	movs	r0, #0
 800585e:	b005      	add	sp, #20
 8005860:	f85d eb04 	ldr.w	lr, [sp], #4
 8005864:	f000 b910 	b.w	8005a88 <__kernel_sin>
 8005868:	4822      	ldr	r0, [pc, #136]	; (80058f4 <sin+0xac>)
 800586a:	4281      	cmp	r1, r0
 800586c:	dd09      	ble.n	8005882 <sin+0x3a>
 800586e:	ee10 0a10 	vmov	r0, s0
 8005872:	4619      	mov	r1, r3
 8005874:	f7fa fcb4 	bl	80001e0 <__aeabi_dsub>
 8005878:	ec41 0b10 	vmov	d0, r0, r1
 800587c:	b005      	add	sp, #20
 800587e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005882:	4668      	mov	r0, sp
 8005884:	f000 f9c0 	bl	8005c08 <__ieee754_rem_pio2>
 8005888:	f000 0003 	and.w	r0, r0, #3
 800588c:	2801      	cmp	r0, #1
 800588e:	d00c      	beq.n	80058aa <sin+0x62>
 8005890:	2802      	cmp	r0, #2
 8005892:	d011      	beq.n	80058b8 <sin+0x70>
 8005894:	b9f0      	cbnz	r0, 80058d4 <sin+0x8c>
 8005896:	ed9d 1b02 	vldr	d1, [sp, #8]
 800589a:	ed9d 0b00 	vldr	d0, [sp]
 800589e:	2001      	movs	r0, #1
 80058a0:	f000 f8f2 	bl	8005a88 <__kernel_sin>
 80058a4:	ec51 0b10 	vmov	r0, r1, d0
 80058a8:	e7e6      	b.n	8005878 <sin+0x30>
 80058aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058ae:	ed9d 0b00 	vldr	d0, [sp]
 80058b2:	f000 f821 	bl	80058f8 <__kernel_cos>
 80058b6:	e7f5      	b.n	80058a4 <sin+0x5c>
 80058b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058bc:	ed9d 0b00 	vldr	d0, [sp]
 80058c0:	2001      	movs	r0, #1
 80058c2:	f000 f8e1 	bl	8005a88 <__kernel_sin>
 80058c6:	ec53 2b10 	vmov	r2, r3, d0
 80058ca:	ee10 0a10 	vmov	r0, s0
 80058ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80058d2:	e7d1      	b.n	8005878 <sin+0x30>
 80058d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058d8:	ed9d 0b00 	vldr	d0, [sp]
 80058dc:	f000 f80c 	bl	80058f8 <__kernel_cos>
 80058e0:	e7f1      	b.n	80058c6 <sin+0x7e>
 80058e2:	bf00      	nop
 80058e4:	f3af 8000 	nop.w
	...
 80058f0:	3fe921fb 	.word	0x3fe921fb
 80058f4:	7fefffff 	.word	0x7fefffff

080058f8 <__kernel_cos>:
 80058f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	ec57 6b10 	vmov	r6, r7, d0
 8005900:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005904:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005908:	ed8d 1b00 	vstr	d1, [sp]
 800590c:	da07      	bge.n	800591e <__kernel_cos+0x26>
 800590e:	ee10 0a10 	vmov	r0, s0
 8005912:	4639      	mov	r1, r7
 8005914:	f7fb f8b6 	bl	8000a84 <__aeabi_d2iz>
 8005918:	2800      	cmp	r0, #0
 800591a:	f000 8088 	beq.w	8005a2e <__kernel_cos+0x136>
 800591e:	4632      	mov	r2, r6
 8005920:	463b      	mov	r3, r7
 8005922:	4630      	mov	r0, r6
 8005924:	4639      	mov	r1, r7
 8005926:	f7fa fe13 	bl	8000550 <__aeabi_dmul>
 800592a:	4b51      	ldr	r3, [pc, #324]	; (8005a70 <__kernel_cos+0x178>)
 800592c:	2200      	movs	r2, #0
 800592e:	4604      	mov	r4, r0
 8005930:	460d      	mov	r5, r1
 8005932:	f7fa fe0d 	bl	8000550 <__aeabi_dmul>
 8005936:	a340      	add	r3, pc, #256	; (adr r3, 8005a38 <__kernel_cos+0x140>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	4682      	mov	sl, r0
 800593e:	468b      	mov	fp, r1
 8005940:	4620      	mov	r0, r4
 8005942:	4629      	mov	r1, r5
 8005944:	f7fa fe04 	bl	8000550 <__aeabi_dmul>
 8005948:	a33d      	add	r3, pc, #244	; (adr r3, 8005a40 <__kernel_cos+0x148>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fa fc49 	bl	80001e4 <__adddf3>
 8005952:	4622      	mov	r2, r4
 8005954:	462b      	mov	r3, r5
 8005956:	f7fa fdfb 	bl	8000550 <__aeabi_dmul>
 800595a:	a33b      	add	r3, pc, #236	; (adr r3, 8005a48 <__kernel_cos+0x150>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f7fa fc3e 	bl	80001e0 <__aeabi_dsub>
 8005964:	4622      	mov	r2, r4
 8005966:	462b      	mov	r3, r5
 8005968:	f7fa fdf2 	bl	8000550 <__aeabi_dmul>
 800596c:	a338      	add	r3, pc, #224	; (adr r3, 8005a50 <__kernel_cos+0x158>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fc37 	bl	80001e4 <__adddf3>
 8005976:	4622      	mov	r2, r4
 8005978:	462b      	mov	r3, r5
 800597a:	f7fa fde9 	bl	8000550 <__aeabi_dmul>
 800597e:	a336      	add	r3, pc, #216	; (adr r3, 8005a58 <__kernel_cos+0x160>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fc2c 	bl	80001e0 <__aeabi_dsub>
 8005988:	4622      	mov	r2, r4
 800598a:	462b      	mov	r3, r5
 800598c:	f7fa fde0 	bl	8000550 <__aeabi_dmul>
 8005990:	a333      	add	r3, pc, #204	; (adr r3, 8005a60 <__kernel_cos+0x168>)
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fc25 	bl	80001e4 <__adddf3>
 800599a:	4622      	mov	r2, r4
 800599c:	462b      	mov	r3, r5
 800599e:	f7fa fdd7 	bl	8000550 <__aeabi_dmul>
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	f7fa fdd3 	bl	8000550 <__aeabi_dmul>
 80059aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059ae:	4604      	mov	r4, r0
 80059b0:	460d      	mov	r5, r1
 80059b2:	4630      	mov	r0, r6
 80059b4:	4639      	mov	r1, r7
 80059b6:	f7fa fdcb 	bl	8000550 <__aeabi_dmul>
 80059ba:	460b      	mov	r3, r1
 80059bc:	4602      	mov	r2, r0
 80059be:	4629      	mov	r1, r5
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7fa fc0d 	bl	80001e0 <__aeabi_dsub>
 80059c6:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <__kernel_cos+0x17c>)
 80059c8:	4598      	cmp	r8, r3
 80059ca:	4606      	mov	r6, r0
 80059cc:	460f      	mov	r7, r1
 80059ce:	dc10      	bgt.n	80059f2 <__kernel_cos+0xfa>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4650      	mov	r0, sl
 80059d6:	4659      	mov	r1, fp
 80059d8:	f7fa fc02 	bl	80001e0 <__aeabi_dsub>
 80059dc:	460b      	mov	r3, r1
 80059de:	4926      	ldr	r1, [pc, #152]	; (8005a78 <__kernel_cos+0x180>)
 80059e0:	4602      	mov	r2, r0
 80059e2:	2000      	movs	r0, #0
 80059e4:	f7fa fbfc 	bl	80001e0 <__aeabi_dsub>
 80059e8:	ec41 0b10 	vmov	d0, r0, r1
 80059ec:	b003      	add	sp, #12
 80059ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f2:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <__kernel_cos+0x184>)
 80059f4:	4920      	ldr	r1, [pc, #128]	; (8005a78 <__kernel_cos+0x180>)
 80059f6:	4598      	cmp	r8, r3
 80059f8:	bfcc      	ite	gt
 80059fa:	4d21      	ldrgt	r5, [pc, #132]	; (8005a80 <__kernel_cos+0x188>)
 80059fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005a00:	2400      	movs	r4, #0
 8005a02:	4622      	mov	r2, r4
 8005a04:	462b      	mov	r3, r5
 8005a06:	2000      	movs	r0, #0
 8005a08:	f7fa fbea 	bl	80001e0 <__aeabi_dsub>
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	4680      	mov	r8, r0
 8005a10:	4689      	mov	r9, r1
 8005a12:	462b      	mov	r3, r5
 8005a14:	4650      	mov	r0, sl
 8005a16:	4659      	mov	r1, fp
 8005a18:	f7fa fbe2 	bl	80001e0 <__aeabi_dsub>
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	463b      	mov	r3, r7
 8005a20:	f7fa fbde 	bl	80001e0 <__aeabi_dsub>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4640      	mov	r0, r8
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	e7da      	b.n	80059e4 <__kernel_cos+0xec>
 8005a2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005a68 <__kernel_cos+0x170>
 8005a32:	e7db      	b.n	80059ec <__kernel_cos+0xf4>
 8005a34:	f3af 8000 	nop.w
 8005a38:	be8838d4 	.word	0xbe8838d4
 8005a3c:	bda8fae9 	.word	0xbda8fae9
 8005a40:	bdb4b1c4 	.word	0xbdb4b1c4
 8005a44:	3e21ee9e 	.word	0x3e21ee9e
 8005a48:	809c52ad 	.word	0x809c52ad
 8005a4c:	3e927e4f 	.word	0x3e927e4f
 8005a50:	19cb1590 	.word	0x19cb1590
 8005a54:	3efa01a0 	.word	0x3efa01a0
 8005a58:	16c15177 	.word	0x16c15177
 8005a5c:	3f56c16c 	.word	0x3f56c16c
 8005a60:	5555554c 	.word	0x5555554c
 8005a64:	3fa55555 	.word	0x3fa55555
 8005a68:	00000000 	.word	0x00000000
 8005a6c:	3ff00000 	.word	0x3ff00000
 8005a70:	3fe00000 	.word	0x3fe00000
 8005a74:	3fd33332 	.word	0x3fd33332
 8005a78:	3ff00000 	.word	0x3ff00000
 8005a7c:	3fe90000 	.word	0x3fe90000
 8005a80:	3fd20000 	.word	0x3fd20000
 8005a84:	00000000 	.word	0x00000000

08005a88 <__kernel_sin>:
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	ed2d 8b04 	vpush	{d8-d9}
 8005a90:	eeb0 8a41 	vmov.f32	s16, s2
 8005a94:	eef0 8a61 	vmov.f32	s17, s3
 8005a98:	ec55 4b10 	vmov	r4, r5, d0
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005aa2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005aa6:	9001      	str	r0, [sp, #4]
 8005aa8:	da06      	bge.n	8005ab8 <__kernel_sin+0x30>
 8005aaa:	ee10 0a10 	vmov	r0, s0
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7fa ffe8 	bl	8000a84 <__aeabi_d2iz>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d051      	beq.n	8005b5c <__kernel_sin+0xd4>
 8005ab8:	4622      	mov	r2, r4
 8005aba:	462b      	mov	r3, r5
 8005abc:	4620      	mov	r0, r4
 8005abe:	4629      	mov	r1, r5
 8005ac0:	f7fa fd46 	bl	8000550 <__aeabi_dmul>
 8005ac4:	4682      	mov	sl, r0
 8005ac6:	468b      	mov	fp, r1
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4620      	mov	r0, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	f7fa fd3e 	bl	8000550 <__aeabi_dmul>
 8005ad4:	a341      	add	r3, pc, #260	; (adr r3, 8005bdc <__kernel_sin+0x154>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	4680      	mov	r8, r0
 8005adc:	4689      	mov	r9, r1
 8005ade:	4650      	mov	r0, sl
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	f7fa fd35 	bl	8000550 <__aeabi_dmul>
 8005ae6:	a33f      	add	r3, pc, #252	; (adr r3, 8005be4 <__kernel_sin+0x15c>)
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f7fa fb78 	bl	80001e0 <__aeabi_dsub>
 8005af0:	4652      	mov	r2, sl
 8005af2:	465b      	mov	r3, fp
 8005af4:	f7fa fd2c 	bl	8000550 <__aeabi_dmul>
 8005af8:	a33c      	add	r3, pc, #240	; (adr r3, 8005bec <__kernel_sin+0x164>)
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f7fa fb71 	bl	80001e4 <__adddf3>
 8005b02:	4652      	mov	r2, sl
 8005b04:	465b      	mov	r3, fp
 8005b06:	f7fa fd23 	bl	8000550 <__aeabi_dmul>
 8005b0a:	a33a      	add	r3, pc, #232	; (adr r3, 8005bf4 <__kernel_sin+0x16c>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f7fa fb66 	bl	80001e0 <__aeabi_dsub>
 8005b14:	4652      	mov	r2, sl
 8005b16:	465b      	mov	r3, fp
 8005b18:	f7fa fd1a 	bl	8000550 <__aeabi_dmul>
 8005b1c:	a337      	add	r3, pc, #220	; (adr r3, 8005bfc <__kernel_sin+0x174>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fb5f 	bl	80001e4 <__adddf3>
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	4606      	mov	r6, r0
 8005b2a:	460f      	mov	r7, r1
 8005b2c:	b9eb      	cbnz	r3, 8005b6a <__kernel_sin+0xe2>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4650      	mov	r0, sl
 8005b34:	4659      	mov	r1, fp
 8005b36:	f7fa fd0b 	bl	8000550 <__aeabi_dmul>
 8005b3a:	a325      	add	r3, pc, #148	; (adr r3, 8005bd0 <__kernel_sin+0x148>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f7fa fb4e 	bl	80001e0 <__aeabi_dsub>
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	f7fa fd02 	bl	8000550 <__aeabi_dmul>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4620      	mov	r0, r4
 8005b52:	4629      	mov	r1, r5
 8005b54:	f7fa fb46 	bl	80001e4 <__adddf3>
 8005b58:	4604      	mov	r4, r0
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	ec45 4b10 	vmov	d0, r4, r5
 8005b60:	b003      	add	sp, #12
 8005b62:	ecbd 8b04 	vpop	{d8-d9}
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <__kernel_sin+0x150>)
 8005b6c:	ec51 0b18 	vmov	r0, r1, d8
 8005b70:	2200      	movs	r2, #0
 8005b72:	f7fa fced 	bl	8000550 <__aeabi_dmul>
 8005b76:	4632      	mov	r2, r6
 8005b78:	ec41 0b19 	vmov	d9, r0, r1
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	f7fa fce5 	bl	8000550 <__aeabi_dmul>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	ec51 0b19 	vmov	r0, r1, d9
 8005b8e:	f7fa fb27 	bl	80001e0 <__aeabi_dsub>
 8005b92:	4652      	mov	r2, sl
 8005b94:	465b      	mov	r3, fp
 8005b96:	f7fa fcdb 	bl	8000550 <__aeabi_dmul>
 8005b9a:	ec53 2b18 	vmov	r2, r3, d8
 8005b9e:	f7fa fb1f 	bl	80001e0 <__aeabi_dsub>
 8005ba2:	a30b      	add	r3, pc, #44	; (adr r3, 8005bd0 <__kernel_sin+0x148>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	4640      	mov	r0, r8
 8005bae:	4649      	mov	r1, r9
 8005bb0:	f7fa fcce 	bl	8000550 <__aeabi_dmul>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4630      	mov	r0, r6
 8005bba:	4639      	mov	r1, r7
 8005bbc:	f7fa fb12 	bl	80001e4 <__adddf3>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	f7fa fb0a 	bl	80001e0 <__aeabi_dsub>
 8005bcc:	e7c4      	b.n	8005b58 <__kernel_sin+0xd0>
 8005bce:	bf00      	nop
 8005bd0:	55555549 	.word	0x55555549
 8005bd4:	3fc55555 	.word	0x3fc55555
 8005bd8:	3fe00000 	.word	0x3fe00000
 8005bdc:	5acfd57c 	.word	0x5acfd57c
 8005be0:	3de5d93a 	.word	0x3de5d93a
 8005be4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005be8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005bec:	57b1fe7d 	.word	0x57b1fe7d
 8005bf0:	3ec71de3 	.word	0x3ec71de3
 8005bf4:	19c161d5 	.word	0x19c161d5
 8005bf8:	3f2a01a0 	.word	0x3f2a01a0
 8005bfc:	1110f8a6 	.word	0x1110f8a6
 8005c00:	3f811111 	.word	0x3f811111
 8005c04:	00000000 	.word	0x00000000

08005c08 <__ieee754_rem_pio2>:
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	ed2d 8b02 	vpush	{d8}
 8005c10:	ec55 4b10 	vmov	r4, r5, d0
 8005c14:	4bca      	ldr	r3, [pc, #808]	; (8005f40 <__ieee754_rem_pio2+0x338>)
 8005c16:	b08b      	sub	sp, #44	; 0x2c
 8005c18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005c1c:	4598      	cmp	r8, r3
 8005c1e:	4682      	mov	sl, r0
 8005c20:	9502      	str	r5, [sp, #8]
 8005c22:	dc08      	bgt.n	8005c36 <__ieee754_rem_pio2+0x2e>
 8005c24:	2200      	movs	r2, #0
 8005c26:	2300      	movs	r3, #0
 8005c28:	ed80 0b00 	vstr	d0, [r0]
 8005c2c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005c30:	f04f 0b00 	mov.w	fp, #0
 8005c34:	e028      	b.n	8005c88 <__ieee754_rem_pio2+0x80>
 8005c36:	4bc3      	ldr	r3, [pc, #780]	; (8005f44 <__ieee754_rem_pio2+0x33c>)
 8005c38:	4598      	cmp	r8, r3
 8005c3a:	dc78      	bgt.n	8005d2e <__ieee754_rem_pio2+0x126>
 8005c3c:	9b02      	ldr	r3, [sp, #8]
 8005c3e:	4ec2      	ldr	r6, [pc, #776]	; (8005f48 <__ieee754_rem_pio2+0x340>)
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	ee10 0a10 	vmov	r0, s0
 8005c46:	a3b0      	add	r3, pc, #704	; (adr r3, 8005f08 <__ieee754_rem_pio2+0x300>)
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	dd39      	ble.n	8005cc4 <__ieee754_rem_pio2+0xbc>
 8005c50:	f7fa fac6 	bl	80001e0 <__aeabi_dsub>
 8005c54:	45b0      	cmp	r8, r6
 8005c56:	4604      	mov	r4, r0
 8005c58:	460d      	mov	r5, r1
 8005c5a:	d01b      	beq.n	8005c94 <__ieee754_rem_pio2+0x8c>
 8005c5c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005f10 <__ieee754_rem_pio2+0x308>)
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f7fa fabd 	bl	80001e0 <__aeabi_dsub>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	e9ca 2300 	strd	r2, r3, [sl]
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7fa fab5 	bl	80001e0 <__aeabi_dsub>
 8005c76:	a3a6      	add	r3, pc, #664	; (adr r3, 8005f10 <__ieee754_rem_pio2+0x308>)
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f7fa fab0 	bl	80001e0 <__aeabi_dsub>
 8005c80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c84:	f04f 0b01 	mov.w	fp, #1
 8005c88:	4658      	mov	r0, fp
 8005c8a:	b00b      	add	sp, #44	; 0x2c
 8005c8c:	ecbd 8b02 	vpop	{d8}
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	a3a0      	add	r3, pc, #640	; (adr r3, 8005f18 <__ieee754_rem_pio2+0x310>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f7fa faa1 	bl	80001e0 <__aeabi_dsub>
 8005c9e:	a3a0      	add	r3, pc, #640	; (adr r3, 8005f20 <__ieee754_rem_pio2+0x318>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	460d      	mov	r5, r1
 8005ca8:	f7fa fa9a 	bl	80001e0 <__aeabi_dsub>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	e9ca 2300 	strd	r2, r3, [sl]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	f7fa fa92 	bl	80001e0 <__aeabi_dsub>
 8005cbc:	a398      	add	r3, pc, #608	; (adr r3, 8005f20 <__ieee754_rem_pio2+0x318>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	e7db      	b.n	8005c7c <__ieee754_rem_pio2+0x74>
 8005cc4:	f7fa fa8e 	bl	80001e4 <__adddf3>
 8005cc8:	45b0      	cmp	r8, r6
 8005cca:	4604      	mov	r4, r0
 8005ccc:	460d      	mov	r5, r1
 8005cce:	d016      	beq.n	8005cfe <__ieee754_rem_pio2+0xf6>
 8005cd0:	a38f      	add	r3, pc, #572	; (adr r3, 8005f10 <__ieee754_rem_pio2+0x308>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f7fa fa85 	bl	80001e4 <__adddf3>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	e9ca 2300 	strd	r2, r3, [sl]
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	f7fa fa7b 	bl	80001e0 <__aeabi_dsub>
 8005cea:	a389      	add	r3, pc, #548	; (adr r3, 8005f10 <__ieee754_rem_pio2+0x308>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fa78 	bl	80001e4 <__adddf3>
 8005cf4:	f04f 3bff 	mov.w	fp, #4294967295
 8005cf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005cfc:	e7c4      	b.n	8005c88 <__ieee754_rem_pio2+0x80>
 8005cfe:	a386      	add	r3, pc, #536	; (adr r3, 8005f18 <__ieee754_rem_pio2+0x310>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fa6e 	bl	80001e4 <__adddf3>
 8005d08:	a385      	add	r3, pc, #532	; (adr r3, 8005f20 <__ieee754_rem_pio2+0x318>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	4604      	mov	r4, r0
 8005d10:	460d      	mov	r5, r1
 8005d12:	f7fa fa67 	bl	80001e4 <__adddf3>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	e9ca 2300 	strd	r2, r3, [sl]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	4629      	mov	r1, r5
 8005d22:	f7fa fa5d 	bl	80001e0 <__aeabi_dsub>
 8005d26:	a37e      	add	r3, pc, #504	; (adr r3, 8005f20 <__ieee754_rem_pio2+0x318>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	e7e0      	b.n	8005cf0 <__ieee754_rem_pio2+0xe8>
 8005d2e:	4b87      	ldr	r3, [pc, #540]	; (8005f4c <__ieee754_rem_pio2+0x344>)
 8005d30:	4598      	cmp	r8, r3
 8005d32:	f300 80d8 	bgt.w	8005ee6 <__ieee754_rem_pio2+0x2de>
 8005d36:	f000 f96d 	bl	8006014 <fabs>
 8005d3a:	ec55 4b10 	vmov	r4, r5, d0
 8005d3e:	ee10 0a10 	vmov	r0, s0
 8005d42:	a379      	add	r3, pc, #484	; (adr r3, 8005f28 <__ieee754_rem_pio2+0x320>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7fa fc01 	bl	8000550 <__aeabi_dmul>
 8005d4e:	4b80      	ldr	r3, [pc, #512]	; (8005f50 <__ieee754_rem_pio2+0x348>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	f7fa fa47 	bl	80001e4 <__adddf3>
 8005d56:	f7fa fe95 	bl	8000a84 <__aeabi_d2iz>
 8005d5a:	4683      	mov	fp, r0
 8005d5c:	f7fa fb8e 	bl	800047c <__aeabi_i2d>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	ec43 2b18 	vmov	d8, r2, r3
 8005d68:	a367      	add	r3, pc, #412	; (adr r3, 8005f08 <__ieee754_rem_pio2+0x300>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fbef 	bl	8000550 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fa31 	bl	80001e0 <__aeabi_dsub>
 8005d7e:	a364      	add	r3, pc, #400	; (adr r3, 8005f10 <__ieee754_rem_pio2+0x308>)
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	ec51 0b18 	vmov	r0, r1, d8
 8005d8c:	f7fa fbe0 	bl	8000550 <__aeabi_dmul>
 8005d90:	f1bb 0f1f 	cmp.w	fp, #31
 8005d94:	4604      	mov	r4, r0
 8005d96:	460d      	mov	r5, r1
 8005d98:	dc0d      	bgt.n	8005db6 <__ieee754_rem_pio2+0x1ae>
 8005d9a:	4b6e      	ldr	r3, [pc, #440]	; (8005f54 <__ieee754_rem_pio2+0x34c>)
 8005d9c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da4:	4543      	cmp	r3, r8
 8005da6:	d006      	beq.n	8005db6 <__ieee754_rem_pio2+0x1ae>
 8005da8:	4622      	mov	r2, r4
 8005daa:	462b      	mov	r3, r5
 8005dac:	4630      	mov	r0, r6
 8005dae:	4639      	mov	r1, r7
 8005db0:	f7fa fa16 	bl	80001e0 <__aeabi_dsub>
 8005db4:	e00e      	b.n	8005dd4 <__ieee754_rem_pio2+0x1cc>
 8005db6:	462b      	mov	r3, r5
 8005db8:	4622      	mov	r2, r4
 8005dba:	4630      	mov	r0, r6
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	f7fa fa0f 	bl	80001e0 <__aeabi_dsub>
 8005dc2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005dc6:	9303      	str	r3, [sp, #12]
 8005dc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005dcc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	dc02      	bgt.n	8005dda <__ieee754_rem_pio2+0x1d2>
 8005dd4:	e9ca 0100 	strd	r0, r1, [sl]
 8005dd8:	e039      	b.n	8005e4e <__ieee754_rem_pio2+0x246>
 8005dda:	a34f      	add	r3, pc, #316	; (adr r3, 8005f18 <__ieee754_rem_pio2+0x310>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	ec51 0b18 	vmov	r0, r1, d8
 8005de4:	f7fa fbb4 	bl	8000550 <__aeabi_dmul>
 8005de8:	4604      	mov	r4, r0
 8005dea:	460d      	mov	r5, r1
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	f7fa f9f4 	bl	80001e0 <__aeabi_dsub>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	4689      	mov	r9, r1
 8005e00:	4630      	mov	r0, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	f7fa f9ec 	bl	80001e0 <__aeabi_dsub>
 8005e08:	4622      	mov	r2, r4
 8005e0a:	462b      	mov	r3, r5
 8005e0c:	f7fa f9e8 	bl	80001e0 <__aeabi_dsub>
 8005e10:	a343      	add	r3, pc, #268	; (adr r3, 8005f20 <__ieee754_rem_pio2+0x318>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	4604      	mov	r4, r0
 8005e18:	460d      	mov	r5, r1
 8005e1a:	ec51 0b18 	vmov	r0, r1, d8
 8005e1e:	f7fa fb97 	bl	8000550 <__aeabi_dmul>
 8005e22:	4622      	mov	r2, r4
 8005e24:	462b      	mov	r3, r5
 8005e26:	f7fa f9db 	bl	80001e0 <__aeabi_dsub>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	4640      	mov	r0, r8
 8005e34:	4649      	mov	r1, r9
 8005e36:	f7fa f9d3 	bl	80001e0 <__aeabi_dsub>
 8005e3a:	9a03      	ldr	r2, [sp, #12]
 8005e3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b31      	cmp	r3, #49	; 0x31
 8005e44:	dc24      	bgt.n	8005e90 <__ieee754_rem_pio2+0x288>
 8005e46:	e9ca 0100 	strd	r0, r1, [sl]
 8005e4a:	4646      	mov	r6, r8
 8005e4c:	464f      	mov	r7, r9
 8005e4e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005e52:	4630      	mov	r0, r6
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	4639      	mov	r1, r7
 8005e5a:	f7fa f9c1 	bl	80001e0 <__aeabi_dsub>
 8005e5e:	462b      	mov	r3, r5
 8005e60:	4622      	mov	r2, r4
 8005e62:	f7fa f9bd 	bl	80001e0 <__aeabi_dsub>
 8005e66:	9b02      	ldr	r3, [sp, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e6e:	f6bf af0b 	bge.w	8005c88 <__ieee754_rem_pio2+0x80>
 8005e72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e76:	f8ca 3004 	str.w	r3, [sl, #4]
 8005e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e7e:	f8ca 8000 	str.w	r8, [sl]
 8005e82:	f8ca 0008 	str.w	r0, [sl, #8]
 8005e86:	f8ca 300c 	str.w	r3, [sl, #12]
 8005e8a:	f1cb 0b00 	rsb	fp, fp, #0
 8005e8e:	e6fb      	b.n	8005c88 <__ieee754_rem_pio2+0x80>
 8005e90:	a327      	add	r3, pc, #156	; (adr r3, 8005f30 <__ieee754_rem_pio2+0x328>)
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	ec51 0b18 	vmov	r0, r1, d8
 8005e9a:	f7fa fb59 	bl	8000550 <__aeabi_dmul>
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	f7fa f999 	bl	80001e0 <__aeabi_dsub>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460f      	mov	r7, r1
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	4649      	mov	r1, r9
 8005eba:	f7fa f991 	bl	80001e0 <__aeabi_dsub>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	f7fa f98d 	bl	80001e0 <__aeabi_dsub>
 8005ec6:	a31c      	add	r3, pc, #112	; (adr r3, 8005f38 <__ieee754_rem_pio2+0x330>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	4604      	mov	r4, r0
 8005ece:	460d      	mov	r5, r1
 8005ed0:	ec51 0b18 	vmov	r0, r1, d8
 8005ed4:	f7fa fb3c 	bl	8000550 <__aeabi_dmul>
 8005ed8:	4622      	mov	r2, r4
 8005eda:	462b      	mov	r3, r5
 8005edc:	f7fa f980 	bl	80001e0 <__aeabi_dsub>
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	e760      	b.n	8005da8 <__ieee754_rem_pio2+0x1a0>
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <__ieee754_rem_pio2+0x350>)
 8005ee8:	4598      	cmp	r8, r3
 8005eea:	dd37      	ble.n	8005f5c <__ieee754_rem_pio2+0x354>
 8005eec:	ee10 2a10 	vmov	r2, s0
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f7fa f973 	bl	80001e0 <__aeabi_dsub>
 8005efa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005efe:	e9ca 0100 	strd	r0, r1, [sl]
 8005f02:	e695      	b.n	8005c30 <__ieee754_rem_pio2+0x28>
 8005f04:	f3af 8000 	nop.w
 8005f08:	54400000 	.word	0x54400000
 8005f0c:	3ff921fb 	.word	0x3ff921fb
 8005f10:	1a626331 	.word	0x1a626331
 8005f14:	3dd0b461 	.word	0x3dd0b461
 8005f18:	1a600000 	.word	0x1a600000
 8005f1c:	3dd0b461 	.word	0x3dd0b461
 8005f20:	2e037073 	.word	0x2e037073
 8005f24:	3ba3198a 	.word	0x3ba3198a
 8005f28:	6dc9c883 	.word	0x6dc9c883
 8005f2c:	3fe45f30 	.word	0x3fe45f30
 8005f30:	2e000000 	.word	0x2e000000
 8005f34:	3ba3198a 	.word	0x3ba3198a
 8005f38:	252049c1 	.word	0x252049c1
 8005f3c:	397b839a 	.word	0x397b839a
 8005f40:	3fe921fb 	.word	0x3fe921fb
 8005f44:	4002d97b 	.word	0x4002d97b
 8005f48:	3ff921fb 	.word	0x3ff921fb
 8005f4c:	413921fb 	.word	0x413921fb
 8005f50:	3fe00000 	.word	0x3fe00000
 8005f54:	08006900 	.word	0x08006900
 8005f58:	7fefffff 	.word	0x7fefffff
 8005f5c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005f60:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005f64:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005f68:	4620      	mov	r0, r4
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	f7fa fd8a 	bl	8000a84 <__aeabi_d2iz>
 8005f70:	f7fa fa84 	bl	800047c <__aeabi_i2d>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f80:	f7fa f92e 	bl	80001e0 <__aeabi_dsub>
 8005f84:	4b21      	ldr	r3, [pc, #132]	; (800600c <__ieee754_rem_pio2+0x404>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	f7fa fae2 	bl	8000550 <__aeabi_dmul>
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	4604      	mov	r4, r0
 8005f90:	f7fa fd78 	bl	8000a84 <__aeabi_d2iz>
 8005f94:	f7fa fa72 	bl	800047c <__aeabi_i2d>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005fa4:	f7fa f91c 	bl	80001e0 <__aeabi_dsub>
 8005fa8:	4b18      	ldr	r3, [pc, #96]	; (800600c <__ieee754_rem_pio2+0x404>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	f7fa fad0 	bl	8000550 <__aeabi_dmul>
 8005fb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005fb4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005fb8:	2703      	movs	r7, #3
 8005fba:	2400      	movs	r4, #0
 8005fbc:	2500      	movs	r5, #0
 8005fbe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	46b9      	mov	r9, r7
 8005fc8:	3f01      	subs	r7, #1
 8005fca:	f7fa fd29 	bl	8000a20 <__aeabi_dcmpeq>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d1f5      	bne.n	8005fbe <__ieee754_rem_pio2+0x3b6>
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <__ieee754_rem_pio2+0x408>)
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	4632      	mov	r2, r6
 8005fdc:	464b      	mov	r3, r9
 8005fde:	4651      	mov	r1, sl
 8005fe0:	a804      	add	r0, sp, #16
 8005fe2:	f000 f821 	bl	8006028 <__kernel_rem_pio2>
 8005fe6:	9b02      	ldr	r3, [sp, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	4683      	mov	fp, r0
 8005fec:	f6bf ae4c 	bge.w	8005c88 <__ieee754_rem_pio2+0x80>
 8005ff0:	e9da 2100 	ldrd	r2, r1, [sl]
 8005ff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ff8:	e9ca 2300 	strd	r2, r3, [sl]
 8005ffc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006004:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006008:	e73f      	b.n	8005e8a <__ieee754_rem_pio2+0x282>
 800600a:	bf00      	nop
 800600c:	41700000 	.word	0x41700000
 8006010:	08006980 	.word	0x08006980

08006014 <fabs>:
 8006014:	ec51 0b10 	vmov	r0, r1, d0
 8006018:	ee10 2a10 	vmov	r2, s0
 800601c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006020:	ec43 2b10 	vmov	d0, r2, r3
 8006024:	4770      	bx	lr
	...

08006028 <__kernel_rem_pio2>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	ed2d 8b02 	vpush	{d8}
 8006030:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006034:	f112 0f14 	cmn.w	r2, #20
 8006038:	9306      	str	r3, [sp, #24]
 800603a:	9104      	str	r1, [sp, #16]
 800603c:	4bc2      	ldr	r3, [pc, #776]	; (8006348 <__kernel_rem_pio2+0x320>)
 800603e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006040:	9009      	str	r0, [sp, #36]	; 0x24
 8006042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	9b06      	ldr	r3, [sp, #24]
 800604a:	f103 33ff 	add.w	r3, r3, #4294967295
 800604e:	bfa8      	it	ge
 8006050:	1ed4      	subge	r4, r2, #3
 8006052:	9305      	str	r3, [sp, #20]
 8006054:	bfb2      	itee	lt
 8006056:	2400      	movlt	r4, #0
 8006058:	2318      	movge	r3, #24
 800605a:	fb94 f4f3 	sdivge	r4, r4, r3
 800605e:	f06f 0317 	mvn.w	r3, #23
 8006062:	fb04 3303 	mla	r3, r4, r3, r3
 8006066:	eb03 0a02 	add.w	sl, r3, r2
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	9a05      	ldr	r2, [sp, #20]
 800606e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006338 <__kernel_rem_pio2+0x310>
 8006072:	eb03 0802 	add.w	r8, r3, r2
 8006076:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006078:	1aa7      	subs	r7, r4, r2
 800607a:	ae20      	add	r6, sp, #128	; 0x80
 800607c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006080:	2500      	movs	r5, #0
 8006082:	4545      	cmp	r5, r8
 8006084:	dd13      	ble.n	80060ae <__kernel_rem_pio2+0x86>
 8006086:	9b06      	ldr	r3, [sp, #24]
 8006088:	aa20      	add	r2, sp, #128	; 0x80
 800608a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800608e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006092:	f04f 0800 	mov.w	r8, #0
 8006096:	9b00      	ldr	r3, [sp, #0]
 8006098:	4598      	cmp	r8, r3
 800609a:	dc31      	bgt.n	8006100 <__kernel_rem_pio2+0xd8>
 800609c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006338 <__kernel_rem_pio2+0x310>
 80060a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80060a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060a8:	462f      	mov	r7, r5
 80060aa:	2600      	movs	r6, #0
 80060ac:	e01b      	b.n	80060e6 <__kernel_rem_pio2+0xbe>
 80060ae:	42ef      	cmn	r7, r5
 80060b0:	d407      	bmi.n	80060c2 <__kernel_rem_pio2+0x9a>
 80060b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80060b6:	f7fa f9e1 	bl	800047c <__aeabi_i2d>
 80060ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80060be:	3501      	adds	r5, #1
 80060c0:	e7df      	b.n	8006082 <__kernel_rem_pio2+0x5a>
 80060c2:	ec51 0b18 	vmov	r0, r1, d8
 80060c6:	e7f8      	b.n	80060ba <__kernel_rem_pio2+0x92>
 80060c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80060d0:	f7fa fa3e 	bl	8000550 <__aeabi_dmul>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060dc:	f7fa f882 	bl	80001e4 <__adddf3>
 80060e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e4:	3601      	adds	r6, #1
 80060e6:	9b05      	ldr	r3, [sp, #20]
 80060e8:	429e      	cmp	r6, r3
 80060ea:	f1a7 0708 	sub.w	r7, r7, #8
 80060ee:	ddeb      	ble.n	80060c8 <__kernel_rem_pio2+0xa0>
 80060f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060f4:	f108 0801 	add.w	r8, r8, #1
 80060f8:	ecab 7b02 	vstmia	fp!, {d7}
 80060fc:	3508      	adds	r5, #8
 80060fe:	e7ca      	b.n	8006096 <__kernel_rem_pio2+0x6e>
 8006100:	9b00      	ldr	r3, [sp, #0]
 8006102:	aa0c      	add	r2, sp, #48	; 0x30
 8006104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006108:	930b      	str	r3, [sp, #44]	; 0x2c
 800610a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800610c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006110:	9c00      	ldr	r4, [sp, #0]
 8006112:	930a      	str	r3, [sp, #40]	; 0x28
 8006114:	00e3      	lsls	r3, r4, #3
 8006116:	9308      	str	r3, [sp, #32]
 8006118:	ab98      	add	r3, sp, #608	; 0x260
 800611a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800611e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006122:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006126:	ab70      	add	r3, sp, #448	; 0x1c0
 8006128:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800612c:	46c3      	mov	fp, r8
 800612e:	46a1      	mov	r9, r4
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	f1a5 0508 	sub.w	r5, r5, #8
 8006138:	dc77      	bgt.n	800622a <__kernel_rem_pio2+0x202>
 800613a:	ec47 6b10 	vmov	d0, r6, r7
 800613e:	4650      	mov	r0, sl
 8006140:	f000 fac2 	bl	80066c8 <scalbn>
 8006144:	ec57 6b10 	vmov	r6, r7, d0
 8006148:	2200      	movs	r2, #0
 800614a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800614e:	ee10 0a10 	vmov	r0, s0
 8006152:	4639      	mov	r1, r7
 8006154:	f7fa f9fc 	bl	8000550 <__aeabi_dmul>
 8006158:	ec41 0b10 	vmov	d0, r0, r1
 800615c:	f000 fb34 	bl	80067c8 <floor>
 8006160:	4b7a      	ldr	r3, [pc, #488]	; (800634c <__kernel_rem_pio2+0x324>)
 8006162:	ec51 0b10 	vmov	r0, r1, d0
 8006166:	2200      	movs	r2, #0
 8006168:	f7fa f9f2 	bl	8000550 <__aeabi_dmul>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	f7fa f834 	bl	80001e0 <__aeabi_dsub>
 8006178:	460f      	mov	r7, r1
 800617a:	4606      	mov	r6, r0
 800617c:	f7fa fc82 	bl	8000a84 <__aeabi_d2iz>
 8006180:	9002      	str	r0, [sp, #8]
 8006182:	f7fa f97b 	bl	800047c <__aeabi_i2d>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4630      	mov	r0, r6
 800618c:	4639      	mov	r1, r7
 800618e:	f7fa f827 	bl	80001e0 <__aeabi_dsub>
 8006192:	f1ba 0f00 	cmp.w	sl, #0
 8006196:	4606      	mov	r6, r0
 8006198:	460f      	mov	r7, r1
 800619a:	dd6d      	ble.n	8006278 <__kernel_rem_pio2+0x250>
 800619c:	1e61      	subs	r1, r4, #1
 800619e:	ab0c      	add	r3, sp, #48	; 0x30
 80061a0:	9d02      	ldr	r5, [sp, #8]
 80061a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061a6:	f1ca 0018 	rsb	r0, sl, #24
 80061aa:	fa43 f200 	asr.w	r2, r3, r0
 80061ae:	4415      	add	r5, r2
 80061b0:	4082      	lsls	r2, r0
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	aa0c      	add	r2, sp, #48	; 0x30
 80061b6:	9502      	str	r5, [sp, #8]
 80061b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80061bc:	f1ca 0217 	rsb	r2, sl, #23
 80061c0:	fa43 fb02 	asr.w	fp, r3, r2
 80061c4:	f1bb 0f00 	cmp.w	fp, #0
 80061c8:	dd65      	ble.n	8006296 <__kernel_rem_pio2+0x26e>
 80061ca:	9b02      	ldr	r3, [sp, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	3301      	adds	r3, #1
 80061d0:	9302      	str	r3, [sp, #8]
 80061d2:	4615      	mov	r5, r2
 80061d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80061d8:	4294      	cmp	r4, r2
 80061da:	f300 809f 	bgt.w	800631c <__kernel_rem_pio2+0x2f4>
 80061de:	f1ba 0f00 	cmp.w	sl, #0
 80061e2:	dd07      	ble.n	80061f4 <__kernel_rem_pio2+0x1cc>
 80061e4:	f1ba 0f01 	cmp.w	sl, #1
 80061e8:	f000 80c1 	beq.w	800636e <__kernel_rem_pio2+0x346>
 80061ec:	f1ba 0f02 	cmp.w	sl, #2
 80061f0:	f000 80c7 	beq.w	8006382 <__kernel_rem_pio2+0x35a>
 80061f4:	f1bb 0f02 	cmp.w	fp, #2
 80061f8:	d14d      	bne.n	8006296 <__kernel_rem_pio2+0x26e>
 80061fa:	4632      	mov	r2, r6
 80061fc:	463b      	mov	r3, r7
 80061fe:	4954      	ldr	r1, [pc, #336]	; (8006350 <__kernel_rem_pio2+0x328>)
 8006200:	2000      	movs	r0, #0
 8006202:	f7f9 ffed 	bl	80001e0 <__aeabi_dsub>
 8006206:	4606      	mov	r6, r0
 8006208:	460f      	mov	r7, r1
 800620a:	2d00      	cmp	r5, #0
 800620c:	d043      	beq.n	8006296 <__kernel_rem_pio2+0x26e>
 800620e:	4650      	mov	r0, sl
 8006210:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006340 <__kernel_rem_pio2+0x318>
 8006214:	f000 fa58 	bl	80066c8 <scalbn>
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	ec53 2b10 	vmov	r2, r3, d0
 8006220:	f7f9 ffde 	bl	80001e0 <__aeabi_dsub>
 8006224:	4606      	mov	r6, r0
 8006226:	460f      	mov	r7, r1
 8006228:	e035      	b.n	8006296 <__kernel_rem_pio2+0x26e>
 800622a:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <__kernel_rem_pio2+0x32c>)
 800622c:	2200      	movs	r2, #0
 800622e:	4630      	mov	r0, r6
 8006230:	4639      	mov	r1, r7
 8006232:	f7fa f98d 	bl	8000550 <__aeabi_dmul>
 8006236:	f7fa fc25 	bl	8000a84 <__aeabi_d2iz>
 800623a:	f7fa f91f 	bl	800047c <__aeabi_i2d>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	ec43 2b18 	vmov	d8, r2, r3
 8006246:	4b44      	ldr	r3, [pc, #272]	; (8006358 <__kernel_rem_pio2+0x330>)
 8006248:	2200      	movs	r2, #0
 800624a:	f7fa f981 	bl	8000550 <__aeabi_dmul>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4630      	mov	r0, r6
 8006254:	4639      	mov	r1, r7
 8006256:	f7f9 ffc3 	bl	80001e0 <__aeabi_dsub>
 800625a:	f7fa fc13 	bl	8000a84 <__aeabi_d2iz>
 800625e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006262:	f84b 0b04 	str.w	r0, [fp], #4
 8006266:	ec51 0b18 	vmov	r0, r1, d8
 800626a:	f7f9 ffbb 	bl	80001e4 <__adddf3>
 800626e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006272:	4606      	mov	r6, r0
 8006274:	460f      	mov	r7, r1
 8006276:	e75b      	b.n	8006130 <__kernel_rem_pio2+0x108>
 8006278:	d106      	bne.n	8006288 <__kernel_rem_pio2+0x260>
 800627a:	1e63      	subs	r3, r4, #1
 800627c:	aa0c      	add	r2, sp, #48	; 0x30
 800627e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006282:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006286:	e79d      	b.n	80061c4 <__kernel_rem_pio2+0x19c>
 8006288:	4b34      	ldr	r3, [pc, #208]	; (800635c <__kernel_rem_pio2+0x334>)
 800628a:	2200      	movs	r2, #0
 800628c:	f7fa fbe6 	bl	8000a5c <__aeabi_dcmpge>
 8006290:	2800      	cmp	r0, #0
 8006292:	d140      	bne.n	8006316 <__kernel_rem_pio2+0x2ee>
 8006294:	4683      	mov	fp, r0
 8006296:	2200      	movs	r2, #0
 8006298:	2300      	movs	r3, #0
 800629a:	4630      	mov	r0, r6
 800629c:	4639      	mov	r1, r7
 800629e:	f7fa fbbf 	bl	8000a20 <__aeabi_dcmpeq>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f000 80c1 	beq.w	800642a <__kernel_rem_pio2+0x402>
 80062a8:	1e65      	subs	r5, r4, #1
 80062aa:	462b      	mov	r3, r5
 80062ac:	2200      	movs	r2, #0
 80062ae:	9900      	ldr	r1, [sp, #0]
 80062b0:	428b      	cmp	r3, r1
 80062b2:	da6d      	bge.n	8006390 <__kernel_rem_pio2+0x368>
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	f000 808a 	beq.w	80063ce <__kernel_rem_pio2+0x3a6>
 80062ba:	ab0c      	add	r3, sp, #48	; 0x30
 80062bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80062c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80ae 	beq.w	8006426 <__kernel_rem_pio2+0x3fe>
 80062ca:	4650      	mov	r0, sl
 80062cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006340 <__kernel_rem_pio2+0x318>
 80062d0:	f000 f9fa 	bl	80066c8 <scalbn>
 80062d4:	1c6b      	adds	r3, r5, #1
 80062d6:	00da      	lsls	r2, r3, #3
 80062d8:	9205      	str	r2, [sp, #20]
 80062da:	ec57 6b10 	vmov	r6, r7, d0
 80062de:	aa70      	add	r2, sp, #448	; 0x1c0
 80062e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006354 <__kernel_rem_pio2+0x32c>
 80062e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80062e8:	462c      	mov	r4, r5
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	f280 80d4 	bge.w	800649c <__kernel_rem_pio2+0x474>
 80062f4:	462c      	mov	r4, r5
 80062f6:	2c00      	cmp	r4, #0
 80062f8:	f2c0 8102 	blt.w	8006500 <__kernel_rem_pio2+0x4d8>
 80062fc:	4b18      	ldr	r3, [pc, #96]	; (8006360 <__kernel_rem_pio2+0x338>)
 80062fe:	461e      	mov	r6, r3
 8006300:	ab70      	add	r3, sp, #448	; 0x1c0
 8006302:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006306:	1b2b      	subs	r3, r5, r4
 8006308:	f04f 0900 	mov.w	r9, #0
 800630c:	f04f 0a00 	mov.w	sl, #0
 8006310:	2700      	movs	r7, #0
 8006312:	9306      	str	r3, [sp, #24]
 8006314:	e0e6      	b.n	80064e4 <__kernel_rem_pio2+0x4bc>
 8006316:	f04f 0b02 	mov.w	fp, #2
 800631a:	e756      	b.n	80061ca <__kernel_rem_pio2+0x1a2>
 800631c:	f8d8 3000 	ldr.w	r3, [r8]
 8006320:	bb05      	cbnz	r5, 8006364 <__kernel_rem_pio2+0x33c>
 8006322:	b123      	cbz	r3, 800632e <__kernel_rem_pio2+0x306>
 8006324:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006328:	f8c8 3000 	str.w	r3, [r8]
 800632c:	2301      	movs	r3, #1
 800632e:	3201      	adds	r2, #1
 8006330:	f108 0804 	add.w	r8, r8, #4
 8006334:	461d      	mov	r5, r3
 8006336:	e74f      	b.n	80061d8 <__kernel_rem_pio2+0x1b0>
	...
 8006344:	3ff00000 	.word	0x3ff00000
 8006348:	08006ac8 	.word	0x08006ac8
 800634c:	40200000 	.word	0x40200000
 8006350:	3ff00000 	.word	0x3ff00000
 8006354:	3e700000 	.word	0x3e700000
 8006358:	41700000 	.word	0x41700000
 800635c:	3fe00000 	.word	0x3fe00000
 8006360:	08006a88 	.word	0x08006a88
 8006364:	1acb      	subs	r3, r1, r3
 8006366:	f8c8 3000 	str.w	r3, [r8]
 800636a:	462b      	mov	r3, r5
 800636c:	e7df      	b.n	800632e <__kernel_rem_pio2+0x306>
 800636e:	1e62      	subs	r2, r4, #1
 8006370:	ab0c      	add	r3, sp, #48	; 0x30
 8006372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006376:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800637a:	a90c      	add	r1, sp, #48	; 0x30
 800637c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006380:	e738      	b.n	80061f4 <__kernel_rem_pio2+0x1cc>
 8006382:	1e62      	subs	r2, r4, #1
 8006384:	ab0c      	add	r3, sp, #48	; 0x30
 8006386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800638e:	e7f4      	b.n	800637a <__kernel_rem_pio2+0x352>
 8006390:	a90c      	add	r1, sp, #48	; 0x30
 8006392:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006396:	3b01      	subs	r3, #1
 8006398:	430a      	orrs	r2, r1
 800639a:	e788      	b.n	80062ae <__kernel_rem_pio2+0x286>
 800639c:	3301      	adds	r3, #1
 800639e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80063a2:	2900      	cmp	r1, #0
 80063a4:	d0fa      	beq.n	800639c <__kernel_rem_pio2+0x374>
 80063a6:	9a08      	ldr	r2, [sp, #32]
 80063a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80063ac:	446a      	add	r2, sp
 80063ae:	3a98      	subs	r2, #152	; 0x98
 80063b0:	9208      	str	r2, [sp, #32]
 80063b2:	9a06      	ldr	r2, [sp, #24]
 80063b4:	a920      	add	r1, sp, #128	; 0x80
 80063b6:	18a2      	adds	r2, r4, r2
 80063b8:	18e3      	adds	r3, r4, r3
 80063ba:	f104 0801 	add.w	r8, r4, #1
 80063be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80063c2:	9302      	str	r3, [sp, #8]
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	4543      	cmp	r3, r8
 80063c8:	da04      	bge.n	80063d4 <__kernel_rem_pio2+0x3ac>
 80063ca:	461c      	mov	r4, r3
 80063cc:	e6a2      	b.n	8006114 <__kernel_rem_pio2+0xec>
 80063ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063d0:	2301      	movs	r3, #1
 80063d2:	e7e4      	b.n	800639e <__kernel_rem_pio2+0x376>
 80063d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80063da:	f7fa f84f 	bl	800047c <__aeabi_i2d>
 80063de:	e8e5 0102 	strd	r0, r1, [r5], #8
 80063e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e4:	46ab      	mov	fp, r5
 80063e6:	461c      	mov	r4, r3
 80063e8:	f04f 0900 	mov.w	r9, #0
 80063ec:	2600      	movs	r6, #0
 80063ee:	2700      	movs	r7, #0
 80063f0:	9b05      	ldr	r3, [sp, #20]
 80063f2:	4599      	cmp	r9, r3
 80063f4:	dd06      	ble.n	8006404 <__kernel_rem_pio2+0x3dc>
 80063f6:	9b08      	ldr	r3, [sp, #32]
 80063f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80063fc:	f108 0801 	add.w	r8, r8, #1
 8006400:	9308      	str	r3, [sp, #32]
 8006402:	e7df      	b.n	80063c4 <__kernel_rem_pio2+0x39c>
 8006404:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006408:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800640c:	f7fa f8a0 	bl	8000550 <__aeabi_dmul>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7f9 fee4 	bl	80001e4 <__adddf3>
 800641c:	f109 0901 	add.w	r9, r9, #1
 8006420:	4606      	mov	r6, r0
 8006422:	460f      	mov	r7, r1
 8006424:	e7e4      	b.n	80063f0 <__kernel_rem_pio2+0x3c8>
 8006426:	3d01      	subs	r5, #1
 8006428:	e747      	b.n	80062ba <__kernel_rem_pio2+0x292>
 800642a:	ec47 6b10 	vmov	d0, r6, r7
 800642e:	f1ca 0000 	rsb	r0, sl, #0
 8006432:	f000 f949 	bl	80066c8 <scalbn>
 8006436:	ec57 6b10 	vmov	r6, r7, d0
 800643a:	4ba0      	ldr	r3, [pc, #640]	; (80066bc <__kernel_rem_pio2+0x694>)
 800643c:	ee10 0a10 	vmov	r0, s0
 8006440:	2200      	movs	r2, #0
 8006442:	4639      	mov	r1, r7
 8006444:	f7fa fb0a 	bl	8000a5c <__aeabi_dcmpge>
 8006448:	b1f8      	cbz	r0, 800648a <__kernel_rem_pio2+0x462>
 800644a:	4b9d      	ldr	r3, [pc, #628]	; (80066c0 <__kernel_rem_pio2+0x698>)
 800644c:	2200      	movs	r2, #0
 800644e:	4630      	mov	r0, r6
 8006450:	4639      	mov	r1, r7
 8006452:	f7fa f87d 	bl	8000550 <__aeabi_dmul>
 8006456:	f7fa fb15 	bl	8000a84 <__aeabi_d2iz>
 800645a:	4680      	mov	r8, r0
 800645c:	f7fa f80e 	bl	800047c <__aeabi_i2d>
 8006460:	4b96      	ldr	r3, [pc, #600]	; (80066bc <__kernel_rem_pio2+0x694>)
 8006462:	2200      	movs	r2, #0
 8006464:	f7fa f874 	bl	8000550 <__aeabi_dmul>
 8006468:	460b      	mov	r3, r1
 800646a:	4602      	mov	r2, r0
 800646c:	4639      	mov	r1, r7
 800646e:	4630      	mov	r0, r6
 8006470:	f7f9 feb6 	bl	80001e0 <__aeabi_dsub>
 8006474:	f7fa fb06 	bl	8000a84 <__aeabi_d2iz>
 8006478:	1c65      	adds	r5, r4, #1
 800647a:	ab0c      	add	r3, sp, #48	; 0x30
 800647c:	f10a 0a18 	add.w	sl, sl, #24
 8006480:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006484:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006488:	e71f      	b.n	80062ca <__kernel_rem_pio2+0x2a2>
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7fa faf9 	bl	8000a84 <__aeabi_d2iz>
 8006492:	ab0c      	add	r3, sp, #48	; 0x30
 8006494:	4625      	mov	r5, r4
 8006496:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800649a:	e716      	b.n	80062ca <__kernel_rem_pio2+0x2a2>
 800649c:	ab0c      	add	r3, sp, #48	; 0x30
 800649e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80064a2:	f7f9 ffeb 	bl	800047c <__aeabi_i2d>
 80064a6:	4632      	mov	r2, r6
 80064a8:	463b      	mov	r3, r7
 80064aa:	f7fa f851 	bl	8000550 <__aeabi_dmul>
 80064ae:	4642      	mov	r2, r8
 80064b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80064b4:	464b      	mov	r3, r9
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fa f849 	bl	8000550 <__aeabi_dmul>
 80064be:	3c01      	subs	r4, #1
 80064c0:	4606      	mov	r6, r0
 80064c2:	460f      	mov	r7, r1
 80064c4:	e713      	b.n	80062ee <__kernel_rem_pio2+0x2c6>
 80064c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80064ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80064ce:	f7fa f83f 	bl	8000550 <__aeabi_dmul>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4648      	mov	r0, r9
 80064d8:	4651      	mov	r1, sl
 80064da:	f7f9 fe83 	bl	80001e4 <__adddf3>
 80064de:	3701      	adds	r7, #1
 80064e0:	4681      	mov	r9, r0
 80064e2:	468a      	mov	sl, r1
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	429f      	cmp	r7, r3
 80064e8:	dc02      	bgt.n	80064f0 <__kernel_rem_pio2+0x4c8>
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	429f      	cmp	r7, r3
 80064ee:	ddea      	ble.n	80064c6 <__kernel_rem_pio2+0x49e>
 80064f0:	9a06      	ldr	r2, [sp, #24]
 80064f2:	ab48      	add	r3, sp, #288	; 0x120
 80064f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80064f8:	e9c6 9a00 	strd	r9, sl, [r6]
 80064fc:	3c01      	subs	r4, #1
 80064fe:	e6fa      	b.n	80062f6 <__kernel_rem_pio2+0x2ce>
 8006500:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006502:	2b02      	cmp	r3, #2
 8006504:	dc0b      	bgt.n	800651e <__kernel_rem_pio2+0x4f6>
 8006506:	2b00      	cmp	r3, #0
 8006508:	dc39      	bgt.n	800657e <__kernel_rem_pio2+0x556>
 800650a:	d05d      	beq.n	80065c8 <__kernel_rem_pio2+0x5a0>
 800650c:	9b02      	ldr	r3, [sp, #8]
 800650e:	f003 0007 	and.w	r0, r3, #7
 8006512:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006516:	ecbd 8b02 	vpop	{d8}
 800651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006520:	2b03      	cmp	r3, #3
 8006522:	d1f3      	bne.n	800650c <__kernel_rem_pio2+0x4e4>
 8006524:	9b05      	ldr	r3, [sp, #20]
 8006526:	9500      	str	r5, [sp, #0]
 8006528:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800652c:	eb0d 0403 	add.w	r4, sp, r3
 8006530:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006534:	46a2      	mov	sl, r4
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f1aa 0a08 	sub.w	sl, sl, #8
 800653e:	dc69      	bgt.n	8006614 <__kernel_rem_pio2+0x5ec>
 8006540:	46aa      	mov	sl, r5
 8006542:	f1ba 0f01 	cmp.w	sl, #1
 8006546:	f1a4 0408 	sub.w	r4, r4, #8
 800654a:	f300 8083 	bgt.w	8006654 <__kernel_rem_pio2+0x62c>
 800654e:	9c05      	ldr	r4, [sp, #20]
 8006550:	ab48      	add	r3, sp, #288	; 0x120
 8006552:	441c      	add	r4, r3
 8006554:	2000      	movs	r0, #0
 8006556:	2100      	movs	r1, #0
 8006558:	2d01      	cmp	r5, #1
 800655a:	f300 809a 	bgt.w	8006692 <__kernel_rem_pio2+0x66a>
 800655e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006562:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006566:	f1bb 0f00 	cmp.w	fp, #0
 800656a:	f040 8098 	bne.w	800669e <__kernel_rem_pio2+0x676>
 800656e:	9b04      	ldr	r3, [sp, #16]
 8006570:	e9c3 7800 	strd	r7, r8, [r3]
 8006574:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006578:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800657c:	e7c6      	b.n	800650c <__kernel_rem_pio2+0x4e4>
 800657e:	9e05      	ldr	r6, [sp, #20]
 8006580:	ab48      	add	r3, sp, #288	; 0x120
 8006582:	441e      	add	r6, r3
 8006584:	462c      	mov	r4, r5
 8006586:	2000      	movs	r0, #0
 8006588:	2100      	movs	r1, #0
 800658a:	2c00      	cmp	r4, #0
 800658c:	da33      	bge.n	80065f6 <__kernel_rem_pio2+0x5ce>
 800658e:	f1bb 0f00 	cmp.w	fp, #0
 8006592:	d036      	beq.n	8006602 <__kernel_rem_pio2+0x5da>
 8006594:	4602      	mov	r2, r0
 8006596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800659a:	9c04      	ldr	r4, [sp, #16]
 800659c:	e9c4 2300 	strd	r2, r3, [r4]
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80065a8:	f7f9 fe1a 	bl	80001e0 <__aeabi_dsub>
 80065ac:	ae4a      	add	r6, sp, #296	; 0x128
 80065ae:	2401      	movs	r4, #1
 80065b0:	42a5      	cmp	r5, r4
 80065b2:	da29      	bge.n	8006608 <__kernel_rem_pio2+0x5e0>
 80065b4:	f1bb 0f00 	cmp.w	fp, #0
 80065b8:	d002      	beq.n	80065c0 <__kernel_rem_pio2+0x598>
 80065ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065be:	4619      	mov	r1, r3
 80065c0:	9b04      	ldr	r3, [sp, #16]
 80065c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80065c6:	e7a1      	b.n	800650c <__kernel_rem_pio2+0x4e4>
 80065c8:	9c05      	ldr	r4, [sp, #20]
 80065ca:	ab48      	add	r3, sp, #288	; 0x120
 80065cc:	441c      	add	r4, r3
 80065ce:	2000      	movs	r0, #0
 80065d0:	2100      	movs	r1, #0
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	da09      	bge.n	80065ea <__kernel_rem_pio2+0x5c2>
 80065d6:	f1bb 0f00 	cmp.w	fp, #0
 80065da:	d002      	beq.n	80065e2 <__kernel_rem_pio2+0x5ba>
 80065dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065e0:	4619      	mov	r1, r3
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	e9c3 0100 	strd	r0, r1, [r3]
 80065e8:	e790      	b.n	800650c <__kernel_rem_pio2+0x4e4>
 80065ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80065ee:	f7f9 fdf9 	bl	80001e4 <__adddf3>
 80065f2:	3d01      	subs	r5, #1
 80065f4:	e7ed      	b.n	80065d2 <__kernel_rem_pio2+0x5aa>
 80065f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80065fa:	f7f9 fdf3 	bl	80001e4 <__adddf3>
 80065fe:	3c01      	subs	r4, #1
 8006600:	e7c3      	b.n	800658a <__kernel_rem_pio2+0x562>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	e7c8      	b.n	800659a <__kernel_rem_pio2+0x572>
 8006608:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800660c:	f7f9 fdea 	bl	80001e4 <__adddf3>
 8006610:	3401      	adds	r4, #1
 8006612:	e7cd      	b.n	80065b0 <__kernel_rem_pio2+0x588>
 8006614:	e9da 8900 	ldrd	r8, r9, [sl]
 8006618:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800661c:	9b00      	ldr	r3, [sp, #0]
 800661e:	3b01      	subs	r3, #1
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	4632      	mov	r2, r6
 8006624:	463b      	mov	r3, r7
 8006626:	4640      	mov	r0, r8
 8006628:	4649      	mov	r1, r9
 800662a:	f7f9 fddb 	bl	80001e4 <__adddf3>
 800662e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4640      	mov	r0, r8
 8006638:	4649      	mov	r1, r9
 800663a:	f7f9 fdd1 	bl	80001e0 <__aeabi_dsub>
 800663e:	4632      	mov	r2, r6
 8006640:	463b      	mov	r3, r7
 8006642:	f7f9 fdcf 	bl	80001e4 <__adddf3>
 8006646:	ed9d 7b06 	vldr	d7, [sp, #24]
 800664a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800664e:	ed8a 7b00 	vstr	d7, [sl]
 8006652:	e770      	b.n	8006536 <__kernel_rem_pio2+0x50e>
 8006654:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006658:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800665c:	4640      	mov	r0, r8
 800665e:	4632      	mov	r2, r6
 8006660:	463b      	mov	r3, r7
 8006662:	4649      	mov	r1, r9
 8006664:	f7f9 fdbe 	bl	80001e4 <__adddf3>
 8006668:	e9cd 0100 	strd	r0, r1, [sp]
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f7f9 fdb4 	bl	80001e0 <__aeabi_dsub>
 8006678:	4632      	mov	r2, r6
 800667a:	463b      	mov	r3, r7
 800667c:	f7f9 fdb2 	bl	80001e4 <__adddf3>
 8006680:	ed9d 7b00 	vldr	d7, [sp]
 8006684:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006688:	ed84 7b00 	vstr	d7, [r4]
 800668c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006690:	e757      	b.n	8006542 <__kernel_rem_pio2+0x51a>
 8006692:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006696:	f7f9 fda5 	bl	80001e4 <__adddf3>
 800669a:	3d01      	subs	r5, #1
 800669c:	e75c      	b.n	8006558 <__kernel_rem_pio2+0x530>
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	9a04      	ldr	r2, [sp, #16]
 80066a2:	601f      	str	r7, [r3, #0]
 80066a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80066a8:	605c      	str	r4, [r3, #4]
 80066aa:	609d      	str	r5, [r3, #8]
 80066ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066b0:	60d3      	str	r3, [r2, #12]
 80066b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066b6:	6110      	str	r0, [r2, #16]
 80066b8:	6153      	str	r3, [r2, #20]
 80066ba:	e727      	b.n	800650c <__kernel_rem_pio2+0x4e4>
 80066bc:	41700000 	.word	0x41700000
 80066c0:	3e700000 	.word	0x3e700000
 80066c4:	00000000 	.word	0x00000000

080066c8 <scalbn>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	ec55 4b10 	vmov	r4, r5, d0
 80066ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80066d2:	4606      	mov	r6, r0
 80066d4:	462b      	mov	r3, r5
 80066d6:	b999      	cbnz	r1, 8006700 <scalbn+0x38>
 80066d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80066dc:	4323      	orrs	r3, r4
 80066de:	d03f      	beq.n	8006760 <scalbn+0x98>
 80066e0:	4b35      	ldr	r3, [pc, #212]	; (80067b8 <scalbn+0xf0>)
 80066e2:	4629      	mov	r1, r5
 80066e4:	ee10 0a10 	vmov	r0, s0
 80066e8:	2200      	movs	r2, #0
 80066ea:	f7f9 ff31 	bl	8000550 <__aeabi_dmul>
 80066ee:	4b33      	ldr	r3, [pc, #204]	; (80067bc <scalbn+0xf4>)
 80066f0:	429e      	cmp	r6, r3
 80066f2:	4604      	mov	r4, r0
 80066f4:	460d      	mov	r5, r1
 80066f6:	da10      	bge.n	800671a <scalbn+0x52>
 80066f8:	a327      	add	r3, pc, #156	; (adr r3, 8006798 <scalbn+0xd0>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	e01f      	b.n	8006740 <scalbn+0x78>
 8006700:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006704:	4291      	cmp	r1, r2
 8006706:	d10c      	bne.n	8006722 <scalbn+0x5a>
 8006708:	ee10 2a10 	vmov	r2, s0
 800670c:	4620      	mov	r0, r4
 800670e:	4629      	mov	r1, r5
 8006710:	f7f9 fd68 	bl	80001e4 <__adddf3>
 8006714:	4604      	mov	r4, r0
 8006716:	460d      	mov	r5, r1
 8006718:	e022      	b.n	8006760 <scalbn+0x98>
 800671a:	460b      	mov	r3, r1
 800671c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006720:	3936      	subs	r1, #54	; 0x36
 8006722:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006726:	4296      	cmp	r6, r2
 8006728:	dd0d      	ble.n	8006746 <scalbn+0x7e>
 800672a:	2d00      	cmp	r5, #0
 800672c:	a11c      	add	r1, pc, #112	; (adr r1, 80067a0 <scalbn+0xd8>)
 800672e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006732:	da02      	bge.n	800673a <scalbn+0x72>
 8006734:	a11c      	add	r1, pc, #112	; (adr r1, 80067a8 <scalbn+0xe0>)
 8006736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800673a:	a319      	add	r3, pc, #100	; (adr r3, 80067a0 <scalbn+0xd8>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f7f9 ff06 	bl	8000550 <__aeabi_dmul>
 8006744:	e7e6      	b.n	8006714 <scalbn+0x4c>
 8006746:	1872      	adds	r2, r6, r1
 8006748:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800674c:	428a      	cmp	r2, r1
 800674e:	dcec      	bgt.n	800672a <scalbn+0x62>
 8006750:	2a00      	cmp	r2, #0
 8006752:	dd08      	ble.n	8006766 <scalbn+0x9e>
 8006754:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006758:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800675c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006760:	ec45 4b10 	vmov	d0, r4, r5
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800676a:	da08      	bge.n	800677e <scalbn+0xb6>
 800676c:	2d00      	cmp	r5, #0
 800676e:	a10a      	add	r1, pc, #40	; (adr r1, 8006798 <scalbn+0xd0>)
 8006770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006774:	dac0      	bge.n	80066f8 <scalbn+0x30>
 8006776:	a10e      	add	r1, pc, #56	; (adr r1, 80067b0 <scalbn+0xe8>)
 8006778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800677c:	e7bc      	b.n	80066f8 <scalbn+0x30>
 800677e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006782:	3236      	adds	r2, #54	; 0x36
 8006784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006788:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800678c:	4620      	mov	r0, r4
 800678e:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <scalbn+0xf8>)
 8006790:	2200      	movs	r2, #0
 8006792:	e7d5      	b.n	8006740 <scalbn+0x78>
 8006794:	f3af 8000 	nop.w
 8006798:	c2f8f359 	.word	0xc2f8f359
 800679c:	01a56e1f 	.word	0x01a56e1f
 80067a0:	8800759c 	.word	0x8800759c
 80067a4:	7e37e43c 	.word	0x7e37e43c
 80067a8:	8800759c 	.word	0x8800759c
 80067ac:	fe37e43c 	.word	0xfe37e43c
 80067b0:	c2f8f359 	.word	0xc2f8f359
 80067b4:	81a56e1f 	.word	0x81a56e1f
 80067b8:	43500000 	.word	0x43500000
 80067bc:	ffff3cb0 	.word	0xffff3cb0
 80067c0:	3c900000 	.word	0x3c900000
 80067c4:	00000000 	.word	0x00000000

080067c8 <floor>:
 80067c8:	ec51 0b10 	vmov	r0, r1, d0
 80067cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80067d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80067d8:	2e13      	cmp	r6, #19
 80067da:	ee10 5a10 	vmov	r5, s0
 80067de:	ee10 8a10 	vmov	r8, s0
 80067e2:	460c      	mov	r4, r1
 80067e4:	dc31      	bgt.n	800684a <floor+0x82>
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	da14      	bge.n	8006814 <floor+0x4c>
 80067ea:	a333      	add	r3, pc, #204	; (adr r3, 80068b8 <floor+0xf0>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f7f9 fcf8 	bl	80001e4 <__adddf3>
 80067f4:	2200      	movs	r2, #0
 80067f6:	2300      	movs	r3, #0
 80067f8:	f7fa f93a 	bl	8000a70 <__aeabi_dcmpgt>
 80067fc:	b138      	cbz	r0, 800680e <floor+0x46>
 80067fe:	2c00      	cmp	r4, #0
 8006800:	da53      	bge.n	80068aa <floor+0xe2>
 8006802:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006806:	4325      	orrs	r5, r4
 8006808:	d052      	beq.n	80068b0 <floor+0xe8>
 800680a:	4c2d      	ldr	r4, [pc, #180]	; (80068c0 <floor+0xf8>)
 800680c:	2500      	movs	r5, #0
 800680e:	4621      	mov	r1, r4
 8006810:	4628      	mov	r0, r5
 8006812:	e024      	b.n	800685e <floor+0x96>
 8006814:	4f2b      	ldr	r7, [pc, #172]	; (80068c4 <floor+0xfc>)
 8006816:	4137      	asrs	r7, r6
 8006818:	ea01 0307 	and.w	r3, r1, r7
 800681c:	4303      	orrs	r3, r0
 800681e:	d01e      	beq.n	800685e <floor+0x96>
 8006820:	a325      	add	r3, pc, #148	; (adr r3, 80068b8 <floor+0xf0>)
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f7f9 fcdd 	bl	80001e4 <__adddf3>
 800682a:	2200      	movs	r2, #0
 800682c:	2300      	movs	r3, #0
 800682e:	f7fa f91f 	bl	8000a70 <__aeabi_dcmpgt>
 8006832:	2800      	cmp	r0, #0
 8006834:	d0eb      	beq.n	800680e <floor+0x46>
 8006836:	2c00      	cmp	r4, #0
 8006838:	bfbe      	ittt	lt
 800683a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800683e:	4133      	asrlt	r3, r6
 8006840:	18e4      	addlt	r4, r4, r3
 8006842:	ea24 0407 	bic.w	r4, r4, r7
 8006846:	2500      	movs	r5, #0
 8006848:	e7e1      	b.n	800680e <floor+0x46>
 800684a:	2e33      	cmp	r6, #51	; 0x33
 800684c:	dd0b      	ble.n	8006866 <floor+0x9e>
 800684e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006852:	d104      	bne.n	800685e <floor+0x96>
 8006854:	ee10 2a10 	vmov	r2, s0
 8006858:	460b      	mov	r3, r1
 800685a:	f7f9 fcc3 	bl	80001e4 <__adddf3>
 800685e:	ec41 0b10 	vmov	d0, r0, r1
 8006862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006866:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800686a:	f04f 37ff 	mov.w	r7, #4294967295
 800686e:	40df      	lsrs	r7, r3
 8006870:	4238      	tst	r0, r7
 8006872:	d0f4      	beq.n	800685e <floor+0x96>
 8006874:	a310      	add	r3, pc, #64	; (adr r3, 80068b8 <floor+0xf0>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f7f9 fcb3 	bl	80001e4 <__adddf3>
 800687e:	2200      	movs	r2, #0
 8006880:	2300      	movs	r3, #0
 8006882:	f7fa f8f5 	bl	8000a70 <__aeabi_dcmpgt>
 8006886:	2800      	cmp	r0, #0
 8006888:	d0c1      	beq.n	800680e <floor+0x46>
 800688a:	2c00      	cmp	r4, #0
 800688c:	da0a      	bge.n	80068a4 <floor+0xdc>
 800688e:	2e14      	cmp	r6, #20
 8006890:	d101      	bne.n	8006896 <floor+0xce>
 8006892:	3401      	adds	r4, #1
 8006894:	e006      	b.n	80068a4 <floor+0xdc>
 8006896:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800689a:	2301      	movs	r3, #1
 800689c:	40b3      	lsls	r3, r6
 800689e:	441d      	add	r5, r3
 80068a0:	45a8      	cmp	r8, r5
 80068a2:	d8f6      	bhi.n	8006892 <floor+0xca>
 80068a4:	ea25 0507 	bic.w	r5, r5, r7
 80068a8:	e7b1      	b.n	800680e <floor+0x46>
 80068aa:	2500      	movs	r5, #0
 80068ac:	462c      	mov	r4, r5
 80068ae:	e7ae      	b.n	800680e <floor+0x46>
 80068b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80068b4:	e7ab      	b.n	800680e <floor+0x46>
 80068b6:	bf00      	nop
 80068b8:	8800759c 	.word	0x8800759c
 80068bc:	7e37e43c 	.word	0x7e37e43c
 80068c0:	bff00000 	.word	0xbff00000
 80068c4:	000fffff 	.word	0x000fffff

080068c8 <_init>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr

080068d4 <_fini>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr
