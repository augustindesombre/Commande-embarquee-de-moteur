
Labo3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000429c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004450  08004450  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004458  08004458  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  0800446c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800446c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dae8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2f  00000000  00000000  0002db67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  0002f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a41  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a0c  00000000  00000000  000310e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f18a  00000000  00000000  00047aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000952b1  00000000  00000000  00056c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000374c  00000000  00000000  000ebf28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ef674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004418 	.word	0x08004418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004418 	.word	0x08004418

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fce2 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82a 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f9f4 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f9d2 	bl	8000888 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f9a6 	bl	8000834 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e8:	f000 f88e 	bl	8000608 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004ec:	f000 f8de 	bl	80006ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 80004f0:	2108      	movs	r1, #8
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <main+0x54>)
 80004f4:	f002 fca6 	bl	8002e44 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <main+0x54>)
 80004fc:	f002 fdac 	bl	8003058 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000500:	2100      	movs	r1, #0
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <main+0x54>)
 8000504:	f003 fb0a 	bl	8003b1c <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000508:	2104      	movs	r1, #4
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <main+0x54>)
 800050c:	f002 fda4 	bl	8003058 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000510:	2104      	movs	r1, #4
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <main+0x54>)
 8000514:	f003 fb02 	bl	8003b1c <HAL_TIMEx_PWMN_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) resultats, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	4903      	ldr	r1, [pc, #12]	; (8000528 <main+0x58>)
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <main+0x5c>)
 800051e:	f000 fd73 	bl	8001008 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x52>
 8000524:	200000d0 	.word	0x200000d0
 8000528:	2000015c 	.word	0x2000015c
 800052c:	20000028 	.word	0x20000028

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 ff3e 	bl	80043c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b29      	ldr	r3, [pc, #164]	; (8000600 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a28      	ldr	r2, [pc, #160]	; (8000600 <SystemClock_Config+0xd0>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd4>)
 800057e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a4:	2310      	movs	r3, #16
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 ff02 	bl	80023c4 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 fa55 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2102      	movs	r1, #2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f964 	bl	80028b4 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005f2:	f000 fa3f 	bl	8000a74 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <MX_ADC1_Init+0xa0>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000644:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800064c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800066e:	f000 fc87 	bl	8000f80 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000678:	f000 f9fc 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800067c:	2309      	movs	r3, #9
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800068e:	f000 fdbf 	bl	8001210 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000698:	f000 f9ec 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40012000 	.word	0x40012000

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	; 0x58
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2220      	movs	r2, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fe6b 	bl	80043c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ea:	4b50      	ldr	r3, [pc, #320]	; (800082c <MX_TIM1_Init+0x180>)
 80006ec:	4a50      	ldr	r2, [pc, #320]	; (8000830 <MX_TIM1_Init+0x184>)
 80006ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006f0:	4b4e      	ldr	r3, [pc, #312]	; (800082c <MX_TIM1_Init+0x180>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80006f6:	4b4d      	ldr	r3, [pc, #308]	; (800082c <MX_TIM1_Init+0x180>)
 80006f8:	2220      	movs	r2, #32
 80006fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PERIPWM;
 80006fc:	4b4b      	ldr	r3, [pc, #300]	; (800082c <MX_TIM1_Init+0x180>)
 80006fe:	f640 0234 	movw	r2, #2100	; 0x834
 8000702:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b49      	ldr	r3, [pc, #292]	; (800082c <MX_TIM1_Init+0x180>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070a:	4b48      	ldr	r3, [pc, #288]	; (800082c <MX_TIM1_Init+0x180>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b46      	ldr	r3, [pc, #280]	; (800082c <MX_TIM1_Init+0x180>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000716:	4845      	ldr	r0, [pc, #276]	; (800082c <MX_TIM1_Init+0x180>)
 8000718:	f002 faec 	bl	8002cf4 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000722:	f000 f9a7 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000730:	4619      	mov	r1, r3
 8000732:	483e      	ldr	r0, [pc, #248]	; (800082c <MX_TIM1_Init+0x180>)
 8000734:	f002 fe5e 	bl	80033f4 <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800073e:	f000 f999 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000742:	483a      	ldr	r0, [pc, #232]	; (800082c <MX_TIM1_Init+0x180>)
 8000744:	f002 fc2e 	bl	8002fa4 <HAL_TIM_PWM_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800074e:	f000 f991 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000752:	4836      	ldr	r0, [pc, #216]	; (800082c <MX_TIM1_Init+0x180>)
 8000754:	f002 fb1d 	bl	8002d92 <HAL_TIM_OC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800075e:	f000 f989 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076e:	4619      	mov	r1, r3
 8000770:	482e      	ldr	r0, [pc, #184]	; (800082c <MX_TIM1_Init+0x180>)
 8000772:	f003 fa7f 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800077c:	f000 f97a 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800078c:	2300      	movs	r3, #0
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a0:	2200      	movs	r2, #0
 80007a2:	4619      	mov	r1, r3
 80007a4:	4821      	ldr	r0, [pc, #132]	; (800082c <MX_TIM1_Init+0x180>)
 80007a6:	f002 fd63 	bl	8003270 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80007b0:	f000 f960 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	2204      	movs	r2, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	481b      	ldr	r0, [pc, #108]	; (800082c <MX_TIM1_Init+0x180>)
 80007be:	f002 fd57 	bl	8003270 <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80007c8:	f000 f954 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007cc:	2330      	movs	r3, #48	; 0x30
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d4:	2208      	movs	r2, #8
 80007d6:	4619      	mov	r1, r3
 80007d8:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_TIM1_Init+0x180>)
 80007da:	f002 fced 	bl	80031b8 <HAL_TIM_OC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80007e4:	f000 f946 	bl	8000a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 42;
 80007f4:	232a      	movs	r3, #42	; 0x2a
 80007f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000806:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <MX_TIM1_Init+0x180>)
 800080e:	f003 fa9f 	bl	8003d50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000818:	f000 f92c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <MX_TIM1_Init+0x180>)
 800081e:	f000 fa29 	bl	8000c74 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3758      	adds	r7, #88	; 0x58
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000d0 	.word	0x200000d0
 8000830:	40010000 	.word	0x40010000

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART2_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800086c:	f003 fae7 	bl	8003e3e <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 f8fd 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000118 	.word	0x20000118
 8000884:	40004400 	.word	0x40004400

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_DMA_Init+0x3c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2038      	movs	r0, #56	; 0x38
 80008b0:	f001 f829 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b4:	2038      	movs	r0, #56	; 0x38
 80008b6:	f001 f842 	bl	800193e <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a2c      	ldr	r2, [pc, #176]	; (8000998 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a25      	ldr	r2, [pc, #148]	; (8000998 <MX_GPIO_Init+0xd0>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a1e      	ldr	r2, [pc, #120]	; (8000998 <MX_GPIO_Init+0xd0>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <MX_GPIO_Init+0xd0>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	4812      	ldr	r0, [pc, #72]	; (800099c <MX_GPIO_Init+0xd4>)
 8000954:	f001 fd02 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0xd8>)
 8000970:	f001 fb70 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000974:	2320      	movs	r3, #32
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_GPIO_Init+0xd4>)
 800098c:	f001 fb62 	bl	8002054 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020800 	.word	0x40020800

080009a4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	static uint16_t counter = 0;
	counter++;
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_ADC_ConvCpltCallback+0xc0>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <HAL_ADC_ConvCpltCallback+0xc0>)
 80009b6:	801a      	strh	r2, [r3, #0]
	if (counter == 10000){
 80009b8:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_ADC_ConvCpltCallback+0xc0>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d106      	bne.n	80009d2 <HAL_ADC_ConvCpltCallback+0x2e>
		counter = 0;
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <HAL_ADC_ConvCpltCallback+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009ca:	2120      	movs	r1, #32
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_ADC_ConvCpltCallback+0xc4>)
 80009ce:	f001 fcde 	bl	800238e <HAL_GPIO_TogglePin>
	}
	if (resultats[0] > 2048) {
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <HAL_ADC_ConvCpltCallback+0xc8>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009da:	d91f      	bls.n	8000a1c <HAL_ADC_ConvCpltCallback+0x78>
		uint16_t tmp_resultat = (resultats[0] - 2048)*PERIPWM >> 11;
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <HAL_ADC_ConvCpltCallback+0xc8>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80009e4:	f640 0234 	movw	r2, #2100	; 0x834
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	12db      	asrs	r3, r3, #11
 80009ee:	81fb      	strh	r3, [r7, #14]
		TIM1->CCR1 = (uint32_t) tmp_resultat;
 80009f0:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <HAL_ADC_ConvCpltCallback+0xcc>)
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) tmp_resultat;
 80009f6:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <HAL_ADC_ConvCpltCallback+0xcc>)
 80009f8:	89fb      	ldrh	r3, [r7, #14]
 80009fa:	6393      	str	r3, [r2, #56]	; 0x38
		uint32_t tmpccer = TIM1->CCER;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_ADC_ConvCpltCallback+0xcc>)
 80009fe:	6a1b      	ldr	r3, [r3, #32]
 8000a00:	60bb      	str	r3, [r7, #8]
		tmpccer &= 0xFFAA;
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 73aa 	movw	r3, #65450	; 0xffaa
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
		tmpccer |= TIM_CCER_CC1E | TIM_CCER_CC2NE;
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8000a12:	60bb      	str	r3, [r7, #8]
		TIM1->CCER = tmpccer;
 8000a14:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	6213      	str	r3, [r2, #32]
	uint32_t tmpccer = TIM1->CCER;
	tmpccer &= 0xFFAA;
	tmpccer |= TIM_CCER_CC1E | TIM_CCER_CC2NE;
	TIM1->CCER = tmpccer
*/
}
 8000a1a:	e01e      	b.n	8000a5a <HAL_ADC_ConvCpltCallback+0xb6>
		uint16_t tmp_resultat = (2048 - resultats[0])*PERIPWM >> 11;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <HAL_ADC_ConvCpltCallback+0xc8>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000a24:	f640 0234 	movw	r2, #2100	; 0x834
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	12db      	asrs	r3, r3, #11
 8000a2e:	82fb      	strh	r3, [r7, #22]
		TIM1->CCR1 = (uint32_t) tmp_resultat;
 8000a30:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a32:	8afb      	ldrh	r3, [r7, #22]
 8000a34:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) tmp_resultat;
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a38:	8afb      	ldrh	r3, [r7, #22]
 8000a3a:	6393      	str	r3, [r2, #56]	; 0x38
		uint32_t tmpccer = TIM1->CCER;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	613b      	str	r3, [r7, #16]
		tmpccer &= 0xFFAA;
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	f64f 73aa 	movw	r3, #65450	; 0xffaa
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
		tmpccer |= TIM_CCER_CC1NE | TIM_CCER_CC2E;
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	f043 0314 	orr.w	r3, r3, #20
 8000a52:	613b      	str	r3, [r7, #16]
		TIM1->CCER = tmpccer;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	6213      	str	r3, [r2, #32]
}
 8000a5a:	bf00      	nop
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000015e 	.word	0x2000015e
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	2000015c 	.word	0x2000015c
 8000a70:	40010000 	.word	0x40010000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f000 ff16 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a49      	ldr	r2, [pc, #292]	; (8000c14 <HAL_ADC_MspInit+0x144>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	f040 808c 	bne.w	8000c0c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afc:	4a46      	ldr	r2, [pc, #280]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	6453      	str	r3, [r2, #68]	; 0x44
 8000b04:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a3f      	ldr	r2, [pc, #252]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a38      	ldr	r2, [pc, #224]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_ADC_MspInit+0x148>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b64:	230f      	movs	r3, #15
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4829      	ldr	r0, [pc, #164]	; (8000c1c <HAL_ADC_MspInit+0x14c>)
 8000b78:	f001 fa6c 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8000b7c:	2383      	movs	r3, #131	; 0x83
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b80:	2303      	movs	r3, #3
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4824      	ldr	r0, [pc, #144]	; (8000c20 <HAL_ADC_MspInit+0x150>)
 8000b90:	f001 fa60 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b94:	2303      	movs	r3, #3
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481f      	ldr	r0, [pc, #124]	; (8000c24 <HAL_ADC_MspInit+0x154>)
 8000ba8:	f001 fa54 	bl	8002054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_ADC_MspInit+0x15c>)
 8000bb0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000bf2:	f000 febf 	bl	8001974 <HAL_DMA_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000bfc:	f7ff ff3a 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000c04:	639a      	str	r2, [r3, #56]	; 0x38
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_ADC_MspInit+0x158>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40012000 	.word	0x40012000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	20000070 	.word	0x20000070
 8000c2c:	40026410 	.word	0x40026410

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_TIM_Base_MspInit+0x3c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10d      	bne.n	8000c5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_TIM_Base_MspInit+0x40>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <HAL_TIM_Base_MspInit+0x40>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_TIM_Base_MspInit+0x40>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <HAL_TIM_MspPostInit+0xa8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d13d      	bne.n	8000d12 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <HAL_TIM_MspPostInit+0xac>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a20      	ldr	r2, [pc, #128]	; (8000d20 <HAL_TIM_MspPostInit+0xac>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <HAL_TIM_MspPostInit+0xac>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_TIM_MspPostInit+0xac>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_TIM_MspPostInit+0xac>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_TIM_MspPostInit+0xac>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000cce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480e      	ldr	r0, [pc, #56]	; (8000d24 <HAL_TIM_MspPostInit+0xb0>)
 8000cec:	f001 f9b2 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <HAL_TIM_MspPostInit+0xb4>)
 8000d0e:	f001 f9a1 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020000 	.word	0x40020000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12b      	bne.n	8000da6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d86:	230c      	movs	r3, #12
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d96:	2307      	movs	r3, #7
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000da2:	f001 f957 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004400 	.word	0x40004400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f89a 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <DMA2_Stream0_IRQHandler+0x10>)
 8000e16:	f000 feb3 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000070 	.word	0x20000070

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f003 faab 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fb29 	bl	80004d0 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e8c:	08004460 	.word	0x08004460
  ldr r2, =_sbss
 8000e90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e94:	20000164 	.word	0x20000164

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 fd13 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fdd6 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fd2b 	bl	800195a <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 fcf3 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000160 	.word	0x20000160

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000160 	.word	0x20000160

08000f80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e033      	b.n	8000ffe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d109      	bne.n	8000fb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fd96 	bl	8000ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d118      	bne.n	8000ff0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fc6:	f023 0302 	bic.w	r3, r3, #2
 8000fca:	f043 0202 	orr.w	r2, r3, #2
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fa3e 	bl	8001454 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f023 0303 	bic.w	r3, r3, #3
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40
 8000fee:	e001      	b.n	8000ff4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Start_DMA+0x1e>
 8001022:	2302      	movs	r3, #2
 8001024:	e0ce      	b.n	80011c4 <HAL_ADC_Start_DMA+0x1bc>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b01      	cmp	r3, #1
 800103a:	d018      	beq.n	800106e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800104c:	4b5f      	ldr	r3, [pc, #380]	; (80011cc <HAL_ADC_Start_DMA+0x1c4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a5f      	ldr	r2, [pc, #380]	; (80011d0 <HAL_ADC_Start_DMA+0x1c8>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0c9a      	lsrs	r2, r3, #18
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001060:	e002      	b.n	8001068 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	3b01      	subs	r3, #1
 8001066:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f9      	bne.n	8001062 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800107c:	d107      	bne.n	800108e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b01      	cmp	r3, #1
 800109a:	f040 8086 	bne.w	80011aa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010dc:	d106      	bne.n	80010ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f023 0206 	bic.w	r2, r3, #6
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
 80010ea:	e002      	b.n	80010f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_ADC_Start_DMA+0x1cc>)
 80010fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001102:	4a35      	ldr	r2, [pc, #212]	; (80011d8 <HAL_ADC_Start_DMA+0x1d0>)
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110a:	4a34      	ldr	r2, [pc, #208]	; (80011dc <HAL_ADC_Start_DMA+0x1d4>)
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	4a33      	ldr	r2, [pc, #204]	; (80011e0 <HAL_ADC_Start_DMA+0x1d8>)
 8001114:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800111e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800112e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800113e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	334c      	adds	r3, #76	; 0x4c
 800114a:	4619      	mov	r1, r3
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f000 fcbe 	bl	8001ad0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10f      	bne.n	8001180 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d129      	bne.n	80011c2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	e020      	b.n	80011c2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_ADC_Start_DMA+0x1dc>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d11b      	bne.n	80011c2 <HAL_ADC_Start_DMA+0x1ba>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d114      	bne.n	80011c2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e00b      	b.n	80011c2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f043 0210 	orr.w	r2, r3, #16
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	431bde83 	.word	0x431bde83
 80011d4:	40012300 	.word	0x40012300
 80011d8:	0800164d 	.word	0x0800164d
 80011dc:	08001707 	.word	0x08001707
 80011e0:	08001723 	.word	0x08001723
 80011e4:	40012000 	.word	0x40012000

080011e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1c>
 8001228:	2302      	movs	r3, #2
 800122a:	e105      	b.n	8001438 <HAL_ADC_ConfigChannel+0x228>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b09      	cmp	r3, #9
 800123a:	d925      	bls.n	8001288 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68d9      	ldr	r1, [r3, #12]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	3b1e      	subs	r3, #30
 8001252:	2207      	movs	r2, #7
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43da      	mvns	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	400a      	ands	r2, r1
 8001260:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68d9      	ldr	r1, [r3, #12]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	4603      	mov	r3, r0
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4403      	add	r3, r0
 800127a:	3b1e      	subs	r3, #30
 800127c:	409a      	lsls	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	e022      	b.n	80012ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6919      	ldr	r1, [r3, #16]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	2207      	movs	r2, #7
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6919      	ldr	r1, [r3, #16]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4403      	add	r3, r0
 80012c4:	409a      	lsls	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d824      	bhi.n	8001320 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	3b05      	subs	r3, #5
 80012e8:	221f      	movs	r2, #31
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	400a      	ands	r2, r1
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	3b05      	subs	r3, #5
 8001312:	fa00 f203 	lsl.w	r2, r0, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
 800131e:	e04c      	b.n	80013ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	d824      	bhi.n	8001372 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	3b23      	subs	r3, #35	; 0x23
 800133a:	221f      	movs	r2, #31
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43da      	mvns	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	3b23      	subs	r3, #35	; 0x23
 8001364:	fa00 f203 	lsl.w	r2, r0, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
 8001370:	e023      	b.n	80013ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b41      	subs	r3, #65	; 0x41
 8001384:	221f      	movs	r2, #31
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b41      	subs	r3, #65	; 0x41
 80013ae:	fa00 f203 	lsl.w	r2, r0, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_ADC_ConfigChannel+0x234>)
 80013bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <HAL_ADC_ConfigChannel+0x238>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d109      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1cc>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b12      	cmp	r3, #18
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_ADC_ConfigChannel+0x238>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d123      	bne.n	800142e <HAL_ADC_ConfigChannel+0x21e>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b10      	cmp	r3, #16
 80013ec:	d003      	beq.n	80013f6 <HAL_ADC_ConfigChannel+0x1e6>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b11      	cmp	r3, #17
 80013f4:	d11b      	bne.n	800142e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b10      	cmp	r3, #16
 8001408:	d111      	bne.n	800142e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_ADC_ConfigChannel+0x23c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_ADC_ConfigChannel+0x240>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9a      	lsrs	r2, r3, #18
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001420:	e002      	b.n	8001428 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3b01      	subs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40012300 	.word	0x40012300
 8001448:	40012000 	.word	0x40012000
 800144c:	20000000 	.word	0x20000000
 8001450:	431bde83 	.word	0x431bde83

08001454 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145c:	4b79      	ldr	r3, [pc, #484]	; (8001644 <ADC_Init+0x1f0>)
 800145e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	431a      	orrs	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	021a      	lsls	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	4a58      	ldr	r2, [pc, #352]	; (8001648 <ADC_Init+0x1f4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d022      	beq.n	8001532 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6899      	ldr	r1, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800151c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6899      	ldr	r1, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e00f      	b.n	8001552 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0202 	bic.w	r2, r2, #2
 8001560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6899      	ldr	r1, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e1b      	ldrb	r3, [r3, #24]
 800156c:	005a      	lsls	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01b      	beq.n	80015b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800158e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800159e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6859      	ldr	r1, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	3b01      	subs	r3, #1
 80015ac:	035a      	lsls	r2, r3, #13
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	e007      	b.n	80015c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	051a      	lsls	r2, r3, #20
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6899      	ldr	r1, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800160a:	025a      	lsls	r2, r3, #9
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	029a      	lsls	r2, r3, #10
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40012300 	.word	0x40012300
 8001648:	0f000001 	.word	0x0f000001

0800164c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001662:	2b00      	cmp	r3, #0
 8001664:	d13c      	bne.n	80016e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d12b      	bne.n	80016d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001684:	2b00      	cmp	r3, #0
 8001686:	d127      	bne.n	80016d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d119      	bne.n	80016d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0220 	bic.w	r2, r2, #32
 80016b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff f963 	bl	80009a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016de:	e00e      	b.n	80016fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff fd85 	bl	80011fc <HAL_ADC_ErrorCallback>
}
 80016f2:	e004      	b.n	80016fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff fd67 	bl	80011e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f043 0204 	orr.w	r2, r3, #4
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff fd5a 	bl	80011fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff3e 	bl	8001798 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff31 	bl	80017b4 <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff faf2 	bl	8000f68 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e099      	b.n	8001ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b0:	e00f      	b.n	80019d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b2:	f7ff fad9 	bl	8000f68 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d908      	bls.n	80019d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e078      	b.n	8001ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e8      	bne.n	80019b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_DMA_Init+0x158>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d107      	bne.n	8001a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4313      	orrs	r3, r2
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f023 0307 	bic.w	r3, r3, #7
 8001a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d117      	bne.n	8001a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fa6f 	bl	8001f5c <DMA_CheckFifoParam>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a92:	2301      	movs	r3, #1
 8001a94:	e016      	b.n	8001ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa26 	bl	8001ef0 <DMA_CalcBaseAndBitshift>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	223f      	movs	r2, #63	; 0x3f
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	f010803f 	.word	0xf010803f

08001ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Start_IT+0x26>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e040      	b.n	8001b78 <HAL_DMA_Start_IT+0xa8>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12f      	bne.n	8001b6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f9b8 	bl	8001e94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	223f      	movs	r2, #63	; 0x3f
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0216 	orr.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0208 	orr.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e005      	b.n	8001b76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
 8001b74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b8c:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_DMA_IRQHandler+0x248>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a8e      	ldr	r2, [pc, #568]	; (8001dcc <HAL_DMA_IRQHandler+0x24c>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	2208      	movs	r2, #8
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01a      	beq.n	8001bec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2208      	movs	r2, #8
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2201      	movs	r2, #1
 8001c10:	409a      	lsls	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f043 0202 	orr.w	r2, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	2204      	movs	r2, #4
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00b      	beq.n	8001c58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2204      	movs	r2, #4
 8001c46:	409a      	lsls	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d043      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03c      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d018      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d108      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d024      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
 8001cae:	e01f      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
 8001cc0:	e016      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0208 	bic.w	r2, r2, #8
 8001cde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 808f 	beq.w	8001e20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8087 	beq.w	8001e20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2220      	movs	r2, #32
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d136      	bne.n	8001d98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0216 	bic.w	r2, r2, #22
 8001d38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <HAL_DMA_IRQHandler+0x1da>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	223f      	movs	r2, #63	; 0x3f
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d07e      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
        }
        return;
 8001d96:	e079      	b.n	8001e8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01d      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10d      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d031      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e02c      	b.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d023      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
 8001de0:	e01e      	b.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0210 	bic.w	r2, r2, #16
 8001dfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d032      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d022      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2205      	movs	r2, #5
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d307      	bcc.n	8001e68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f2      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x2cc>
 8001e66:	e000      	b.n	8001e6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e8c:	bf00      	nop
    }
  }
}
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d108      	bne.n	8001ed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ed2:	e007      	b.n	8001ee4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3b10      	subs	r3, #16
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <DMA_CalcBaseAndBitshift+0x64>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <DMA_CalcBaseAndBitshift+0x68>)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d909      	bls.n	8001f32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	1d1a      	adds	r2, r3, #4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f30:	e007      	b.n	8001f42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f3a:	f023 0303 	bic.w	r3, r3, #3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	aaaaaaab 	.word	0xaaaaaaab
 8001f58:	08004448 	.word	0x08004448

08001f5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11f      	bne.n	8001fb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d856      	bhi.n	800202a <DMA_CheckFifoParam+0xce>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <DMA_CheckFifoParam+0x28>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001fa7 	.word	0x08001fa7
 8001f8c:	08001f95 	.word	0x08001f95
 8001f90:	0800202b 	.word	0x0800202b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d046      	beq.n	800202e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa4:	e043      	b.n	800202e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fae:	d140      	bne.n	8002032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb4:	e03d      	b.n	8002032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fbe:	d121      	bne.n	8002004 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d837      	bhi.n	8002036 <DMA_CheckFifoParam+0xda>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <DMA_CheckFifoParam+0x70>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001fe3 	.word	0x08001fe3
 8001fd4:	08001fdd 	.word	0x08001fdd
 8001fd8:	08001ff5 	.word	0x08001ff5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe0:	e030      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d025      	beq.n	800203a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff2:	e022      	b.n	800203a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ffc:	d11f      	bne.n	800203e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002002:	e01c      	b.n	800203e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d903      	bls.n	8002012 <DMA_CheckFifoParam+0xb6>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d003      	beq.n	8002018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002010:	e018      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
      break;
 8002016:	e015      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00e      	beq.n	8002042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
      break;
 8002028:	e00b      	b.n	8002042 <DMA_CheckFifoParam+0xe6>
      break;
 800202a:	bf00      	nop
 800202c:	e00a      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 800202e:	bf00      	nop
 8002030:	e008      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 8002032:	bf00      	nop
 8002034:	e006      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 8002036:	bf00      	nop
 8002038:	e004      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 800203a:	bf00      	nop
 800203c:	e002      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;   
 800203e:	bf00      	nop
 8002040:	e000      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
    }
  } 
  
  return status; 
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e159      	b.n	8002324 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	f040 8148 	bne.w	800231e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d130      	bne.n	8002108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 0201 	and.w	r2, r3, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b03      	cmp	r3, #3
 8002112:	d017      	beq.n	8002144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d123      	bne.n	8002198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0203 	and.w	r2, r3, #3
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a2 	beq.w	800231e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b57      	ldr	r3, [pc, #348]	; (800233c <HAL_GPIO_Init+0x2e8>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a56      	ldr	r2, [pc, #344]	; (800233c <HAL_GPIO_Init+0x2e8>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b54      	ldr	r3, [pc, #336]	; (800233c <HAL_GPIO_Init+0x2e8>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f6:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_GPIO_Init+0x2ec>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a49      	ldr	r2, [pc, #292]	; (8002344 <HAL_GPIO_Init+0x2f0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x202>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_GPIO_Init+0x2f4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x1fe>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a47      	ldr	r2, [pc, #284]	; (800234c <HAL_GPIO_Init+0x2f8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x1fa>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a46      	ldr	r2, [pc, #280]	; (8002350 <HAL_GPIO_Init+0x2fc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x1f6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_GPIO_Init+0x300>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x1f2>
 8002242:	2304      	movs	r3, #4
 8002244:	e008      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002246:	2307      	movs	r3, #7
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x204>
 800224a:	2303      	movs	r3, #3
 800224c:	e004      	b.n	8002258 <HAL_GPIO_Init+0x204>
 800224e:	2302      	movs	r3, #2
 8002250:	e002      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002256:	2300      	movs	r3, #0
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f002 0203 	and.w	r2, r2, #3
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4093      	lsls	r3, r2
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002268:	4935      	ldr	r1, [pc, #212]	; (8002340 <HAL_GPIO_Init+0x2ec>)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	4b38      	ldr	r3, [pc, #224]	; (8002358 <HAL_GPIO_Init+0x304>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229a:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <HAL_GPIO_Init+0x304>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c4:	4a24      	ldr	r2, [pc, #144]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ee:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_GPIO_Init+0x304>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3301      	adds	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	f67f aea2 	bls.w	8002070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	40013800 	.word	0x40013800
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400
 800234c:	40020800 	.word	0x40020800
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40021000 	.word	0x40021000
 8002358:	40013c00 	.word	0x40013c00

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4013      	ands	r3, r2
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	400b      	ands	r3, r1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e267      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d075      	beq.n	80024ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023e2:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d00c      	beq.n	8002408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ee:	4b85      	ldr	r3, [pc, #532]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d112      	bne.n	8002420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b82      	ldr	r3, [pc, #520]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002406:	d10b      	bne.n	8002420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d05b      	beq.n	80024cc <HAL_RCC_OscConfig+0x108>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d157      	bne.n	80024cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e242      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x74>
 800242a:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a75      	ldr	r2, [pc, #468]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xb0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b70      	ldr	r3, [pc, #448]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6f      	ldr	r2, [pc, #444]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6c      	ldr	r2, [pc, #432]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xb0>
 800245c:	4b69      	ldr	r3, [pc, #420]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a68      	ldr	r2, [pc, #416]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b66      	ldr	r3, [pc, #408]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fd74 	bl	8000f68 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fd70 	bl	8000f68 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e207      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b5b      	ldr	r3, [pc, #364]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xc0>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fd60 	bl	8000f68 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fd5c 	bl	8000f68 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1f3      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	4b51      	ldr	r3, [pc, #324]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0xe8>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d063      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024da:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d11c      	bne.n	800252c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b44      	ldr	r3, [pc, #272]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_RCC_OscConfig+0x152>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e1c7      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	e03a      	b.n	80025a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002534:	4b34      	ldr	r3, [pc, #208]	; (8002608 <HAL_RCC_OscConfig+0x244>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fd15 	bl	8000f68 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7fe fd11 	bl	8000f68 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e1a8      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4925      	ldr	r1, [pc, #148]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	e015      	b.n	80025a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_RCC_OscConfig+0x244>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fcf4 	bl	8000f68 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002584:	f7fe fcf0 	bl	8000f68 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e187      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d036      	beq.n	800261c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <HAL_RCC_OscConfig+0x248>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fcd4 	bl	8000f68 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c4:	f7fe fcd0 	bl	8000f68 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e167      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_OscConfig+0x240>)
 80025d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x200>
 80025e2:	e01b      	b.n	800261c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_OscConfig+0x248>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fcbd 	bl	8000f68 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	e00e      	b.n	8002610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f2:	f7fe fcb9 	bl	8000f68 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d907      	bls.n	8002610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e150      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
 8002604:	40023800 	.word	0x40023800
 8002608:	42470000 	.word	0x42470000
 800260c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	4b88      	ldr	r3, [pc, #544]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ea      	bne.n	80025f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8097 	beq.w	8002758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262e:	4b81      	ldr	r3, [pc, #516]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a7c      	ldr	r2, [pc, #496]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b77      	ldr	r3, [pc, #476]	; (8002838 <HAL_RCC_OscConfig+0x474>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d118      	bne.n	8002698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002666:	4b74      	ldr	r3, [pc, #464]	; (8002838 <HAL_RCC_OscConfig+0x474>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a73      	ldr	r2, [pc, #460]	; (8002838 <HAL_RCC_OscConfig+0x474>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7fe fc79 	bl	8000f68 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7fe fc75 	bl	8000f68 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e10c      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_OscConfig+0x474>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x2ea>
 80026a0:	4b64      	ldr	r3, [pc, #400]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
 80026ac:	e01c      	b.n	80026e8 <HAL_RCC_OscConfig+0x324>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b05      	cmp	r3, #5
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x30c>
 80026b6:	4b5f      	ldr	r3, [pc, #380]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a5e      	ldr	r2, [pc, #376]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	4b5c      	ldr	r3, [pc, #368]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a5b      	ldr	r2, [pc, #364]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0x324>
 80026d0:	4b58      	ldr	r3, [pc, #352]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a57      	ldr	r2, [pc, #348]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	4b55      	ldr	r3, [pc, #340]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a54      	ldr	r2, [pc, #336]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 0304 	bic.w	r3, r3, #4
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d015      	beq.n	800271c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe fc3a 	bl	8000f68 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7fe fc36 	bl	8000f68 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0cb      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	4b49      	ldr	r3, [pc, #292]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0ee      	beq.n	80026f8 <HAL_RCC_OscConfig+0x334>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271c:	f7fe fc24 	bl	8000f68 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe fc20 	bl	8000f68 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0b5      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273a:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ee      	bne.n	8002724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002746:	7dfb      	ldrb	r3, [r7, #23]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	4b39      	ldr	r3, [pc, #228]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	4a38      	ldr	r2, [pc, #224]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002756:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a1 	beq.w	80028a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002762:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b08      	cmp	r3, #8
 800276c:	d05c      	beq.n	8002828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d141      	bne.n	80027fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_RCC_OscConfig+0x478>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fbf4 	bl	8000f68 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe fbf0 	bl	8000f68 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e087      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	019b      	lsls	r3, r3, #6
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	491b      	ldr	r1, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x478>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe fbc9 	bl	8000f68 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe fbc5 	bl	8000f68 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e05c      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x416>
 80027f8:	e054      	b.n	80028a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCC_OscConfig+0x478>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fbb2 	bl	8000f68 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fbae 	bl	8000f68 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e045      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCC_OscConfig+0x470>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x444>
 8002826:	e03d      	b.n	80028a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e038      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
 8002834:	40023800 	.word	0x40023800
 8002838:	40007000 	.word	0x40007000
 800283c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x4ec>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d028      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d121      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d11a      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	3b01      	subs	r3, #1
 800288a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0cc      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90c      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b65      	ldr	r3, [pc, #404]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b8      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800292a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	494d      	ldr	r1, [pc, #308]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d044      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d119      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	2b03      	cmp	r3, #3
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e067      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4934      	ldr	r1, [pc, #208]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a4:	f7fe fae0 	bl	8000f68 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7fe fadc 	bl	8000f68 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e04f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 020c 	and.w	r2, r3, #12
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1eb      	bne.n	80029ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d20c      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e032      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4916      	ldr	r1, [pc, #88]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a3a:	f000 f821 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	490a      	ldr	r1, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	5ccb      	ldrb	r3, [r1, r3]
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fa40 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08004430 	.word	0x08004430
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b094      	sub	sp, #80	; 0x50
 8002a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	2300      	movs	r3, #0
 8002a92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a98:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	f200 80e1 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x3a>
 8002ab2:	e0db      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ab8:	e0db      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aba:	4b73      	ldr	r3, [pc, #460]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002abe:	e0d8      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aca:	4b6d      	ldr	r3, [pc, #436]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d063      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	2200      	movs	r2, #0
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
 8002aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002af2:	4622      	mov	r2, r4
 8002af4:	462b      	mov	r3, r5
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b04:	0150      	lsls	r0, r2, #5
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	1a51      	subs	r1, r2, r1
 8002b0e:	6139      	str	r1, [r7, #16]
 8002b10:	4629      	mov	r1, r5
 8002b12:	eb63 0301 	sbc.w	r3, r3, r1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b24:	4659      	mov	r1, fp
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	4651      	mov	r1, sl
 8002b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2e:	4651      	mov	r1, sl
 8002b30:	018a      	lsls	r2, r1, #6
 8002b32:	4651      	mov	r1, sl
 8002b34:	ebb2 0801 	subs.w	r8, r2, r1
 8002b38:	4659      	mov	r1, fp
 8002b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b52:	4690      	mov	r8, r2
 8002b54:	4699      	mov	r9, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	eb18 0303 	adds.w	r3, r8, r3
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	462b      	mov	r3, r5
 8002b60:	eb49 0303 	adc.w	r3, r9, r3
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b72:	4629      	mov	r1, r5
 8002b74:	024b      	lsls	r3, r1, #9
 8002b76:	4621      	mov	r1, r4
 8002b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	024a      	lsls	r2, r1, #9
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b86:	2200      	movs	r2, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b90:	f7fd fb20 	bl	80001d4 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b9c:	e058      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9e:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	099b      	lsrs	r3, r3, #6
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	4611      	mov	r1, r2
 8002baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bb8:	4642      	mov	r2, r8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	f04f 0000 	mov.w	r0, #0
 8002bc0:	f04f 0100 	mov.w	r1, #0
 8002bc4:	0159      	lsls	r1, r3, #5
 8002bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bca:	0150      	lsls	r0, r2, #5
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8002bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	00eb      	lsls	r3, r5, #3
 8002c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c06:	00e2      	lsls	r2, r4, #3
 8002c08:	4614      	mov	r4, r2
 8002c0a:	461d      	mov	r5, r3
 8002c0c:	4643      	mov	r3, r8
 8002c0e:	18e3      	adds	r3, r4, r3
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	464b      	mov	r3, r9
 8002c14:	eb45 0303 	adc.w	r3, r5, r3
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c26:	4629      	mov	r1, r5
 8002c28:	028b      	lsls	r3, r1, #10
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c30:	4621      	mov	r1, r4
 8002c32:	028a      	lsls	r2, r1, #10
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	61fa      	str	r2, [r7, #28]
 8002c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c44:	f7fd fac6 	bl	80001d4 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3750      	adds	r7, #80	; 0x50
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0a9b      	lsrs	r3, r3, #10
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08004440 	.word	0x08004440

08002ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd0:	f7ff ffdc 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0b5b      	lsrs	r3, r3, #13
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08004440 	.word	0x08004440

08002cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e041      	b.n	8002d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd ff88 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f000 fc26 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e041      	b.n	8002e28 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d106      	bne.n	8002dbe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f839 	bl	8002e30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f000 fbd7 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_TIM_OC_Start+0x24>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e022      	b.n	8002eae <HAL_TIM_OC_Start+0x6a>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d109      	bne.n	8002e82 <HAL_TIM_OC_Start+0x3e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	bf14      	ite	ne
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	2300      	moveq	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e015      	b.n	8002eae <HAL_TIM_OC_Start+0x6a>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d109      	bne.n	8002e9c <HAL_TIM_OC_Start+0x58>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e008      	b.n	8002eae <HAL_TIM_OC_Start+0x6a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e068      	b.n	8002f88 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_OC_Start+0x82>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec4:	e013      	b.n	8002eee <HAL_TIM_OC_Start+0xaa>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_OC_Start+0x92>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed4:	e00b      	b.n	8002eee <HAL_TIM_OC_Start+0xaa>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_OC_Start+0xa2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee4:	e003      	b.n	8002eee <HAL_TIM_OC_Start+0xaa>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fdea 	bl	8003ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <HAL_TIM_OC_Start+0x14c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d107      	bne.n	8002f16 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_TIM_OC_Start+0x14c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_TIM_OC_Start+0x10e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d013      	beq.n	8002f52 <HAL_TIM_OC_Start+0x10e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_TIM_OC_Start+0x150>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIM_OC_Start+0x10e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <HAL_TIM_OC_Start+0x154>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_OC_Start+0x10e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <HAL_TIM_OC_Start+0x158>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_OC_Start+0x10e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_TIM_OC_Start+0x15c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d111      	bne.n	8002f76 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d010      	beq.n	8002f86 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	e007      	b.n	8002f86 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800
 8002f9c:	40000c00 	.word	0x40000c00
 8002fa0:	40014000 	.word	0x40014000

08002fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e041      	b.n	800303a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f839 	bl	8003042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f000 face 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_TIM_PWM_Start+0x24>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e022      	b.n	80030c2 <HAL_TIM_PWM_Start+0x6a>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d109      	bne.n	8003096 <HAL_TIM_PWM_Start+0x3e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e015      	b.n	80030c2 <HAL_TIM_PWM_Start+0x6a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d109      	bne.n	80030b0 <HAL_TIM_PWM_Start+0x58>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e008      	b.n	80030c2 <HAL_TIM_PWM_Start+0x6a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e068      	b.n	800319c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <HAL_TIM_PWM_Start+0x82>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d8:	e013      	b.n	8003102 <HAL_TIM_PWM_Start+0xaa>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d104      	bne.n	80030ea <HAL_TIM_PWM_Start+0x92>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e8:	e00b      	b.n	8003102 <HAL_TIM_PWM_Start+0xaa>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_PWM_Start+0xa2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f8:	e003      	b.n	8003102 <HAL_TIM_PWM_Start+0xaa>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2201      	movs	r2, #1
 8003108:	6839      	ldr	r1, [r7, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fce0 	bl	8003ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <HAL_TIM_PWM_Start+0x14c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d107      	bne.n	800312a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_TIM_PWM_Start+0x14c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d018      	beq.n	8003166 <HAL_TIM_PWM_Start+0x10e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d013      	beq.n	8003166 <HAL_TIM_PWM_Start+0x10e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <HAL_TIM_PWM_Start+0x150>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00e      	beq.n	8003166 <HAL_TIM_PWM_Start+0x10e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_TIM_PWM_Start+0x154>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d009      	beq.n	8003166 <HAL_TIM_PWM_Start+0x10e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <HAL_TIM_PWM_Start+0x158>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_TIM_PWM_Start+0x10e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <HAL_TIM_PWM_Start+0x15c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d111      	bne.n	800318a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b06      	cmp	r3, #6
 8003176:	d010      	beq.n	800319a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003188:	e007      	b.n	800319a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40014000 	.word	0x40014000

080031b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e048      	b.n	8003268 <HAL_TIM_OC_ConfigChannel+0xb0>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d839      	bhi.n	8003258 <HAL_TIM_OC_ConfigChannel+0xa0>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003259 	.word	0x08003259
 80031f4:	08003259 	.word	0x08003259
 80031f8:	08003259 	.word	0x08003259
 80031fc:	0800322f 	.word	0x0800322f
 8003200:	08003259 	.word	0x08003259
 8003204:	08003259 	.word	0x08003259
 8003208:	08003259 	.word	0x08003259
 800320c:	0800323d 	.word	0x0800323d
 8003210:	08003259 	.word	0x08003259
 8003214:	08003259 	.word	0x08003259
 8003218:	08003259 	.word	0x08003259
 800321c:	0800324b 	.word	0x0800324b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fa2c 	bl	8003684 <TIM_OC1_SetConfig>
      break;
 800322c:	e017      	b.n	800325e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fa8b 	bl	8003750 <TIM_OC2_SetConfig>
      break;
 800323a:	e010      	b.n	800325e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 faf0 	bl	8003828 <TIM_OC3_SetConfig>
      break;
 8003248:	e009      	b.n	800325e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fb53 	bl	80038fc <TIM_OC4_SetConfig>
      break;
 8003256:	e002      	b.n	800325e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
      break;
 800325c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800328a:	2302      	movs	r3, #2
 800328c:	e0ae      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	f200 809f 	bhi.w	80033dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032d9 	.word	0x080032d9
 80032a8:	080033dd 	.word	0x080033dd
 80032ac:	080033dd 	.word	0x080033dd
 80032b0:	080033dd 	.word	0x080033dd
 80032b4:	08003319 	.word	0x08003319
 80032b8:	080033dd 	.word	0x080033dd
 80032bc:	080033dd 	.word	0x080033dd
 80032c0:	080033dd 	.word	0x080033dd
 80032c4:	0800335b 	.word	0x0800335b
 80032c8:	080033dd 	.word	0x080033dd
 80032cc:	080033dd 	.word	0x080033dd
 80032d0:	080033dd 	.word	0x080033dd
 80032d4:	0800339b 	.word	0x0800339b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f9d0 	bl	8003684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6999      	ldr	r1, [r3, #24]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]
      break;
 8003316:	e064      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa16 	bl	8003750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	021a      	lsls	r2, r3, #8
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	619a      	str	r2, [r3, #24]
      break;
 8003358:	e043      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fa61 	bl	8003828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0208 	orr.w	r2, r2, #8
 8003374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0204 	bic.w	r2, r2, #4
 8003384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
      break;
 8003398:	e023      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 faab 	bl	80038fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69d9      	ldr	r1, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	021a      	lsls	r2, r3, #8
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	61da      	str	r2, [r3, #28]
      break;
 80033da:	e002      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
      break;
 80033e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0x1c>
 800340c:	2302      	movs	r3, #2
 800340e:	e0b4      	b.n	800357a <HAL_TIM_ConfigClockSource+0x186>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800342e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d03e      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0xd4>
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344e:	f200 8087 	bhi.w	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	f000 8086 	beq.w	8003566 <HAL_TIM_ConfigClockSource+0x172>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345e:	d87f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b70      	cmp	r3, #112	; 0x70
 8003462:	d01a      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xa6>
 8003464:	2b70      	cmp	r3, #112	; 0x70
 8003466:	d87b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b60      	cmp	r3, #96	; 0x60
 800346a:	d050      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x11a>
 800346c:	2b60      	cmp	r3, #96	; 0x60
 800346e:	d877      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b50      	cmp	r3, #80	; 0x50
 8003472:	d03c      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xfa>
 8003474:	2b50      	cmp	r3, #80	; 0x50
 8003476:	d873      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d058      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x13a>
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	d86f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b30      	cmp	r3, #48	; 0x30
 8003482:	d064      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	2b30      	cmp	r3, #48	; 0x30
 8003486:	d86b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d060      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d867      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05c      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	2b10      	cmp	r3, #16
 8003496:	d05a      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003498:	e062      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6899      	ldr	r1, [r3, #8]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f000 faf1 	bl	8003a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
      break;
 80034c6:	e04f      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6899      	ldr	r1, [r3, #8]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f000 fada 	bl	8003a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ea:	609a      	str	r2, [r3, #8]
      break;
 80034ec:	e03c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fa4e 	bl	800399c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2150      	movs	r1, #80	; 0x50
 8003506:	4618      	mov	r0, r3
 8003508:	f000 faa7 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 800350c:	e02c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	461a      	mov	r2, r3
 800351c:	f000 fa6d 	bl	80039fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2160      	movs	r1, #96	; 0x60
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa97 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 800352c:	e01c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	461a      	mov	r2, r3
 800353c:	f000 fa2e 	bl	800399c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa87 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 800354c:	e00c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 fa7e 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 800355e:	e003      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e000      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a34      	ldr	r2, [pc, #208]	; (8003668 <TIM_Base_SetConfig+0xe4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a31      	ldr	r2, [pc, #196]	; (800366c <TIM_Base_SetConfig+0xe8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a30      	ldr	r2, [pc, #192]	; (8003670 <TIM_Base_SetConfig+0xec>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <TIM_Base_SetConfig+0xf0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0xe4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01b      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d017      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a22      	ldr	r2, [pc, #136]	; (800366c <TIM_Base_SetConfig+0xe8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <TIM_Base_SetConfig+0xec>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00f      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a20      	ldr	r2, [pc, #128]	; (8003674 <TIM_Base_SetConfig+0xf0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00b      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <TIM_Base_SetConfig+0xf4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a1e      	ldr	r2, [pc, #120]	; (800367c <TIM_Base_SetConfig+0xf8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <TIM_Base_SetConfig+0xfc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a08      	ldr	r2, [pc, #32]	; (8003668 <TIM_Base_SetConfig+0xe4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d103      	bne.n	8003654 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	615a      	str	r2, [r3, #20]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f023 0201 	bic.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f023 0302 	bic.w	r3, r3, #2
 80036cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <TIM_OC1_SetConfig+0xc8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d10c      	bne.n	80036fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0308 	bic.w	r3, r3, #8
 80036e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <TIM_OC1_SetConfig+0xc8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d111      	bne.n	8003726 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40010000 	.word	0x40010000

08003750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f023 0210 	bic.w	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0320 	bic.w	r3, r3, #32
 800379a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <TIM_OC2_SetConfig+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10d      	bne.n	80037cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <TIM_OC2_SetConfig+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d113      	bne.n	80037fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000

08003828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <TIM_OC3_SetConfig+0xd0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10d      	bne.n	80038a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800388c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <TIM_OC3_SetConfig+0xd0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d113      	bne.n	80038d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40010000 	.word	0x40010000

080038fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	031b      	lsls	r3, r3, #12
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <TIM_OC4_SetConfig+0x9c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d109      	bne.n	8003970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000

0800399c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0201 	bic.w	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 030a 	bic.w	r3, r3, #10
 80039d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b087      	sub	sp, #28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0210 	bic.w	r2, r3, #16
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f043 0307 	orr.w	r3, r3, #7
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <HAL_TIMEx_PWMN_Start+0x24>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e022      	b.n	8003b86 <HAL_TIMEx_PWMN_Start+0x6a>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d109      	bne.n	8003b5a <HAL_TIMEx_PWMN_Start+0x3e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	bf14      	ite	ne
 8003b52:	2301      	movne	r3, #1
 8003b54:	2300      	moveq	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e015      	b.n	8003b86 <HAL_TIMEx_PWMN_Start+0x6a>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d109      	bne.n	8003b74 <HAL_TIMEx_PWMN_Start+0x58>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e008      	b.n	8003b86 <HAL_TIMEx_PWMN_Start+0x6a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e063      	b.n	8003c56 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <HAL_TIMEx_PWMN_Start+0x82>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b9c:	e013      	b.n	8003bc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d104      	bne.n	8003bae <HAL_TIMEx_PWMN_Start+0x92>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bac:	e00b      	b.n	8003bc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIMEx_PWMN_Start+0xa2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bbc:	e003      	b.n	8003bc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	6839      	ldr	r1, [r7, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f910 	bl	8003df4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_TIMEx_PWMN_Start+0x144>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d018      	beq.n	8003c20 <HAL_TIMEx_PWMN_Start+0x104>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf6:	d013      	beq.n	8003c20 <HAL_TIMEx_PWMN_Start+0x104>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <HAL_TIMEx_PWMN_Start+0x148>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_TIMEx_PWMN_Start+0x104>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <HAL_TIMEx_PWMN_Start+0x14c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_TIMEx_PWMN_Start+0x104>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <HAL_TIMEx_PWMN_Start+0x150>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIMEx_PWMN_Start+0x104>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <HAL_TIMEx_PWMN_Start+0x154>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d010      	beq.n	8003c54 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c42:	e007      	b.n	8003c54 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40014000 	.word	0x40014000

08003c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e050      	b.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d018      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	d013      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d009      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10c      	bne.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800
 8003d48:	40000c00 	.word	0x40000c00
 8003d4c:	40014000 	.word	0x40014000

08003d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e03d      	b.n	8003de8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2204      	movs	r2, #4
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	401a      	ands	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e03f      	b.n	8003ed0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fc ff61 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2224      	movs	r2, #36	; 0x24
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f828 	bl	8003ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003edc:	b0c0      	sub	sp, #256	; 0x100
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	ea40 0301 	orr.w	r3, r0, r1
 8003f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f30:	f021 010c 	bic.w	r1, r1, #12
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	6999      	ldr	r1, [r3, #24]
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	ea40 0301 	orr.w	r3, r0, r1
 8003f5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b8f      	ldr	r3, [pc, #572]	; (80041a4 <UART_SetConfig+0x2cc>)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d005      	beq.n	8003f78 <UART_SetConfig+0xa0>
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b8d      	ldr	r3, [pc, #564]	; (80041a8 <UART_SetConfig+0x2d0>)
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d104      	bne.n	8003f82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f78:	f7fe fea8 	bl	8002ccc <HAL_RCC_GetPCLK2Freq>
 8003f7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f80:	e003      	b.n	8003f8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f82:	f7fe fe8f 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8003f86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f94:	f040 810c 	bne.w	80041b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003faa:	4622      	mov	r2, r4
 8003fac:	462b      	mov	r3, r5
 8003fae:	1891      	adds	r1, r2, r2
 8003fb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fb2:	415b      	adcs	r3, r3
 8003fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fba:	4621      	mov	r1, r4
 8003fbc:	eb12 0801 	adds.w	r8, r2, r1
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	eb43 0901 	adc.w	r9, r3, r1
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fda:	4690      	mov	r8, r2
 8003fdc:	4699      	mov	r9, r3
 8003fde:	4623      	mov	r3, r4
 8003fe0:	eb18 0303 	adds.w	r3, r8, r3
 8003fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fe8:	462b      	mov	r3, r5
 8003fea:	eb49 0303 	adc.w	r3, r9, r3
 8003fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ffe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004006:	460b      	mov	r3, r1
 8004008:	18db      	adds	r3, r3, r3
 800400a:	653b      	str	r3, [r7, #80]	; 0x50
 800400c:	4613      	mov	r3, r2
 800400e:	eb42 0303 	adc.w	r3, r2, r3
 8004012:	657b      	str	r3, [r7, #84]	; 0x54
 8004014:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004018:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800401c:	f7fc f8da 	bl	80001d4 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4b61      	ldr	r3, [pc, #388]	; (80041ac <UART_SetConfig+0x2d4>)
 8004026:	fba3 2302 	umull	r2, r3, r3, r2
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	011c      	lsls	r4, r3, #4
 800402e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004032:	2200      	movs	r2, #0
 8004034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004038:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800403c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	1891      	adds	r1, r2, r2
 8004046:	64b9      	str	r1, [r7, #72]	; 0x48
 8004048:	415b      	adcs	r3, r3
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004050:	4641      	mov	r1, r8
 8004052:	eb12 0a01 	adds.w	sl, r2, r1
 8004056:	4649      	mov	r1, r9
 8004058:	eb43 0b01 	adc.w	fp, r3, r1
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004068:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800406c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004070:	4692      	mov	sl, r2
 8004072:	469b      	mov	fp, r3
 8004074:	4643      	mov	r3, r8
 8004076:	eb1a 0303 	adds.w	r3, sl, r3
 800407a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800407e:	464b      	mov	r3, r9
 8004080:	eb4b 0303 	adc.w	r3, fp, r3
 8004084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004094:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004098:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800409c:	460b      	mov	r3, r1
 800409e:	18db      	adds	r3, r3, r3
 80040a0:	643b      	str	r3, [r7, #64]	; 0x40
 80040a2:	4613      	mov	r3, r2
 80040a4:	eb42 0303 	adc.w	r3, r2, r3
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
 80040aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040b2:	f7fc f88f 	bl	80001d4 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <UART_SetConfig+0x2d4>)
 80040be:	fba3 2301 	umull	r2, r3, r3, r1
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2264      	movs	r2, #100	; 0x64
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	1acb      	subs	r3, r1, r3
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <UART_SetConfig+0x2d4>)
 80040d4:	fba3 2302 	umull	r2, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040e0:	441c      	add	r4, r3
 80040e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	1891      	adds	r1, r2, r2
 80040fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80040fc:	415b      	adcs	r3, r3
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004104:	4641      	mov	r1, r8
 8004106:	1851      	adds	r1, r2, r1
 8004108:	6339      	str	r1, [r7, #48]	; 0x30
 800410a:	4649      	mov	r1, r9
 800410c:	414b      	adcs	r3, r1
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800411c:	4659      	mov	r1, fp
 800411e:	00cb      	lsls	r3, r1, #3
 8004120:	4651      	mov	r1, sl
 8004122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004126:	4651      	mov	r1, sl
 8004128:	00ca      	lsls	r2, r1, #3
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	4603      	mov	r3, r0
 8004130:	4642      	mov	r2, r8
 8004132:	189b      	adds	r3, r3, r2
 8004134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004138:	464b      	mov	r3, r9
 800413a:	460a      	mov	r2, r1
 800413c:	eb42 0303 	adc.w	r3, r2, r3
 8004140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004150:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004154:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004158:	460b      	mov	r3, r1
 800415a:	18db      	adds	r3, r3, r3
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
 800415e:	4613      	mov	r3, r2
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800416a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800416e:	f7fc f831 	bl	80001d4 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <UART_SetConfig+0x2d4>)
 8004178:	fba3 1302 	umull	r1, r3, r3, r2
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	2164      	movs	r1, #100	; 0x64
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	3332      	adds	r3, #50	; 0x32
 800418a:	4a08      	ldr	r2, [pc, #32]	; (80041ac <UART_SetConfig+0x2d4>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	f003 0207 	and.w	r2, r3, #7
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4422      	add	r2, r4
 800419e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041a0:	e106      	b.n	80043b0 <UART_SetConfig+0x4d8>
 80041a2:	bf00      	nop
 80041a4:	40011000 	.word	0x40011000
 80041a8:	40011400 	.word	0x40011400
 80041ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041c2:	4642      	mov	r2, r8
 80041c4:	464b      	mov	r3, r9
 80041c6:	1891      	adds	r1, r2, r2
 80041c8:	6239      	str	r1, [r7, #32]
 80041ca:	415b      	adcs	r3, r3
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041d2:	4641      	mov	r1, r8
 80041d4:	1854      	adds	r4, r2, r1
 80041d6:	4649      	mov	r1, r9
 80041d8:	eb43 0501 	adc.w	r5, r3, r1
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	00eb      	lsls	r3, r5, #3
 80041e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ea:	00e2      	lsls	r2, r4, #3
 80041ec:	4614      	mov	r4, r2
 80041ee:	461d      	mov	r5, r3
 80041f0:	4643      	mov	r3, r8
 80041f2:	18e3      	adds	r3, r4, r3
 80041f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041f8:	464b      	mov	r3, r9
 80041fa:	eb45 0303 	adc.w	r3, r5, r3
 80041fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800420e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800421e:	4629      	mov	r1, r5
 8004220:	008b      	lsls	r3, r1, #2
 8004222:	4621      	mov	r1, r4
 8004224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004228:	4621      	mov	r1, r4
 800422a:	008a      	lsls	r2, r1, #2
 800422c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004230:	f7fb ffd0 	bl	80001d4 <__aeabi_uldivmod>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4b60      	ldr	r3, [pc, #384]	; (80043bc <UART_SetConfig+0x4e4>)
 800423a:	fba3 2302 	umull	r2, r3, r3, r2
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	011c      	lsls	r4, r3, #4
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800424c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004250:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	1891      	adds	r1, r2, r2
 800425a:	61b9      	str	r1, [r7, #24]
 800425c:	415b      	adcs	r3, r3
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004264:	4641      	mov	r1, r8
 8004266:	1851      	adds	r1, r2, r1
 8004268:	6139      	str	r1, [r7, #16]
 800426a:	4649      	mov	r1, r9
 800426c:	414b      	adcs	r3, r1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800427c:	4659      	mov	r1, fp
 800427e:	00cb      	lsls	r3, r1, #3
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004286:	4651      	mov	r1, sl
 8004288:	00ca      	lsls	r2, r1, #3
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4603      	mov	r3, r0
 8004290:	4642      	mov	r2, r8
 8004292:	189b      	adds	r3, r3, r2
 8004294:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004298:	464b      	mov	r3, r9
 800429a:	460a      	mov	r2, r1
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042bc:	4649      	mov	r1, r9
 80042be:	008b      	lsls	r3, r1, #2
 80042c0:	4641      	mov	r1, r8
 80042c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042c6:	4641      	mov	r1, r8
 80042c8:	008a      	lsls	r2, r1, #2
 80042ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042ce:	f7fb ff81 	bl	80001d4 <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	4b38      	ldr	r3, [pc, #224]	; (80043bc <UART_SetConfig+0x4e4>)
 80042da:	fba3 2301 	umull	r2, r3, r3, r1
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2264      	movs	r2, #100	; 0x64
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	1acb      	subs	r3, r1, r3
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	3332      	adds	r3, #50	; 0x32
 80042ec:	4a33      	ldr	r2, [pc, #204]	; (80043bc <UART_SetConfig+0x4e4>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f8:	441c      	add	r4, r3
 80042fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fe:	2200      	movs	r2, #0
 8004300:	673b      	str	r3, [r7, #112]	; 0x70
 8004302:	677a      	str	r2, [r7, #116]	; 0x74
 8004304:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	1891      	adds	r1, r2, r2
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	415b      	adcs	r3, r3
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004318:	4641      	mov	r1, r8
 800431a:	1851      	adds	r1, r2, r1
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	4649      	mov	r1, r9
 8004320:	414b      	adcs	r3, r1
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004330:	4659      	mov	r1, fp
 8004332:	00cb      	lsls	r3, r1, #3
 8004334:	4651      	mov	r1, sl
 8004336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800433a:	4651      	mov	r1, sl
 800433c:	00ca      	lsls	r2, r1, #3
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	4603      	mov	r3, r0
 8004344:	4642      	mov	r2, r8
 8004346:	189b      	adds	r3, r3, r2
 8004348:	66bb      	str	r3, [r7, #104]	; 0x68
 800434a:	464b      	mov	r3, r9
 800434c:	460a      	mov	r2, r1
 800434e:	eb42 0303 	adc.w	r3, r2, r3
 8004352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	663b      	str	r3, [r7, #96]	; 0x60
 800435e:	667a      	str	r2, [r7, #100]	; 0x64
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800436c:	4649      	mov	r1, r9
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	4641      	mov	r1, r8
 8004372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004376:	4641      	mov	r1, r8
 8004378:	008a      	lsls	r2, r1, #2
 800437a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800437e:	f7fb ff29 	bl	80001d4 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <UART_SetConfig+0x4e4>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2164      	movs	r1, #100	; 0x64
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	3332      	adds	r3, #50	; 0x32
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <UART_SetConfig+0x4e4>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4422      	add	r2, r4
 80043ae:	609a      	str	r2, [r3, #8]
}
 80043b0:	bf00      	nop
 80043b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043b6:	46bd      	mov	sp, r7
 80043b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043bc:	51eb851f 	.word	0x51eb851f

080043c0 <memset>:
 80043c0:	4402      	add	r2, r0
 80043c2:	4603      	mov	r3, r0
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d100      	bne.n	80043ca <memset+0xa>
 80043c8:	4770      	bx	lr
 80043ca:	f803 1b01 	strb.w	r1, [r3], #1
 80043ce:	e7f9      	b.n	80043c4 <memset+0x4>

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4d0d      	ldr	r5, [pc, #52]	; (8004408 <__libc_init_array+0x38>)
 80043d4:	4c0d      	ldr	r4, [pc, #52]	; (800440c <__libc_init_array+0x3c>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	2600      	movs	r6, #0
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	4d0b      	ldr	r5, [pc, #44]	; (8004410 <__libc_init_array+0x40>)
 80043e2:	4c0c      	ldr	r4, [pc, #48]	; (8004414 <__libc_init_array+0x44>)
 80043e4:	f000 f818 	bl	8004418 <_init>
 80043e8:	1b64      	subs	r4, r4, r5
 80043ea:	10a4      	asrs	r4, r4, #2
 80043ec:	2600      	movs	r6, #0
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	08004458 	.word	0x08004458
 800440c:	08004458 	.word	0x08004458
 8004410:	08004458 	.word	0x08004458
 8004414:	0800445c 	.word	0x0800445c

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
